<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:converters="using:RavinduL.LocalNotifications.Converters"
	xmlns:foundation="using:Windows.Foundation"
	xmlns:notifications="using:RavinduL.LocalNotifications.Notifications"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<Style TargetType="notifications:SimpleNotification">
		<Setter Property="Background" Value="DarkGreen" />
		<Setter Property="Foreground" Value="White" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="PullAwayLength" Value="12" />
		<Setter Property="HideThreshold" Value="32" />
		<Setter Property="TransitionDuration" Value="0:0:.1" />
		<Setter Property="CompactWidth" Value="500" />
		<Setter Property="Breakpoint" Value="641" />
		<Setter Property="GlyphFontFamily" Value="Segoe MDL2 Assets" />
		<Setter Property="Padding" Value="12" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="notifications:SimpleNotification">
					<Grid
						x:Name="NotificationRoot"
						Width="{TemplateBinding CompactWidth}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid.Resources>
							<converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
							<!-- VerticalAlignment == VerticalAlignment.Top ? new Point(0.5, 0) : new Point(0.5, 1); -->
							<converters:ObjectComparatorConverter x:Key="VerticalAlignmentToRenderTransformOriginConverter">
								<converters:ObjectComparatorConverter.KnownValue>
									<VerticalAlignment>Top</VerticalAlignment>
								</converters:ObjectComparatorConverter.KnownValue>
								<converters:ObjectComparatorConverter.WhenEqual>
									<foundation:Point>.5,0</foundation:Point>
								</converters:ObjectComparatorConverter.WhenEqual>
								<converters:ObjectComparatorConverter.WhenUnequal>
									<foundation:Point>.5,1</foundation:Point>
								</converters:ObjectComparatorConverter.WhenUnequal>
							</converters:ObjectComparatorConverter>
							<!-- VerticalAlignment == VerticalAlignment.Top ? -1 : 1; -->
							<converters:ObjectComparatorConverter x:Key="VerticalAlignmentToScaleYConverter">
								<converters:ObjectComparatorConverter.KnownValue>
									<VerticalAlignment>Top</VerticalAlignment>
								</converters:ObjectComparatorConverter.KnownValue>
								<converters:ObjectComparatorConverter.WhenEqual>
									<x:Double>-1</x:Double>
								</converters:ObjectComparatorConverter.WhenEqual>
								<converters:ObjectComparatorConverter.WhenUnequal>
									<x:Double>1</x:Double>
								</converters:ObjectComparatorConverter.WhenUnequal>
							</converters:ObjectComparatorConverter>
							<!-- VerticalAlignment == VerticalAlignment.Bottom ? 180 : 0; -->
							<converters:ObjectComparatorConverter x:Key="VerticalAlignmentToRotationConverter">
								<converters:ObjectComparatorConverter.KnownValue>
									<VerticalAlignment>Bottom</VerticalAlignment>
								</converters:ObjectComparatorConverter.KnownValue>
								<converters:ObjectComparatorConverter.WhenEqual>
									<x:Double>180</x:Double>
								</converters:ObjectComparatorConverter.WhenEqual>
								<converters:ObjectComparatorConverter.WhenUnequal>
									<x:Double>0</x:Double>
								</converters:ObjectComparatorConverter.WhenUnequal>
							</converters:ObjectComparatorConverter>
						</Grid.Resources>
						<Grid.RenderTransform>
							<TranslateTransform x:Name="Translation" />
						</Grid.RenderTransform>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid
							x:Name="PullAwayHeader"
							Grid.ColumnSpan="2"
							Height="{TemplateBinding PullAwayLength}"
							VerticalAlignment="{TemplateBinding VerticalAlignment}"
							Background="{TemplateBinding Background}"
							RenderTransformOrigin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalAlignment, Converter={StaticResource VerticalAlignmentToRenderTransformOriginConverter}}"
							Visibility="Collapsed">
							<Grid.RenderTransform>
								<CompositeTransform Rotation="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalAlignment, Converter={StaticResource VerticalAlignmentToRotationConverter}}" ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalAlignment, Converter={StaticResource VerticalAlignmentToScaleYConverter}}" />
							</Grid.RenderTransform>
						</Grid>
						<Grid x:Name="Target" Padding="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<TextBlock
								Padding="12,0,0,0"
								VerticalAlignment="Center"
								FontFamily="{TemplateBinding GlyphFontFamily}"
								Foreground="{TemplateBinding Foreground}"
								Text="{TemplateBinding Glyph}"
								Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Glyph, Converter={StaticResource StringToVisibilityConverter}}" />
							<TextBlock
								Grid.Column="1"
								Padding="12"
								VerticalAlignment="Center"
								FontFamily="{TemplateBinding FontFamily}"
								Foreground="{TemplateBinding Foreground}"
								Text="{TemplateBinding Text}"
								TextWrapping="WrapWholeWords" />
						</Grid>
						<Button
							x:Name="DismissButton"
							Grid.Column="2"
							Padding="12,0"
							VerticalAlignment="Stretch"
							Background="Transparent"
							BorderThickness="1"
							Content="&#xE001;"
							FontFamily="Segoe MDL2 Assets"
							Foreground="{TemplateBinding Foreground}" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="AdaptiveStates">
								<VisualState x:Name="Wide">
									<VisualState.StateTriggers>
										<AdaptiveTrigger MinWindowWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Breakpoint}" />
									</VisualState.StateTriggers>
								</VisualState>
								<VisualState x:Name="Narrow">
									<VisualState.StateTriggers>
										<AdaptiveTrigger MinWindowWidth="0" />
									</VisualState.StateTriggers>
									<VisualState.Setters>
										<Setter Target="PullAwayHeader.Visibility" Value="Visible" />
										<Setter Target="DismissButton.Visibility" Value="Collapsed" />
										<Setter Target="Target.Padding" Value="0,0,12,0" />
										<Setter Target="NotificationRoot.Width" Value="Auto" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="LocalNotificationStates">
								<VisualStateGroup.Transitions>
									<VisualTransition To="Shown">
										<Storyboard>
											<DoubleAnimation
												Storyboard.TargetName="Translation"
												Storyboard.TargetProperty="Y"
												To="0"
												Duration="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TransitionDuration}" />
										</Storyboard>
									</VisualTransition>
									<VisualTransition To="Hidden">
										<Storyboard>
											<DoubleAnimation
												Storyboard.TargetName="Translation"
												Storyboard.TargetProperty="Y"
												To="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TranslateHeight}"
												Duration="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TransitionDuration}" />
										</Storyboard>
									</VisualTransition>
									<VisualTransition To="Restoring">
										<Storyboard>
											<DoubleAnimation
												Storyboard.TargetName="Translation"
												Storyboard.TargetProperty="Y"
												To="0"
												Duration="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TransitionDuration}" />
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Shown">
									<VisualState.Setters>
										<Setter Target="Translation.Y" Value="0" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Hidden">
									<VisualState.Setters>
										<Setter Target="Translation.Y" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TranslateHeight}" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Restoring" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>

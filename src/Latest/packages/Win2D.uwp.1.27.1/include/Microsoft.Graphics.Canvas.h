/* Header file automatically generated from Canvas.abi.idl */
/*
 * File built with Microsoft(R) MIDLRT Compiler Engine Version 10.00.0231 
 */

#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif /* __RPCNDR_H_VERSION__ */

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif /*COM_NO_WINDOWS_H*/
#ifndef __Microsoft2EGraphics2ECanvas_h__
#define __Microsoft2EGraphics2ECanvas_h__
#ifndef __Microsoft2EGraphics2ECanvas_p_h__
#define __Microsoft2EGraphics2ECanvas_p_h__


#pragma once

// Ensure that the setting of the /ns_prefix command line switch is consistent for all headers.
// If you get an error from the compiler indicating "warning C4005: 'CHECK_NS_PREFIX_STATE': macro redefinition", this
// indicates that you have included two different headers with different settings for the /ns_prefix MIDL command line switch
#if !defined(DISABLE_NS_PREFIX_CHECKS)
#define CHECK_NS_PREFIX_STATE "always"
#endif // !defined(DISABLE_NS_PREFIX_CHECKS)


#pragma push_macro("MIDL_CONST_ID")
#undef MIDL_CONST_ID
#define MIDL_CONST_ID const __declspec(selectany)


//  API Contract Inclusion Definitions
#if !defined(SPECIFIC_API_CONTRACT_DEFINITIONS)
#if !defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_ACTIVATEDEVENTSCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_ACTIVATION_ACTIVATEDEVENTSCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_ACTIVATEDEVENTSCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_ACTIVATIONCAMERASETTINGSCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_ACTIVATION_ACTIVATIONCAMERASETTINGSCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_ACTIVATIONCAMERASETTINGSCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_CONTACTACTIVATEDEVENTSCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_ACTIVATION_CONTACTACTIVATEDEVENTSCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_CONTACTACTIVATEDEVENTSCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_WEBUISEARCHACTIVATEDEVENTSCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_ACTIVATION_WEBUISEARCHACTIVATEDEVENTSCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_APPLICATIONMODEL_ACTIVATION_WEBUISEARCHACTIVATEDEVENTSCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_BACKGROUND_BACKGROUNDALARMAPPLICATIONCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_BACKGROUND_BACKGROUNDALARMAPPLICATIONCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_APPLICATIONMODEL_BACKGROUND_BACKGROUNDALARMAPPLICATIONCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_CALLS_BACKGROUND_CALLSBACKGROUNDCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_CALLS_BACKGROUND_CALLSBACKGROUNDCONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_APPLICATIONMODEL_CALLS_BACKGROUND_CALLSBACKGROUNDCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_CALLS_CALLSPHONECONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_CALLS_CALLSPHONECONTRACT_VERSION 0x70000
#endif // defined(WINDOWS_APPLICATIONMODEL_CALLS_CALLSPHONECONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_CALLS_CALLSVOIPCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_CALLS_CALLSVOIPCONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_APPLICATIONMODEL_CALLS_CALLSVOIPCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_CALLS_LOCKSCREENCALLCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_CALLS_LOCKSCREENCALLCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_APPLICATIONMODEL_CALLS_LOCKSCREENCALLCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_COMMUNICATIONBLOCKING_COMMUNICATIONBLOCKINGCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_COMMUNICATIONBLOCKING_COMMUNICATIONBLOCKINGCONTRACT_VERSION 0x20000
#endif // defined(WINDOWS_APPLICATIONMODEL_COMMUNICATIONBLOCKING_COMMUNICATIONBLOCKINGCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_FULLTRUSTAPPCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_FULLTRUSTAPPCONTRACT_VERSION 0x20000
#endif // defined(WINDOWS_APPLICATIONMODEL_FULLTRUSTAPPCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_SEARCH_SEARCHCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_SEARCH_SEARCHCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_APPLICATIONMODEL_SEARCH_SEARCHCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_STARTUPTASKCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_STARTUPTASKCONTRACT_VERSION 0x30000
#endif // defined(WINDOWS_APPLICATIONMODEL_STARTUPTASKCONTRACT_VERSION)

#if !defined(WINDOWS_APPLICATIONMODEL_WALLET_WALLETCONTRACT_VERSION)
#define WINDOWS_APPLICATIONMODEL_WALLET_WALLETCONTRACT_VERSION 0x20000
#endif // defined(WINDOWS_APPLICATIONMODEL_WALLET_WALLETCONTRACT_VERSION)

#if !defined(WINDOWS_DEVICES_PRINTERS_EXTENSIONS_EXTENSIONSCONTRACT_VERSION)
#define WINDOWS_DEVICES_PRINTERS_EXTENSIONS_EXTENSIONSCONTRACT_VERSION 0x20000
#endif // defined(WINDOWS_DEVICES_PRINTERS_EXTENSIONS_EXTENSIONSCONTRACT_VERSION)

#if !defined(WINDOWS_DEVICES_SMARTCARDS_SMARTCARDBACKGROUNDTRIGGERCONTRACT_VERSION)
#define WINDOWS_DEVICES_SMARTCARDS_SMARTCARDBACKGROUNDTRIGGERCONTRACT_VERSION 0x30000
#endif // defined(WINDOWS_DEVICES_SMARTCARDS_SMARTCARDBACKGROUNDTRIGGERCONTRACT_VERSION)

#if !defined(WINDOWS_DEVICES_SMARTCARDS_SMARTCARDEMULATORCONTRACT_VERSION)
#define WINDOWS_DEVICES_SMARTCARDS_SMARTCARDEMULATORCONTRACT_VERSION 0x60000
#endif // defined(WINDOWS_DEVICES_SMARTCARDS_SMARTCARDEMULATORCONTRACT_VERSION)

#if !defined(WINDOWS_DEVICES_SMS_LEGACYSMSAPICONTRACT_VERSION)
#define WINDOWS_DEVICES_SMS_LEGACYSMSAPICONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_DEVICES_SMS_LEGACYSMSAPICONTRACT_VERSION)

#if !defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)
#define WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_FOUNDATION_FOUNDATIONCONTRACT_VERSION)

#if !defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)
#define WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION 0xf0000
#endif // defined(WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION)

#if !defined(WINDOWS_GAMING_INPUT_GAMINGINPUTPREVIEWCONTRACT_VERSION)
#define WINDOWS_GAMING_INPUT_GAMINGINPUTPREVIEWCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_GAMING_INPUT_GAMINGINPUTPREVIEWCONTRACT_VERSION)

#if !defined(WINDOWS_GLOBALIZATION_GLOBALIZATIONJAPANESEPHONETICANALYZERCONTRACT_VERSION)
#define WINDOWS_GLOBALIZATION_GLOBALIZATIONJAPANESEPHONETICANALYZERCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_GLOBALIZATION_GLOBALIZATIONJAPANESEPHONETICANALYZERCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_APPBROADCASTCONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_APPBROADCASTCONTRACT_VERSION 0x20000
#endif // defined(WINDOWS_MEDIA_CAPTURE_APPBROADCASTCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_APPCAPTURECONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_APPCAPTURECONTRACT_VERSION 0x40000
#endif // defined(WINDOWS_MEDIA_CAPTURE_APPCAPTURECONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_APPCAPTUREMETADATACONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_APPCAPTUREMETADATACONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_CAPTURE_APPCAPTUREMETADATACONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_CAMERACAPTUREUICONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_CAMERACAPTUREUICONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_CAPTURE_CAMERACAPTUREUICONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_CAPTURE_GAMEBARCONTRACT_VERSION)
#define WINDOWS_MEDIA_CAPTURE_GAMEBARCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_CAPTURE_GAMEBARCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_DEVICES_CALLCONTROLCONTRACT_VERSION)
#define WINDOWS_MEDIA_DEVICES_CALLCONTROLCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_DEVICES_CALLCONTROLCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_MEDIACONTROLCONTRACT_VERSION)
#define WINDOWS_MEDIA_MEDIACONTROLCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_MEDIACONTROLCONTRACT_VERSION)

#if !defined(WINDOWS_MEDIA_PROTECTION_PROTECTIONRENEWALCONTRACT_VERSION)
#define WINDOWS_MEDIA_PROTECTION_PROTECTIONRENEWALCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_MEDIA_PROTECTION_PROTECTIONRENEWALCONTRACT_VERSION)

#if !defined(WINDOWS_NETWORKING_CONNECTIVITY_WWANCONTRACT_VERSION)
#define WINDOWS_NETWORKING_CONNECTIVITY_WWANCONTRACT_VERSION 0x20000
#endif // defined(WINDOWS_NETWORKING_CONNECTIVITY_WWANCONTRACT_VERSION)

#if !defined(WINDOWS_NETWORKING_SOCKETS_CONTROLCHANNELTRIGGERCONTRACT_VERSION)
#define WINDOWS_NETWORKING_SOCKETS_CONTROLCHANNELTRIGGERCONTRACT_VERSION 0x30000
#endif // defined(WINDOWS_NETWORKING_SOCKETS_CONTROLCHANNELTRIGGERCONTRACT_VERSION)

#if !defined(WINDOWS_PHONE_PHONECONTRACT_VERSION)
#define WINDOWS_PHONE_PHONECONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_PHONE_PHONECONTRACT_VERSION)

#if !defined(WINDOWS_PHONE_PHONEINTERNALCONTRACT_VERSION)
#define WINDOWS_PHONE_PHONEINTERNALCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_PHONE_PHONEINTERNALCONTRACT_VERSION)

#if !defined(WINDOWS_SECURITY_ENTERPRISEDATA_ENTERPRISEDATACONTRACT_VERSION)
#define WINDOWS_SECURITY_ENTERPRISEDATA_ENTERPRISEDATACONTRACT_VERSION 0x50000
#endif // defined(WINDOWS_SECURITY_ENTERPRISEDATA_ENTERPRISEDATACONTRACT_VERSION)

#if !defined(WINDOWS_STORAGE_PROVIDER_CLOUDFILESCONTRACT_VERSION)
#define WINDOWS_STORAGE_PROVIDER_CLOUDFILESCONTRACT_VERSION 0x70000
#endif // defined(WINDOWS_STORAGE_PROVIDER_CLOUDFILESCONTRACT_VERSION)

#if !defined(WINDOWS_SYSTEM_SYSTEMMANAGEMENTCONTRACT_VERSION)
#define WINDOWS_SYSTEM_SYSTEMMANAGEMENTCONTRACT_VERSION 0x70000
#endif // defined(WINDOWS_SYSTEM_SYSTEMMANAGEMENTCONTRACT_VERSION)

#if !defined(WINDOWS_UI_CORE_COREWINDOWDIALOGSCONTRACT_VERSION)
#define WINDOWS_UI_CORE_COREWINDOWDIALOGSCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_UI_CORE_COREWINDOWDIALOGSCONTRACT_VERSION)

#if !defined(WINDOWS_UI_VIEWMANAGEMENT_VIEWMANAGEMENTVIEWSCALINGCONTRACT_VERSION)
#define WINDOWS_UI_VIEWMANAGEMENT_VIEWMANAGEMENTVIEWSCALINGCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_UI_VIEWMANAGEMENT_VIEWMANAGEMENTVIEWSCALINGCONTRACT_VERSION)

#if !defined(WINDOWS_UI_WEBUI_CORE_WEBUICOMMANDBARCONTRACT_VERSION)
#define WINDOWS_UI_WEBUI_CORE_WEBUICOMMANDBARCONTRACT_VERSION 0x10000
#endif // defined(WINDOWS_UI_WEBUI_CORE_WEBUICOMMANDBARCONTRACT_VERSION)

#endif // defined(SPECIFIC_API_CONTRACT_DEFINITIONS)


// Header files for imported files
#include "inspectable.h"
#include "Windows.Foundation.h"
#include "Windows.UI.h"
#include "Windows.UI.Xaml.Media.Imaging.h"
#include "Windows.Graphics.Printing.h"
#include "Windows.UI.Input.Inking.h"
#include "Windows.UI.Composition.h"
#include "Windows.Graphics.Effects.h"
#include "Windows.UI.Text.h"
// Importing Collections header
#include <windows.foundation.collections.h>

#if defined(__cplusplus) && !defined(CINTERFACE)
#if defined(__MIDL_USE_C_ENUM)
#define MIDL_ENUM enum
#else
#define MIDL_ENUM enum class
#endif
/* Forward Declarations */
#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasResourceCreator;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasResourceCreatorWithDpi;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDeviceFactory;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory ABI::Microsoft::Graphics::Canvas::ICanvasDeviceFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDeviceStatics;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics ABI::Microsoft::Graphics::Canvas::ICanvasDeviceStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDevice;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice ABI::Microsoft::Graphics::Canvas::ICanvasDevice

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasLock;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock ABI::Microsoft::Graphics::Canvas::ICanvasLock

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICanvasEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect ABI::Microsoft::Graphics::Canvas::Effects::ICanvasEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasImage;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage ABI::Microsoft::Graphics::Canvas::ICanvasImage

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasImageStatics;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics ABI::Microsoft::Graphics::Canvas::ICanvasImageStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrushFactory;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrushStatics;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrushStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasSolidColorBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasImageBrushFactory;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrushFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasImageBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrushFactory;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrushStatics;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrushStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasLinearGradientBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrushFactory;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrushStatics;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrushStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    interface ICanvasRadialGradientBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmapFactory;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory ABI::Microsoft::Graphics::Canvas::ICanvasBitmapFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmap;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap ABI::Microsoft::Graphics::Canvas::ICanvasBitmap

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasBitmapStatics;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics ABI::Microsoft::Graphics::Canvas::ICanvasBitmapStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTargetFactory;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory ABI::Microsoft::Graphics::Canvas::ICanvasRenderTargetFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTargetStatics;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics ABI::Microsoft::Graphics::Canvas::ICanvasRenderTargetStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasRenderTarget;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasVirtualBitmapStatics;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmapStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasVirtualBitmap;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasStrokeStyle;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextInlineObject;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextFormat;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextFormatStatics;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormatStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTypography;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayout;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayoutFactory;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextLayoutStatics;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayoutStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathBuilder;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathBuilderFactory;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilderFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasActiveLayer;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGradientMesh;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGradientMeshFactory;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMeshFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGradientMeshStatics;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMeshStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextRenderingParameters;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextRenderingParametersFactory;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParametersFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontFace;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextRenderer;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasPathReceiver;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathReceiver

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGeometry;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasGeometryStatics;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometryStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasCachedGeometry;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    interface ICanvasCachedGeometryStatics;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometryStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontSet;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontSetFactory;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSetFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasFontSetStatics;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSetStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasNumberSubstitution;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasNumberSubstitutionFactory;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitutionFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextAnalyzerOptions;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasScaledFont;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextAnalyzer;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    interface ICanvasTextAnalyzerFactory;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSpriteBatchStatics;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatchStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSpriteBatch;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgElement;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgNamedElement;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgTextElement;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgPaintAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgPathAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgPointsAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgStrokeDashArrayAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgDocument;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgDocumentStatics;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    interface ICanvasSvgDocumentFactory;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocumentFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasDrawingSession;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasImageSourceFactory;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSourceFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasImageSource;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChainFactory;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory ABI::Microsoft::Graphics::Canvas::ICanvasSwapChainFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChainStatics;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics ABI::Microsoft::Graphics::Canvas::ICanvasSwapChainStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasSwapChain;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasCommandListFactory;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory ABI::Microsoft::Graphics::Canvas::ICanvasCommandListFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                interface ICanvasCommandList;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList ABI::Microsoft::Graphics::Canvas::ICanvasCommandList

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintDocumentFactory;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocumentFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintDocument;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintTaskOptionsChangedEventArgs;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPreviewEventArgs;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintEventArgs;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    interface ICanvasPrintDeferral;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedUpdateEventArgsFactory;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgsFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedUpdateEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedDrawEventArgsFactory;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgsFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedDrawEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasAnimatedControl;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    interface ICanvasCreateResourcesEventArgsFactory;
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgsFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    interface ICanvasCreateResourcesEventArgs;
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasDrawEventArgsFactory;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgsFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasDrawEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasControl;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasSwapChainPanel;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasSwapChainPanel

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualImageSourceFactory;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSourceFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualImageSource;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasRegionsInvalidatedEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        interface ICanvasVirtualControl;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Composition {
                        interface ICanvasCompositionStatics;
                    } /* Composition */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics ABI::Microsoft::Graphics::Canvas::UI::Composition::ICanvasCompositionStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPixelShaderEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect ABI::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPixelShaderEffectFactory;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory ABI::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffectFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementProfile;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementProfileFactory;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileFactory

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementProfileStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfileStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEffectTransferTable3D;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEffectTransferTable3DStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3DStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IAlphaMaskEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect ABI::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IAlphaMaskEffectStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics ABI::Microsoft::Graphics::Canvas::Effects::IAlphaMaskEffectStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IArithmeticCompositeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect ABI::Microsoft::Graphics::Canvas::Effects::IArithmeticCompositeEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IAtlasEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect ABI::Microsoft::Graphics::Canvas::Effects::IAtlasEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBlendEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect ABI::Microsoft::Graphics::Canvas::Effects::IBlendEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBorderEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect ABI::Microsoft::Graphics::Canvas::Effects::IBorderEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IBrightnessEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect ABI::Microsoft::Graphics::Canvas::Effects::IBrightnessEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IChromaKeyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect ABI::Microsoft::Graphics::Canvas::Effects::IChromaKeyEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorManagementEffectStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementEffectStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorMatrixEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect ABI::Microsoft::Graphics::Canvas::Effects::IColorMatrixEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IColorSourceEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect ABI::Microsoft::Graphics::Canvas::Effects::IColorSourceEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICompositeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect ABI::Microsoft::Graphics::Canvas::Effects::ICompositeEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IContrastEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect ABI::Microsoft::Graphics::Canvas::Effects::IContrastEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IConvolveMatrixEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect ABI::Microsoft::Graphics::Canvas::Effects::IConvolveMatrixEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICropEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect ABI::Microsoft::Graphics::Canvas::Effects::ICropEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICrossFadeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect ABI::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ICrossFadeEffectStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics ABI::Microsoft::Graphics::Canvas::Effects::ICrossFadeEffectStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDirectionalBlurEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect ABI::Microsoft::Graphics::Canvas::Effects::IDirectionalBlurEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDiscreteTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect ABI::Microsoft::Graphics::Canvas::Effects::IDiscreteTransferEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDisplacementMapEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect ABI::Microsoft::Graphics::Canvas::Effects::IDisplacementMapEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDistantDiffuseEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect ABI::Microsoft::Graphics::Canvas::Effects::IDistantDiffuseEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDistantSpecularEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect ABI::Microsoft::Graphics::Canvas::Effects::IDistantSpecularEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IDpiCompensationEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect ABI::Microsoft::Graphics::Canvas::Effects::IDpiCompensationEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEdgeDetectionEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect ABI::Microsoft::Graphics::Canvas::Effects::IEdgeDetectionEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IEmbossEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect ABI::Microsoft::Graphics::Canvas::Effects::IEmbossEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IExposureEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect ABI::Microsoft::Graphics::Canvas::Effects::IExposureEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGammaTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect ABI::Microsoft::Graphics::Canvas::Effects::IGammaTransferEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGaussianBlurEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect ABI::Microsoft::Graphics::Canvas::Effects::IGaussianBlurEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IGrayscaleEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect ABI::Microsoft::Graphics::Canvas::Effects::IGrayscaleEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHdrToneMapEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect ABI::Microsoft::Graphics::Canvas::Effects::IHdrToneMapEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHdrToneMapEffectStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics ABI::Microsoft::Graphics::Canvas::Effects::IHdrToneMapEffectStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHighlightsAndShadowsEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect ABI::Microsoft::Graphics::Canvas::Effects::IHighlightsAndShadowsEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHueRotationEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect ABI::Microsoft::Graphics::Canvas::Effects::IHueRotationEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IHueToRgbEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect ABI::Microsoft::Graphics::Canvas::Effects::IHueToRgbEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IInvertEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect ABI::Microsoft::Graphics::Canvas::Effects::IInvertEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ILinearTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect ABI::Microsoft::Graphics::Canvas::Effects::ILinearTransferEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ILuminanceToAlphaEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect ABI::Microsoft::Graphics::Canvas::Effects::ILuminanceToAlphaEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IMorphologyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect ABI::Microsoft::Graphics::Canvas::Effects::IMorphologyEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IOpacityEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect ABI::Microsoft::Graphics::Canvas::Effects::IOpacityEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IOpacityEffectStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics ABI::Microsoft::Graphics::Canvas::Effects::IOpacityEffectStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IOpacityMetadataEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect ABI::Microsoft::Graphics::Canvas::Effects::IOpacityMetadataEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPointDiffuseEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect ABI::Microsoft::Graphics::Canvas::Effects::IPointDiffuseEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPointSpecularEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect ABI::Microsoft::Graphics::Canvas::Effects::IPointSpecularEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPosterizeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect ABI::Microsoft::Graphics::Canvas::Effects::IPosterizeEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IPremultiplyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect ABI::Microsoft::Graphics::Canvas::Effects::IPremultiplyEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IRgbToHueEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect ABI::Microsoft::Graphics::Canvas::Effects::IRgbToHueEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISaturationEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect ABI::Microsoft::Graphics::Canvas::Effects::ISaturationEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IScaleEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect ABI::Microsoft::Graphics::Canvas::Effects::IScaleEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISepiaEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect ABI::Microsoft::Graphics::Canvas::Effects::ISepiaEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IShadowEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect ABI::Microsoft::Graphics::Canvas::Effects::IShadowEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISharpenEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect ABI::Microsoft::Graphics::Canvas::Effects::ISharpenEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISpotDiffuseEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect ABI::Microsoft::Graphics::Canvas::Effects::ISpotDiffuseEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ISpotSpecularEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect ABI::Microsoft::Graphics::Canvas::Effects::ISpotSpecularEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IStraightenEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect ABI::Microsoft::Graphics::Canvas::Effects::IStraightenEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITableTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect ABI::Microsoft::Graphics::Canvas::Effects::ITableTransferEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITableTransfer3DEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect ABI::Microsoft::Graphics::Canvas::Effects::ITableTransfer3DEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITemperatureAndTintEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect ABI::Microsoft::Graphics::Canvas::Effects::ITemperatureAndTintEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITileEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect ABI::Microsoft::Graphics::Canvas::Effects::ITileEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITintEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect ABI::Microsoft::Graphics::Canvas::Effects::ITintEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITintEffectStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics ABI::Microsoft::Graphics::Canvas::Effects::ITintEffectStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITransform2DEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect ABI::Microsoft::Graphics::Canvas::Effects::ITransform2DEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITransform3DEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect ABI::Microsoft::Graphics::Canvas::Effects::ITransform3DEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface ITurbulenceEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect ABI::Microsoft::Graphics::Canvas::Effects::ITurbulenceEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IUnPremultiplyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect ABI::Microsoft::Graphics::Canvas::Effects::IUnPremultiplyEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IVignetteEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect ABI::Microsoft::Graphics::Canvas::Effects::IVignetteEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IWhiteLevelAdjustmentEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect ABI::Microsoft::Graphics::Canvas::Effects::IWhiteLevelAdjustmentEffect

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_FWD_DEFINED__
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    interface IWhiteLevelAdjustmentEffectStatics;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics ABI::Microsoft::Graphics::Canvas::Effects::IWhiteLevelAdjustmentEffectStatics

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C++)

// Collection interface definitions
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasDevice;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */




#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ef539eb5-aa23-573f-ba41-ccd7f3150c5b"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::CanvasDevice*,IInspectable*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasDevice*, ABI::Microsoft::Graphics::Canvas::ICanvasDevice*>,IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.CanvasDevice, Object>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::CanvasDevice*,IInspectable*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::ICanvasDevice*,IInspectable*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::ICanvasDevice*,IInspectable*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                MIDL_ENUM CanvasBufferPrecision : int;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


#ifndef DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_USE
#define DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("8bff1f50-aef3-558e-a02b-589b6c0cfea8"))
IReference<MIDL_ENUM ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision> : IReference_impl<MIDL_ENUM ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReference`1<Microsoft.Graphics.Canvas.CanvasBufferPrecision>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<MIDL_ENUM ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision> __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_t;
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision ABI::Windows::Foundation::__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision ABI::Windows::Foundation::IReference<ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision>
//#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_t ABI::Windows::Foundation::IReference<ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_USE */



namespace ABI {
    namespace Windows {
        namespace Foundation {
            struct Rect;
            
        } /* Foundation */
    } /* Windows */
} /* ABI */


#ifndef DEF___FIReference_1_Windows__CFoundation__CRect_USE
#define DEF___FIReference_1_Windows__CFoundation__CRect_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("80423f11-054f-5eac-afd3-63b6ce15e77b"))
IReference<struct ABI::Windows::Foundation::Rect> : IReference_impl<struct ABI::Windows::Foundation::Rect> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReference`1<Windows.Foundation.Rect>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Windows::Foundation::Rect> __FIReference_1_Windows__CFoundation__CRect_t;
#define __FIReference_1_Windows__CFoundation__CRect ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CRect_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReference_1_Windows__CFoundation__CRect ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Rect>
//#define __FIReference_1_Windows__CFoundation__CRect_t ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Rect>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Windows__CFoundation__CRect_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasBitmap;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("01f4b012-b7d5-5e02-8caa-2c460f35c947"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.CanvasBitmap>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t;
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE */





#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("0391e8ef-719a-5c80-b87a-7d902b154e3e"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.CanvasBitmap>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasBitmap*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t;
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_t ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::ICanvasBitmap*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasVirtualBitmap;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6fec4e18-7336-5236-8748-9a4b669b98f6"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.CanvasVirtualBitmap>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t;
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE */





#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("d47cfc52-5abc-550b-ad7c-63b5aec8ca3a"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*, ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.CanvasVirtualBitmap>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmap*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t;
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_t ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::ICanvasVirtualBitmap*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_USE */




#ifndef DEF___FIIterator_1_HSTRING_USE
#define DEF___FIIterator_1_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("8c304ebb-6615-50a4-8829-879ecd443236"))
IIterator<HSTRING> : IIterator_impl<HSTRING> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<String>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<HSTRING> __FIIterator_1_HSTRING_t;
#define __FIIterator_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1_HSTRING ABI::Windows::Foundation::Collections::IIterator<HSTRING>
//#define __FIIterator_1_HSTRING_t ABI::Windows::Foundation::Collections::IIterator<HSTRING>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_HSTRING_USE */




#ifndef DEF___FIIterable_1_HSTRING_USE
#define DEF___FIIterable_1_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e"))
IIterable<HSTRING> : IIterable_impl<HSTRING> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<String>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<HSTRING> __FIIterable_1_HSTRING_t;
#define __FIIterable_1_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1_HSTRING ABI::Windows::Foundation::Collections::IIterable<HSTRING>
//#define __FIIterable_1_HSTRING_t ABI::Windows::Foundation::Collections::IIterable<HSTRING>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_HSTRING_USE */




#ifndef DEF___FIVectorView_1_HSTRING_USE
#define DEF___FIVectorView_1_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2f13c006-a03a-5f69-b090-75a43e33423e"))
IVectorView<HSTRING> : IVectorView_impl<HSTRING> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<String>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<HSTRING> __FIVectorView_1_HSTRING_t;
#define __FIVectorView_1_HSTRING ABI::Windows::Foundation::Collections::__FIVectorView_1_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1_HSTRING ABI::Windows::Foundation::Collections::IVectorView<HSTRING>
//#define __FIVectorView_1_HSTRING_t ABI::Windows::Foundation::Collections::IVectorView<HSTRING>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_HSTRING_USE */




#ifndef DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("60310303-49c5-52e6-abc6-a9b36eccc716"))
IKeyValuePair<HSTRING,HSTRING> : IKeyValuePair_impl<HSTRING,HSTRING> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<String, String>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<HSTRING,HSTRING> __FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>
//#define __FIKeyValuePair_2_HSTRING_HSTRING_t ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_HSTRING_HSTRING_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("05eb86f1-7140-5517-b88d-cbaebe57e6b1"))
IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
//#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b"))
IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
//#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */




#ifndef DEF___FIMapView_2_HSTRING_HSTRING_USE
#define DEF___FIMapView_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ac7f26f2-feb7-5b2a-8ac4-345bc62caede"))
IMapView<HSTRING,HSTRING> : IMapView_impl<HSTRING,HSTRING> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IMapView`2<String, String>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMapView<HSTRING,HSTRING> __FIMapView_2_HSTRING_HSTRING_t;
#define __FIMapView_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIMapView_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::IMapView<HSTRING,HSTRING>
//#define __FIMapView_2_HSTRING_HSTRING_t ABI::Windows::Foundation::Collections::IMapView<HSTRING,HSTRING>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMapView_2_HSTRING_HSTRING_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d211d7c6-b231-5857-8ebe-5dcc576e3c94"))
IVectorView<__FIKeyValuePair_2_HSTRING_HSTRING*> : IVectorView_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
//#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#define DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d3705344-38b6-5af6-83e5-3ced5c0f3d03"))
IVector<__FIKeyValuePair_2_HSTRING_HSTRING*> : IVector_impl<__FIKeyValuePair_2_HSTRING_HSTRING*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_HSTRING_HSTRING*> __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_t;
#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
//#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,HSTRING>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasFontFace;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ba9cfc0b-75d0-5455-9d9d-b88a73a806d0"))
IIterator<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::IIterator<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
//#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t ABI::Windows::Foundation::Collections::IIterator<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */





#ifndef DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("dadc03be-adec-5e2b-8056-e620ebd250a6"))
IIterable<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
//#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t ABI::Windows::Foundation::Collections::IIterable<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */





#ifndef DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f90149d7-8a7e-5e74-a251-9e92f5a8084d"))
IVectorView<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IVectorView_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
//#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */





#ifndef DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#define DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("488e8b62-7d1c-5a28-ba1b-d30062a9462c"))
IVector<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> : IVector_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFace*> __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t;
#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::__FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
//#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_t ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_USE */



namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Input {
                namespace Inking {
                    class InkStroke;
                } /* Inking */
            } /* Input */
        } /* UI */
    } /* Windows */
} /* ABI */

#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace UI {
            namespace Input {
                namespace Inking {
                    interface IInkStroke;
                } /* Inking */
            } /* Input */
        } /* UI */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke ABI::Windows::UI::Input::Inking::IInkStroke

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#define DEF___FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5608d5a9-e7e4-5a0b-941f-b7fed76b35bf"))
IIterator<ABI::Windows::UI::Input::Inking::InkStroke*> : IIterator_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Input::Inking::InkStroke*, ABI::Windows::UI::Input::Inking::IInkStroke*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.UI.Input.Inking.InkStroke>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::UI::Input::Inking::InkStroke*> __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_t;
#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::UI::Input::Inking::IInkStroke*>
//#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::UI::Input::Inking::IInkStroke*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_USE */


#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#define DEF___FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bbc11401-89d0-5305-a3b3-36c887714b9b"))
IIterable<ABI::Windows::UI::Input::Inking::InkStroke*> : IIterable_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Windows::UI::Input::Inking::InkStroke*, ABI::Windows::UI::Input::Inking::IInkStroke*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.UI.Input.Inking.InkStroke>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::UI::Input::Inking::InkStroke*> __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_t;
#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::UI::Input::Inking::IInkStroke*>
//#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::UI::Input::Inking::IInkStroke*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_USE */


#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    struct CanvasCharacterRange;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasScaledFont;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("659fa7a9-d350-5c96-9eda-65d151127be6"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasScaledFont*> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasScaledFont*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasScaledFont*> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("56051c10-f92f-5a6c-911e-367267245224"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("e13342d7-18ac-5a96-8f97-4ad9aa7cc211"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f1eaee0a-1f12-5e87-9657-cb93e8827bb0"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    struct CanvasAnalyzedBidi;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9f5425b6-be6f-5f3d-9d65-ad8c61aa01de"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7e9530ef-eb03-5e8f-9d38-f2c62e31d4bc"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("51271225-b352-5aaa-ae19-95d387c9b6b7"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("67c4d9c7-c31e-51c1-ab1d-f8a0ebcd5552"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasNumberSubstitution;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("93f9a2ab-5b51-5468-8b38-4693d96b4255"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution*> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitution*> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("c95c26dd-c066-543f-a3d4-a3fc9f0cad1a"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("27f7d15b-8c80-5fa3-a202-899cef70e002"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("80a1114f-758f-5110-baa8-f1884a7bb922"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    struct CanvasAnalyzedScript;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f113a468-5320-5b3d-b976-1c12d95d71fe"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("d6dd13e4-d1e8-577c-bbcb-cf31b96f09ed"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("4b15169a-c4b5-51d3-b6c8-79ec3e177871"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9b325f09-f744-53fd-acc7-d5e6fea523d7"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    struct CanvasAnalyzedGlyphOrientation;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("a8240806-1266-51ae-9276-0d6eb62f403b"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("6fa01beb-a02e-57b4-975d-0662230315e9"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bc2186a2-f834-5c78-8d4c-ec4166c46b40"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ce1ccf50-cc60-5c33-98d5-fb6ea38131bd"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasTypography;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("3e238e5e-5b0e-519e-b8ee-9524d51e0376"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasTypography*> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Text::CanvasTypography*, ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasTypography*> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("6bf99e32-7516-5e16-ad21-f83a89898c50"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("9101ecfa-8e8b-5236-b3c1-3ae419df1a4d"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("08f216fc-38e5-5c04-bb90-ed0436cdf91d"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("842f5ded-4e0a-5c23-b1d2-f551a40dfb56"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t;
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasScaledFont*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("eaf56dfd-1114-5c78-a566-389d8da38288"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t;
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBidi>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    struct CanvasAnalyzedBreakpoint;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


#ifndef DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("2c386993-9c51-5a1a-b59c-176b085558dd"))
IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> : IKeyValuePair_impl<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<struct ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,struct ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint> __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>
//#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("662b6385-c525-52d3-95be-f878f47eb9ec"))
IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IIterator_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
//#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("ec783e46-bd88-51b7-9539-e767dfd3aa5a"))
IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IIterable_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
//#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("864c33d2-ec71-546a-a93e-8c7600579bbb"))
IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IVectorView_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
//#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5f14499a-b04a-527b-a1b2-4861c2ba02e2"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t;
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("de9ca46b-a6c8-57de-8423-c62f9719fbaf"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t;
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("f347bfc7-bb27-523d-9efc-c70891b2b98b"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t;
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("c512a1c3-6564-5d44-8a62-bd91e7fc17c0"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t;
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedGlyphOrientation>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#define DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("efdb3d2a-c102-5f30-bb87-1c5d3e22d912"))
IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> : IVector_impl<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography*> __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t;
#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
//#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange,ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    class CanvasSvgNamedElement;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("76b5a817-1bef-5f3e-91bb-5697a3ba6e51"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t;
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE */





#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("68a752f6-827a-5816-8e65-0b3342673075"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgNamedElement*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t;
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_t ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    class CanvasSvgDocument;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#define DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("45ebe17c-efb1-5ba2-9280-84134cea38f9"))
IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> : IAsyncOperationCompletedHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.AsyncOperationCompletedHandler`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t;
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument ABI::Windows::Foundation::__FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>
//#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t ABI::Windows::Foundation::IAsyncOperationCompletedHandler<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE */





#ifndef DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#define DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("63adbeeb-f748-5aec-a9d3-5fd731b2bc67"))
IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> : IAsyncOperation_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*, ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDocument*> __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t;
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument ABI::Windows::Foundation::__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>
//#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_t ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    class CanvasPrintDocument;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    class CanvasPrintTaskOptionsChangedEventArgs;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("87076d4b-95f2-5eb5-94b8-f3a8feb8d335"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintTaskOptionsChangedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintTaskOptionsChangedEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    class CanvasPreviewEventArgs;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f406c30c-1745-5ada-a50f-11237a9d21c3"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPreviewEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPreviewEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    class CanvasPrintEventArgs;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e1b1643e-7f53-57d8-8bd1-90ff039d73ca"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs*, ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument, Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::CanvasPrintEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument*,ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasAnimatedControl;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    class CanvasCreateResourcesEventArgs;
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a29acd34-5ab2-50ff-b02d-e6737195de24"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasAnimatedUpdateEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("f3505553-11e9-548c-80b6-33e56d2e673b"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedUpdateEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasAnimatedDrawEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("00ddd999-594e-5c0f-b4a0-52b01171dcd6"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasAnimatedDrawEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_USE */






#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("17e87476-4ea7-5920-a49e-a7a9e383c7dc"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> : ITypedEventHandler_impl<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl, Object>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedControl*,IInspectable*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasControl;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */




#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("ffcd91a9-b0f6-5e59-b815-0581129240e6"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasDrawEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6b0b7674-c32a-59f5-ba42-79cd2fd7f023"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasDrawEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasVirtualImageSource;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasRegionsInvalidatedEventArgs;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fed1b996-f368-58b3-bccd-8ebacf6611b2"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource, Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasVirtualControl;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */




#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("82c7431b-0f55-5f54-8dd8-f9a8327df123"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_USE */






#ifndef DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#define DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("9a63a22f-5ad4-5195-beb6-9b73b4304443"))
ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> : ITypedEventHandler_impl<ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*>,ABI::Windows::Foundation::Internal::AggregateType<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*, ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.TypedEventHandler`2<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl, Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::CanvasRegionsInvalidatedEventArgs*> __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t;
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>
//#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_t ABI::Windows::Foundation::ITypedEventHandler<ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualControl*,ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasRegionsInvalidatedEventArgs*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_USE */





#ifndef DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("09335560-6c6b-5a26-9348-97b781132b20"))
IKeyValuePair<HSTRING,IInspectable*> : IKeyValuePair_impl<HSTRING,IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IKeyValuePair`2<String, Object>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IKeyValuePair<HSTRING,IInspectable*> __FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>
//#define __FIKeyValuePair_2_HSTRING_IInspectable_t ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIKeyValuePair_2_HSTRING_IInspectable_USE */





#ifndef DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("5db5fa32-707c-5849-a06b-91c8eb9d10e8"))
IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterator_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
//#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */





#ifndef DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("fe2f3d47-5d47-5499-8374-430c7cda0204"))
IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> : IIterable_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
//#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */





#ifndef DEF___FIMapView_2_HSTRING_IInspectable_USE
#define DEF___FIMapView_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("bb78502a-f79d-54fa-92c9-90c5039fdf7e"))
IMapView<HSTRING,IInspectable*> : IMapView_impl<HSTRING,IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IMapView`2<String, Object>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMapView<HSTRING,IInspectable*> __FIMapView_2_HSTRING_IInspectable_t;
#define __FIMapView_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIMapView_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIMapView_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::IMapView<HSTRING,IInspectable*>
//#define __FIMapView_2_HSTRING_IInspectable_t ABI::Windows::Foundation::Collections::IMapView<HSTRING,IInspectable*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMapView_2_HSTRING_IInspectable_USE */





#ifndef DEF___FIMap_2_HSTRING_IInspectable_USE
#define DEF___FIMap_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("1b0d3570-0877-5ec2-8a2c-3b9539506aca"))
IMap<HSTRING,IInspectable*> : IMap_impl<HSTRING,IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IMap`2<String, Object>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IMap<HSTRING,IInspectable*> __FIMap_2_HSTRING_IInspectable_t;
#define __FIMap_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIMap_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIMap_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::IMap<HSTRING,IInspectable*>
//#define __FIMap_2_HSTRING_IInspectable_t ABI::Windows::Foundation::Collections::IMap<HSTRING,IInspectable*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIMap_2_HSTRING_IInspectable_USE */





#ifndef DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("696a5329-ed0f-57cc-9379-ff81e8235bcc"))
IVectorView<__FIKeyValuePair_2_HSTRING_IInspectable*> : IVectorView_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
//#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */





#ifndef DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#define DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("7b624b94-16ce-554e-89e4-6fa8d769da11"))
IVector<__FIKeyValuePair_2_HSTRING_IInspectable*> : IVector_impl<__FIKeyValuePair_2_HSTRING_IInspectable*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Object>>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<__FIKeyValuePair_2_HSTRING_IInspectable*> __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_t;
#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::__FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
//#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IKeyValuePair<HSTRING,IInspectable*>*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_USE */



namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Numerics {
                struct Vector4;
                
            } /* Numerics */
        } /* Foundation */
    } /* Windows */
} /* ABI */


#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4_USE
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a5e843c9-ed20-5339-8f8d-9fe404cf3654"))
IReference<struct ABI::Windows::Foundation::Numerics::Vector4> : IReference_impl<struct ABI::Windows::Foundation::Numerics::Vector4> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReference`1<Windows.Foundation.Numerics.Vector4>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Windows::Foundation::Numerics::Vector4> __FIReference_1_Windows__CFoundation__CNumerics__CVector4_t;
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4 ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CNumerics__CVector4_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4 ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Numerics::Vector4>
//#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_t ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Numerics::Vector4>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CVector4_USE */



namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Numerics {
                struct Matrix3x2;
                
            } /* Numerics */
        } /* Foundation */
    } /* Windows */
} /* ABI */


#ifndef DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#define DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("76358cfd-2cbd-525b-a49e-90ee18247b71"))
IReference<struct ABI::Windows::Foundation::Numerics::Matrix3x2> : IReference_impl<struct ABI::Windows::Foundation::Numerics::Matrix3x2> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReference`1<Windows.Foundation.Numerics.Matrix3x2>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Windows::Foundation::Numerics::Matrix3x2> __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_t;
#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 ABI::Windows::Foundation::__FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Numerics::Matrix3x2>
//#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_t ABI::Windows::Foundation::IReference<ABI::Windows::Foundation::Numerics::Matrix3x2>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE */



namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Numerics {
                struct Vector2;
                
            } /* Numerics */
        } /* Foundation */
    } /* Windows */
} /* ABI */


#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("29df2178-ffdb-563e-88db-3869a007305e"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector2> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Vector2> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Vector2>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector2> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_t;
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Vector2>
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_t ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Vector2>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_USE */



namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Numerics {
                struct Vector3;
                
            } /* Numerics */
        } /* Foundation */
    } /* Windows */
} /* ABI */


#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("aa1a35fa-0b4e-5248-bd79-ffd47cfe4027"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector3> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Vector3> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Vector3>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector3> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_t;
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Vector3>
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_t ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Vector3>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_USE */





#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("68757250-5849-5772-90e3-aadb4c970bff"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector4> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Vector4> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Vector4>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Vector4> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_t;
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Vector4>
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_t ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Vector4>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_USE */





#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a525d9ff-c09b-501a-a785-4d1ed9e102b8"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix3x2> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Matrix3x2> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Matrix3x2>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix3x2> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_t;
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Matrix3x2>
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_t ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Matrix3x2>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_USE */



namespace ABI {
    namespace Windows {
        namespace Foundation {
            namespace Numerics {
                struct Matrix4x4;
                
            } /* Numerics */
        } /* Foundation */
    } /* Windows */
} /* ABI */


#ifndef DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_USE
#define DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("fc0d5a15-8f9d-5e8f-8828-aef2c2e25bad"))
IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix4x4> : IReferenceArray_impl<struct ABI::Windows::Foundation::Numerics::Matrix4x4> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Windows.Foundation.Numerics.Matrix4x4>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<struct ABI::Windows::Foundation::Numerics::Matrix4x4> __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_t;
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 ABI::Windows::Foundation::__FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Matrix4x4>
//#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_t ABI::Windows::Foundation::IReferenceArray<ABI::Windows::Foundation::Numerics::Matrix4x4>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_USE */




#ifndef DEF___FIReferenceArray_1_float_USE
#define DEF___FIReferenceArray_1_float_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("6ab1ea83-cb41-5f99-92cc-23bd4336a1fb"))
IReferenceArray<float> : IReferenceArray_impl<float> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Single>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<float> __FIReferenceArray_1_float_t;
#define __FIReferenceArray_1_float ABI::Windows::Foundation::__FIReferenceArray_1_float_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_float ABI::Windows::Foundation::IReferenceArray<float>
//#define __FIReferenceArray_1_float_t ABI::Windows::Foundation::IReferenceArray<float>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_float_USE */




#ifndef DEF___FIReferenceArray_1_int_USE
#define DEF___FIReferenceArray_1_int_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("a6d080a5-b087-5bc2-9a9f-5cd687b4d1f7"))
IReferenceArray<int> : IReferenceArray_impl<int> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Int32>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<int> __FIReferenceArray_1_int_t;
#define __FIReferenceArray_1_int ABI::Windows::Foundation::__FIReferenceArray_1_int_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_int ABI::Windows::Foundation::IReferenceArray<int>
//#define __FIReferenceArray_1_int_t ABI::Windows::Foundation::IReferenceArray<int>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_int_USE */




#ifndef DEF___FIReferenceArray_1_boolean_USE
#define DEF___FIReferenceArray_1_boolean_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("e8e72666-48cc-593f-ba85-2663496956e3"))
IReferenceArray<bool> : IReferenceArray_impl<ABI::Windows::Foundation::Internal::AggregateType<bool, boolean>> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReferenceArray`1<Boolean>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReferenceArray<bool> __FIReferenceArray_1_boolean_t;
#define __FIReferenceArray_1_boolean ABI::Windows::Foundation::__FIReferenceArray_1_boolean_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReferenceArray_1_boolean ABI::Windows::Foundation::IReferenceArray<boolean>
//#define __FIReferenceArray_1_boolean_t ABI::Windows::Foundation::IReferenceArray<boolean>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReferenceArray_1_boolean_USE */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    struct ColorManagementSimpleProfile;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


#ifndef DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_USE
#define DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation {
template <>
struct __declspec(uuid("41db10c7-f02c-5d7f-a12e-4e05047388e7"))
IReference<struct ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> : IReference_impl<struct ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.IReference`1<Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IReference<struct ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile> __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_t;
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile ABI::Windows::Foundation::__FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_t
/* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile ABI::Windows::Foundation::IReference<ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile>
//#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_t ABI::Windows::Foundation::IReference<ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_USE */



#ifndef ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
namespace ABI {
    namespace Windows {
        namespace Graphics {
            namespace Effects {
                interface IGraphicsEffectSource;
            } /* Effects */
        } /* Graphics */
    } /* Windows */
} /* ABI */
#define __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource ABI::Windows::Graphics::Effects::IGraphicsEffectSource

#endif // ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("c50f44f2-b5b9-50e5-b493-a967ccc21dd2"))
IIterator<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IIterator_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterator`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterator<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
//#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t ABI::Windows::Foundation::Collections::IIterator<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */


#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("42924784-b65c-5e5f-9ea2-d50dcf427e65"))
IIterable<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IIterable_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IIterable`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IIterable<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
//#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t ABI::Windows::Foundation::Collections::IIterable<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */


#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("74afa1ad-285c-5bc4-9936-4338f19d7979"))
IVectorView<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IVectorView_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVectorView`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVectorView<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
//#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t ABI::Windows::Foundation::Collections::IVectorView<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */


#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

#ifndef DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#define DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE
#if !defined(RO_NO_TEMPLATE_NAME)
namespace ABI { namespace Windows { namespace Foundation { namespace Collections {
template <>
struct __declspec(uuid("b5a2f91f-1f97-50ef-ba3f-27aecbfb6d0a"))
IVector<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> : IVector_impl<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> 
{
    static const wchar_t* z_get_rc_name_impl() 
    {
        return L"Windows.Foundation.Collections.IVector`1<Windows.Graphics.Effects.IGraphicsEffectSource>"; 
    }
};
// Define a typedef for the parameterized interface specialization's mangled name.
// This allows code which uses the mangled name for the parameterized interface to access the
// correct parameterized interface specialization.
typedef IVector<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*> __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t;
#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::__FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t
/* Collections */ } /* Foundation */ } /* Windows */ } /* ABI */ } 

////  Define an alias for the C version of the interface for compatibility purposes.
//#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
//#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_t ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Graphics::Effects::IGraphicsEffectSource*>
#endif // !defined(RO_NO_TEMPLATE_NAME)
#endif /* DEF___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_USE */


#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000




#pragma warning (push)
#pragma warning (disable:4668) 
#pragma warning (disable:4001) 
#pragma once 
#pragma warning (pop)
#if defined(__cplusplus)
namespace ABI { namespace Microsoft { namespace Graphics { namespace Canvas { namespace Numerics = ::ABI::Windows::Foundation::Numerics; } } } }
#endif

/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasAlphaMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasAlphaMode : int
                {
                    Premultiplied = 0,
                    Straight = 1,
                    Ignore = 2,
                } CanvasAlphaMode;
                const CanvasAlphaMode CanvasAlphaMode_Premultiplied = CanvasAlphaMode::Premultiplied;
                const CanvasAlphaMode CanvasAlphaMode_Straight = CanvasAlphaMode::Straight;
                const CanvasAlphaMode CanvasAlphaMode_Ignore = CanvasAlphaMode::Ignore;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasAntialiasing
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasAntialiasing : int
                {
                    Antialiased = 0,
                    Aliased = 1,
                } CanvasAntialiasing;
                const CanvasAntialiasing CanvasAntialiasing_Antialiased = CanvasAntialiasing::Antialiased;
                const CanvasAntialiasing CanvasAntialiasing_Aliased = CanvasAntialiasing::Aliased;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasBlend
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasBlend : int
                {
                    SourceOver = 0,
                    Copy = 1,
                    Min = 2,
                    Add = 3,
                } CanvasBlend;
                const CanvasBlend CanvasBlend_SourceOver = CanvasBlend::SourceOver;
                const CanvasBlend CanvasBlend_Copy = CanvasBlend::Copy;
                const CanvasBlend CanvasBlend_Min = CanvasBlend::Min;
                const CanvasBlend CanvasBlend_Add = CanvasBlend::Add;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasBufferPrecision
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasBufferPrecision : int
                {
                    Precision8UIntNormalized = 0,
                    Precision8UIntNormalizedSrgb = 1,
                    Precision16UIntNormalized = 2,
                    Precision16Float = 3,
                    Precision32Float = 4,
                } CanvasBufferPrecision;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision8UIntNormalized = CanvasBufferPrecision::Precision8UIntNormalized;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision8UIntNormalizedSrgb = CanvasBufferPrecision::Precision8UIntNormalizedSrgb;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision16UIntNormalized = CanvasBufferPrecision::Precision16UIntNormalized;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision16Float = CanvasBufferPrecision::Precision16Float;
                const CanvasBufferPrecision CanvasBufferPrecision_Precision32Float = CanvasBufferPrecision::Precision32Float;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasColorSpace
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasColorSpace : int
                {
                    Custom = 0,
                    Srgb = 1,
                    ScRgb = 2,
                } CanvasColorSpace;
                const CanvasColorSpace CanvasColorSpace_Custom = CanvasColorSpace::Custom;
                const CanvasColorSpace CanvasColorSpace_Srgb = CanvasColorSpace::Srgb;
                const CanvasColorSpace CanvasColorSpace_ScRgb = CanvasColorSpace::ScRgb;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasComposite
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasComposite : int
                {
                    SourceOver = 0,
                    DestinationOver = 1,
                    SourceIn = 2,
                    DestinationIn = 3,
                    SourceOut = 4,
                    DestinationOut = 5,
                    SourceAtop = 6,
                    DestinationAtop = 7,
                    Xor = 8,
                    Add = 9,
                    Copy = 10,
                    BoundedCopy = 11,
                    MaskInvert = 12,
                } CanvasComposite;
                const CanvasComposite CanvasComposite_SourceOver = CanvasComposite::SourceOver;
                const CanvasComposite CanvasComposite_DestinationOver = CanvasComposite::DestinationOver;
                const CanvasComposite CanvasComposite_SourceIn = CanvasComposite::SourceIn;
                const CanvasComposite CanvasComposite_DestinationIn = CanvasComposite::DestinationIn;
                const CanvasComposite CanvasComposite_SourceOut = CanvasComposite::SourceOut;
                const CanvasComposite CanvasComposite_DestinationOut = CanvasComposite::DestinationOut;
                const CanvasComposite CanvasComposite_SourceAtop = CanvasComposite::SourceAtop;
                const CanvasComposite CanvasComposite_DestinationAtop = CanvasComposite::DestinationAtop;
                const CanvasComposite CanvasComposite_Xor = CanvasComposite::Xor;
                const CanvasComposite CanvasComposite_Add = CanvasComposite::Add;
                const CanvasComposite CanvasComposite_Copy = CanvasComposite::Copy;
                const CanvasComposite CanvasComposite_BoundedCopy = CanvasComposite::BoundedCopy;
                const CanvasComposite CanvasComposite_MaskInvert = CanvasComposite::MaskInvert;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasDebugLevel
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasDebugLevel : int
                {
                    None = 0,
                    Error = 1,
                    Warning = 2,
                    Information = 3,
                } CanvasDebugLevel;
                const CanvasDebugLevel CanvasDebugLevel_None = CanvasDebugLevel::None;
                const CanvasDebugLevel CanvasDebugLevel_Error = CanvasDebugLevel::Error;
                const CanvasDebugLevel CanvasDebugLevel_Warning = CanvasDebugLevel::Warning;
                const CanvasDebugLevel CanvasDebugLevel_Information = CanvasDebugLevel::Information;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasEdgeBehavior
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasEdgeBehavior : int
                {
                    Clamp = 0,
                    Wrap = 1,
                    Mirror = 2,
                } CanvasEdgeBehavior;
                const CanvasEdgeBehavior CanvasEdgeBehavior_Clamp = CanvasEdgeBehavior::Clamp;
                const CanvasEdgeBehavior CanvasEdgeBehavior_Wrap = CanvasEdgeBehavior::Wrap;
                const CanvasEdgeBehavior CanvasEdgeBehavior_Mirror = CanvasEdgeBehavior::Mirror;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasImageInterpolation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasImageInterpolation : int
                {
                    NearestNeighbor = 0,
                    Linear = 1,
                    Cubic = 2,
                    MultiSampleLinear = 3,
                    Anisotropic = 4,
                    HighQualityCubic = 5,
                } CanvasImageInterpolation;
                const CanvasImageInterpolation CanvasImageInterpolation_NearestNeighbor = CanvasImageInterpolation::NearestNeighbor;
                const CanvasImageInterpolation CanvasImageInterpolation_Linear = CanvasImageInterpolation::Linear;
                const CanvasImageInterpolation CanvasImageInterpolation_Cubic = CanvasImageInterpolation::Cubic;
                const CanvasImageInterpolation CanvasImageInterpolation_MultiSampleLinear = CanvasImageInterpolation::MultiSampleLinear;
                const CanvasImageInterpolation CanvasImageInterpolation_Anisotropic = CanvasImageInterpolation::Anisotropic;
                const CanvasImageInterpolation CanvasImageInterpolation_HighQualityCubic = CanvasImageInterpolation::HighQualityCubic;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasLayerOptions
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [flags, version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasLayerOptions : unsigned int
                {
                    None = 0,
                    InitializeFromBackground = 0x1,
                    IgnoreAlpha = 0x2,
                } CanvasLayerOptions;
                
                DEFINE_ENUM_FLAG_OPERATORS(CanvasLayerOptions)
                const CanvasLayerOptions CanvasLayerOptions_None = CanvasLayerOptions::None;
                const CanvasLayerOptions CanvasLayerOptions_InitializeFromBackground = CanvasLayerOptions::InitializeFromBackground;
                const CanvasLayerOptions CanvasLayerOptions_IgnoreAlpha = CanvasLayerOptions::IgnoreAlpha;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasUnits
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasUnits : int
                {
                    Dips = 0,
                    Pixels = 1,
                } CanvasUnits;
                const CanvasUnits CanvasUnits_Dips = CanvasUnits::Dips;
                const CanvasUnits CanvasUnits_Pixels = CanvasUnits::Pixels;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasArcSize
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasArcSize : int
                    {
                        Small = 0,
                        Large = 1,
                    } CanvasArcSize;
                    const CanvasArcSize CanvasArcSize_Small = CanvasArcSize::Small;
                    const CanvasArcSize CanvasArcSize_Large = CanvasArcSize::Large;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasCapStyle : int
                    {
                        Flat = 0,
                        Square = 1,
                        Round = 2,
                        Triangle = 3,
                    } CanvasCapStyle;
                    const CanvasCapStyle CanvasCapStyle_Flat = CanvasCapStyle::Flat;
                    const CanvasCapStyle CanvasCapStyle_Square = CanvasCapStyle::Square;
                    const CanvasCapStyle CanvasCapStyle_Round = CanvasCapStyle::Round;
                    const CanvasCapStyle CanvasCapStyle_Triangle = CanvasCapStyle::Triangle;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasDashStyle : int
                    {
                        Solid = 0,
                        Dash = 1,
                        Dot = 2,
                        DashDot = 3,
                        DashDotDot = 4,
                    } CanvasDashStyle;
                    const CanvasDashStyle CanvasDashStyle_Solid = CanvasDashStyle::Solid;
                    const CanvasDashStyle CanvasDashStyle_Dash = CanvasDashStyle::Dash;
                    const CanvasDashStyle CanvasDashStyle_Dot = CanvasDashStyle::Dot;
                    const CanvasDashStyle CanvasDashStyle_DashDot = CanvasDashStyle::DashDot;
                    const CanvasDashStyle CanvasDashStyle_DashDotDot = CanvasDashStyle::DashDotDot;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFigureFill : int
                    {
                        Default = 0,
                        DoesNotAffectFills = 1,
                    } CanvasFigureFill;
                    const CanvasFigureFill CanvasFigureFill_Default = CanvasFigureFill::Default;
                    const CanvasFigureFill CanvasFigureFill_DoesNotAffectFills = CanvasFigureFill::DoesNotAffectFills;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFigureLoop
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFigureLoop : int
                    {
                        Open = 0,
                        Closed = 1,
                    } CanvasFigureLoop;
                    const CanvasFigureLoop CanvasFigureLoop_Open = CanvasFigureLoop::Open;
                    const CanvasFigureLoop CanvasFigureLoop_Closed = CanvasFigureLoop::Closed;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFigureSegmentOptions
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [flags, version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFigureSegmentOptions : unsigned int
                    {
                        None = 0,
                        ForceUnstroked = 0x1,
                        ForceRoundLineJoin = 0x2,
                    } CanvasFigureSegmentOptions;
                    
                    DEFINE_ENUM_FLAG_OPERATORS(CanvasFigureSegmentOptions)
                    const CanvasFigureSegmentOptions CanvasFigureSegmentOptions_None = CanvasFigureSegmentOptions::None;
                    const CanvasFigureSegmentOptions CanvasFigureSegmentOptions_ForceUnstroked = CanvasFigureSegmentOptions::ForceUnstroked;
                    const CanvasFigureSegmentOptions CanvasFigureSegmentOptions_ForceRoundLineJoin = CanvasFigureSegmentOptions::ForceRoundLineJoin;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFilledRegionDetermination : int
                    {
                        Alternate = 0,
                        Winding = 1,
                    } CanvasFilledRegionDetermination;
                    const CanvasFilledRegionDetermination CanvasFilledRegionDetermination_Alternate = CanvasFilledRegionDetermination::Alternate;
                    const CanvasFilledRegionDetermination CanvasFilledRegionDetermination_Winding = CanvasFilledRegionDetermination::Winding;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasGeometryCombine : int
                    {
                        Union = 0,
                        Intersect = 1,
                        Xor = 2,
                        Exclude = 3,
                    } CanvasGeometryCombine;
                    const CanvasGeometryCombine CanvasGeometryCombine_Union = CanvasGeometryCombine::Union;
                    const CanvasGeometryCombine CanvasGeometryCombine_Intersect = CanvasGeometryCombine::Intersect;
                    const CanvasGeometryCombine CanvasGeometryCombine_Xor = CanvasGeometryCombine::Xor;
                    const CanvasGeometryCombine CanvasGeometryCombine_Exclude = CanvasGeometryCombine::Exclude;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasGeometryRelation : int
                    {
                        Disjoint = 0,
                        Contained = 1,
                        Contains = 2,
                        Overlap = 3,
                    } CanvasGeometryRelation;
                    const CanvasGeometryRelation CanvasGeometryRelation_Disjoint = CanvasGeometryRelation::Disjoint;
                    const CanvasGeometryRelation CanvasGeometryRelation_Contained = CanvasGeometryRelation::Contained;
                    const CanvasGeometryRelation CanvasGeometryRelation_Contains = CanvasGeometryRelation::Contains;
                    const CanvasGeometryRelation CanvasGeometryRelation_Overlap = CanvasGeometryRelation::Overlap;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasGeometrySimplification : int
                    {
                        CubicsAndLines = 0,
                        Lines = 1,
                    } CanvasGeometrySimplification;
                    const CanvasGeometrySimplification CanvasGeometrySimplification_CubicsAndLines = CanvasGeometrySimplification::CubicsAndLines;
                    const CanvasGeometrySimplification CanvasGeometrySimplification_Lines = CanvasGeometrySimplification::Lines;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasLineJoin : int
                    {
                        Miter = 0,
                        Bevel = 1,
                        Round = 2,
                        MiterOrBevel = 3,
                    } CanvasLineJoin;
                    const CanvasLineJoin CanvasLineJoin_Miter = CanvasLineJoin::Miter;
                    const CanvasLineJoin CanvasLineJoin_Bevel = CanvasLineJoin::Bevel;
                    const CanvasLineJoin CanvasLineJoin_Round = CanvasLineJoin::Round;
                    const CanvasLineJoin CanvasLineJoin_MiterOrBevel = CanvasLineJoin::MiterOrBevel;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasStrokeTransformBehavior : int
                    {
                        Normal = 0,
                        Fixed = 1,
                        Hairline = 2,
                    } CanvasStrokeTransformBehavior;
                    const CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Normal = CanvasStrokeTransformBehavior::Normal;
                    const CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Fixed = CanvasStrokeTransformBehavior::Fixed;
                    const CanvasStrokeTransformBehavior CanvasStrokeTransformBehavior_Hairline = CanvasStrokeTransformBehavior::Hairline;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasSweepDirection
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSweepDirection : int
                    {
                        CounterClockwise = 0,
                        Clockwise = 1,
                    } CanvasSweepDirection;
                    const CanvasSweepDirection CanvasSweepDirection_CounterClockwise = CanvasSweepDirection::CounterClockwise;
                    const CanvasSweepDirection CanvasSweepDirection_Clockwise = CanvasSweepDirection::Clockwise;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [flags, version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasDrawTextOptions : unsigned int
                    {
                        Default = 0,
                        NoPixelSnap = 0x1,
                        Clip = 0x2,
                        EnableColorFont = 0x4,
                    } CanvasDrawTextOptions;
                    
                    DEFINE_ENUM_FLAG_OPERATORS(CanvasDrawTextOptions)
                    const CanvasDrawTextOptions CanvasDrawTextOptions_Default = CanvasDrawTextOptions::Default;
                    const CanvasDrawTextOptions CanvasDrawTextOptions_NoPixelSnap = CanvasDrawTextOptions::NoPixelSnap;
                    const CanvasDrawTextOptions CanvasDrawTextOptions_Clip = CanvasDrawTextOptions::Clip;
                    const CanvasDrawTextOptions CanvasDrawTextOptions_EnableColorFont = CanvasDrawTextOptions::EnableColorFont;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTextAntialiasing : int
                    {
                        Auto = 0,
                        ClearType = 1,
                        Grayscale = 2,
                        Aliased = 3,
                    } CanvasTextAntialiasing;
                    const CanvasTextAntialiasing CanvasTextAntialiasing_Auto = CanvasTextAntialiasing::Auto;
                    const CanvasTextAntialiasing CanvasTextAntialiasing_ClearType = CanvasTextAntialiasing::ClearType;
                    const CanvasTextAntialiasing CanvasTextAntialiasing_Grayscale = CanvasTextAntialiasing::Grayscale;
                    const CanvasTextAntialiasing CanvasTextAntialiasing_Aliased = CanvasTextAntialiasing::Aliased;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



#define PIXEL_FORMAT(x) ::ABI::Windows::Graphics::DirectX::DirectXPixelFormat_##x

/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectBorderMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM EffectBorderMode : int
                    {
                        Soft = 0,
                        Hard = 1,
                    } EffectBorderMode;
                    const EffectBorderMode EffectBorderMode_Soft = EffectBorderMode::Soft;
                    const EffectBorderMode EffectBorderMode_Hard = EffectBorderMode::Hard;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM ColorManagementRenderingIntent : int
                    {
                        Perceptual = 0,
                        RelativeColorimetric = 1,
                        Saturation = 2,
                        AbsoluteColorimetric = 3,
                    } ColorManagementRenderingIntent;
                    const ColorManagementRenderingIntent ColorManagementRenderingIntent_Perceptual = ColorManagementRenderingIntent::Perceptual;
                    const ColorManagementRenderingIntent ColorManagementRenderingIntent_RelativeColorimetric = ColorManagementRenderingIntent::RelativeColorimetric;
                    const ColorManagementRenderingIntent ColorManagementRenderingIntent_Saturation = ColorManagementRenderingIntent::Saturation;
                    const ColorManagementRenderingIntent ColorManagementRenderingIntent_AbsoluteColorimetric = ColorManagementRenderingIntent::AbsoluteColorimetric;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectOptimization
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM EffectOptimization : int
                    {
                        Speed = 0,
                        Balanced = 1,
                        Quality = 2,
                    } EffectOptimization;
                    const EffectOptimization EffectOptimization_Speed = EffectOptimization::Speed;
                    const EffectOptimization EffectOptimization_Balanced = EffectOptimization::Balanced;
                    const EffectOptimization EffectOptimization_Quality = EffectOptimization::Quality;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectChannelSelect
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM EffectChannelSelect : int
                    {
                        Red = 0,
                        Green = 1,
                        Blue = 2,
                        Alpha = 3,
                    } EffectChannelSelect;
                    const EffectChannelSelect EffectChannelSelect_Red = EffectChannelSelect::Red;
                    const EffectChannelSelect EffectChannelSelect_Green = EffectChannelSelect::Green;
                    const EffectChannelSelect EffectChannelSelect_Blue = EffectChannelSelect::Blue;
                    const EffectChannelSelect EffectChannelSelect_Alpha = EffectChannelSelect::Alpha;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM EffectHueColorSpace : int
                    {
                        Hsv = 0,
                        Hsl = 1,
                    } EffectHueColorSpace;
                    const EffectHueColorSpace EffectHueColorSpace_Hsv = EffectHueColorSpace::Hsv;
                    const EffectHueColorSpace EffectHueColorSpace_Hsl = EffectHueColorSpace::Hsl;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasLock;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasDpiRounding
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasDpiRounding : int
                {
                    Floor = 0,
                    Round = 1,
                    Ceiling = 2,
                } CanvasDpiRounding;
                const CanvasDpiRounding CanvasDpiRounding_Floor = CanvasDpiRounding::Floor;
                const CanvasDpiRounding CanvasDpiRounding_Round = CanvasDpiRounding::Round;
                const CanvasDpiRounding CanvasDpiRounding_Ceiling = CanvasDpiRounding::Ceiling;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreator[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreator";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, uuid("8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11"), version] */
                MIDL_INTERFACE("8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11")
                ICanvasResourceCreator : public IInspectable
                {
                public:
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasResourceCreator=_uuidof(ICanvasResourceCreator);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, uuid("1A75B512-E9FA-49E6-A876-38CAE194013E"), version] */
                MIDL_INTERFACE("1A75B512-E9FA-49E6-A876-38CAE194013E")
                ICanvasResourceCreatorWithDpi : public IInspectable
                {
                public:
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Dpi(
                        /* [retval, out] */float * dpi
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE ConvertPixelsToDips(
                        /* [in] */INT32 pixels,
                        /* [retval, out] */float * dips
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE ConvertDipsToPixels(
                        /* [in] */float dips,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasDpiRounding dpiRounding,
                        /* [retval, out] */INT32 * pixels
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasResourceCreatorWithDpi=_uuidof(ICanvasResourceCreatorWithDpi);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDeviceFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDevice
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceFactory[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("E2C2BF21-5418-43B9-A2DA-539E287C790F"), version] */
                MIDL_INTERFACE("E2C2BF21-5418-43B9-A2DA-539E287C790F")
                ICanvasDeviceFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateWithForceSoftwareRendererOption(
                        /* [in] */::boolean forceSoftwareRenderer,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * canvasDevice
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasDeviceFactory=_uuidof(ICanvasDeviceFactory);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDeviceStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDevice
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceStatics[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("9B6E2B27-CD07-421A-8F69-0AE8A787FE8C"), version] */
                MIDL_INTERFACE("9B6E2B27-CD07-421A-8F69-0AE8A787FE8C")
                ICanvasDeviceStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Device(
                        /* [in] */ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice * direct3DDevice,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * canvasDevice
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetSharedDevice(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * canvasDevice
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetSharedDeviceWithForceSoftwareRenderer(
                        /* [in] */::boolean forceSoftwareRenderer,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * canvasDevice
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DebugLevel(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasDebugLevel value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DebugLevel(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasDebugLevel * value
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasDeviceStatics=_uuidof(ICanvasDeviceStatics);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDevice
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDevice
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *     Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDevice[] = L"Microsoft.Graphics.Canvas.ICanvasDevice";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6"), version] */
                MIDL_INTERFACE("A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6")
                ICanvasDevice : public IInspectable
                {
                public:
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer(
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MaximumBitmapSizeInPixels(
                        /* [retval, out] */INT32 * value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE IsPixelFormatSupported(
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat pixelFormat,
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE IsBufferPrecisionSupported(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MaximumCacheSize(
                        /* [retval, out] */UINT64 * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_MaximumCacheSize(
                        /* [in] */UINT64 value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LowPriority(
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LowPriority(
                        /* [in] */::boolean value
                        ) = 0;
                    /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_DeviceLost(
                        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * value,
                        /* [retval, out] */EventRegistrationToken * token
                        ) = 0;
                    /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_DeviceLost(
                        /* [in] */EventRegistrationToken token
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE IsDeviceLost(
                        /* [in] */int hresult,
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE RaiseDeviceLost(void) = 0;
                    virtual HRESULT STDMETHODCALLTYPE Lock(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasLock * * lock
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE IsDeviceLost2(
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE GetDeviceLostReason(
                        /* [retval, out] */int * hresult
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasDevice=_uuidof(ICanvasDevice);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasDevice
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasDevice ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDevice[] = L"Microsoft.Graphics.Canvas.CanvasDevice";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasLock
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasLock
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasLock[] = L"Microsoft.Graphics.Canvas.ICanvasLock";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("7A0E8498-FBA9-4FB0-AA8C-6A48B5EE3E4F"), version] */
                MIDL_INTERFACE("7A0E8498-FBA9-4FB0-AA8C-6A48B5EE3E4F")
                ICanvasLock : public IInspectable
                {
                public:
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasLock=_uuidof(ICanvasLock);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasLock
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasLock ** Default Interface **
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasLock_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasLock_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasLock[] = L"Microsoft.Graphics.Canvas.CanvasLock";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Graphics.Effects.IGraphicsEffect
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICanvasEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICanvasEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, uuid("0EF96F8C-9B5E-4BF0-A399-AAD8CE53DB55"), version] */
                    MIDL_INTERFACE("0EF96F8C-9B5E-4BF0-A399-AAD8CE53DB55")
                    ICanvasEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CacheOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CacheOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BufferPrecision(
                            /* [retval, out] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BufferPrecision(
                            /* [in] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE InvalidateSourceRectangle(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                            /* [in] */UINT32 sourceIndex,
                            /* [in] */ABI::Windows::Foundation::Rect invalidRectangle
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetInvalidRectangles(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Windows::Foundation::Rect * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetRequiredSourceRectangle(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Rect outputRectangle,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::ICanvasEffect * sourceEffect,
                            /* [in] */UINT32 sourceIndex,
                            /* [in] */ABI::Windows::Foundation::Rect sourceBounds,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetRequiredSourceRectangles(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Rect outputRectangle,
                            /* [in] */UINT32 sourceEffectCount,
                            /* [size_is(sourceEffectCount), in] */ABI::Microsoft::Graphics::Canvas::Effects::ICanvasEffect * * sourceEffects,
                            /* [in] */UINT32 sourceIndexCount,
                            /* [size_is(sourceIndexCount), in] */UINT32 * sourceIndices,
                            /* [in] */UINT32 sourceBoundsCount,
                            /* [size_is(sourceBoundsCount), in] */ABI::Windows::Foundation::Rect * sourceBounds,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Windows::Foundation::Rect * * valueElements
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasEffect=_uuidof(ICanvasEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__) */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.Matrix5x4
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef 
                    struct Matrix5x4
                    {
                        float M11;
                        float M12;
                        float M13;
                        float M14;
                        float M21;
                        float M22;
                        float M23;
                        float M24;
                        float M31;
                        float M32;
                        float M33;
                        float M34;
                        float M41;
                        float M42;
                        float M43;
                        float M44;
                        float M51;
                        float M52;
                        float M53;
                        float M54;
                    } Matrix5x4;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasDrawingSession;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasImage
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Graphics.Effects.IGraphicsEffectSource
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasImage[] = L"Microsoft.Graphics.Canvas.ICanvasImage";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, uuid("794966D3-6A64-47E9-8DA8-B46AAA24D53B"), version] */
                MIDL_INTERFACE("794966D3-6A64-47E9-8DA8-B46AAA24D53B")
                ICanvasImage : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBounds(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBoundsWithTransform(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                        /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasImage=_uuidof(ICanvasImage);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__) */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasBitmapFileFormat
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasBitmapFileFormat : int
                {
                    Auto,
                    Bmp,
                    Png,
                    Jpeg,
                    Tiff,
                    Gif,
                    JpegXR,
                } CanvasBitmapFileFormat;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Auto = CanvasBitmapFileFormat::Auto;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Bmp = CanvasBitmapFileFormat::Bmp;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Png = CanvasBitmapFileFormat::Png;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Jpeg = CanvasBitmapFileFormat::Jpeg;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Tiff = CanvasBitmapFileFormat::Tiff;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_Gif = CanvasBitmapFileFormat::Gif;
                const CanvasBitmapFileFormat CanvasBitmapFileFormat_JpegXR = CanvasBitmapFileFormat::JpegXR;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasImageStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasImageStatics[] = L"Microsoft.Graphics.Canvas.ICanvasImageStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("C54EEA15-5A14-489A-8FA0-6E84541F922D"), version] */
                MIDL_INTERFACE("C54EEA15-5A14-489A-8FA0-6E84541F922D")
                ICanvasImageStatics : public IInspectable
                {
                public:
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SaveAsync(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * action
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SaveWithQualityAsync(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                        /* [in] */float quality,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * action
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SaveWithQualityAndBufferPrecisionAsync(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                        /* [in] */float quality,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * action
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE ComputeHistogram(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect channelSelect,
                        /* [in] */INT32 numberOfBins,
                        /* [out] */UINT32 * valueCount,
                        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE IsHistogramSupported(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * device,
                        /* [retval, out] */::boolean * result
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasImageStatics=_uuidof(ICanvasImageStatics);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasImage
 *
 * RuntimeClass contains static methods.
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasImage_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasImage_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasImage[] = L"Microsoft.Graphics.Canvas.CanvasImage";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasBrush";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, uuid("F5D58591-C803-41B4-878E-79D92AB13295"), version] */
                    MIDL_INTERFACE("F5D58591-C803-41B4-878E-79D92AB13295")
                    ICanvasBrush : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Opacity(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Opacity(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Transform(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix3x2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Transform(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasBrush=_uuidof(ICanvasBrush);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__) */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    class CanvasSolidColorBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */




/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("8ABF4780-4EDD-4F2B-BF63-2C385115B201"), version] */
                    MIDL_INTERFACE("8ABF4780-4EDD-4F2B-BF63-2C385115B201")
                    ICanvasSolidColorBrushFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::UI::Color color,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush * * canvasSolidColorBrush
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSolidColorBrushFactory=_uuidof(ICanvasSolidColorBrushFactory);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("629B7244-5B9E-4EF8-8E09-264714201EE8"), version] */
                    MIDL_INTERFACE("629B7244-5B9E-4EF8-8E09-264714201EE8")
                    ICanvasSolidColorBrushStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateHdr(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 colorHdr,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasSolidColorBrush * * canvasSolidColorBrush
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSolidColorBrushStatics=_uuidof(ICanvasSolidColorBrushStatics);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("8BC30F87-BAD5-4871-88B8-9FE3C63D204A"), version] */
                    MIDL_INTERFACE("8BC30F87-BAD5-4871-88B8-9FE3C63D204A")
                    ICanvasSolidColorBrush : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Color(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Color(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSolidColorBrush=_uuidof(ICanvasSolidColorBrush);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush";
#endif

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    class CanvasImageBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("C40CCB59-1B87-4394-A6A6-ECD278E877D6"), version] */
                    MIDL_INTERFACE("C40CCB59-1B87-4394-A6A6-ECD278E877D6")
                    ICanvasImageBrushFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush * * canvasImageBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithImage(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasImageBrush * * canvasImageBrush
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasImageBrushFactory=_uuidof(ICanvasImageBrushFactory);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("5A21C4E7-D450-4942-8BBD-F017097AB763"), version] */
                    MIDL_INTERFACE("5A21C4E7-D450-4942-8BBD-F017097AB763")
                    ICanvasImageBrush : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Image(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Image(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ExtendX(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ExtendX(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ExtendY(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ExtendY(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceRectangle(
                            /* [retval, out] */__FIReference_1_Windows__CFoundation__CRect * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceRectangle(
                            /* [in] */__FIReference_1_Windows__CFoundation__CRect * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasImageBrush=_uuidof(ICanvasImageBrush);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [version] */
                    typedef 
                    struct CanvasGradientStop
                    {
                        float Position;
                        ABI::Windows::UI::Color Color;
                    } CanvasGradientStop;
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [version] */
                    typedef 
                    struct CanvasGradientStopHdr
                    {
                        float Position;
                        ABI::Windows::Foundation::Numerics::Vector4 Color;
                    } CanvasGradientStopHdr;
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    class CanvasLinearGradientBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54"), version] */
                    MIDL_INTERFACE("A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54")
                    ICanvasLinearGradientBrushFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateSimple(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::UI::Color startColor,
                            /* [in] */ABI::Windows::UI::Color endColor,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithStops(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * gradientStops,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndAlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * gradientStops,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndInterpolationOptions(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * gradientStops,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasLinearGradientBrushFactory=_uuidof(ICanvasLinearGradientBrushFactory);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("E9DE3392-8FBF-478C-8E6A-D0A0EA753B37"), version] */
                    MIDL_INTERFACE("E9DE3392-8FBF-478C-8E6A-D0A0EA753B37")
                    ICanvasLinearGradientBrushStatics : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrSimple(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 startColorHdr,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 endColorHdr,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrWithStops(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * gradientStopsHdr,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndAlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * gradientStopsHdr,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndInterpolationOptions(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * gradientStopsHdr,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateRainbow(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */float eldritchness,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasLinearGradientBrush * * canvasLinearGradientBrush
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasLinearGradientBrushStatics=_uuidof(ICanvasLinearGradientBrushStatics);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD"), version] */
                    MIDL_INTERFACE("A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD")
                    ICanvasLinearGradientBrush : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_StartPoint(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_StartPoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_EndPoint(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_EndPoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Stops(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_StopsHdr(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_EdgeBehavior(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PreInterpolationSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PostInterpolationSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BufferPrecision(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasLinearGradientBrush=_uuidof(ICanvasLinearGradientBrush);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush";
#endif

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    class CanvasRadialGradientBrush;
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("7933A51F-A910-4548-849F-42DDEC466F41"), version] */
                    MIDL_INTERFACE("7933A51F-A910-4548-849F-42DDEC466F41")
                    ICanvasRadialGradientBrushFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateSimple(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::UI::Color startColor,
                            /* [in] */ABI::Windows::UI::Color endColor,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithStops(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * gradientStops,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndAlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * gradientStops,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithEdgeBehaviorAndInterpolationOptions(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * gradientStops,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasRadialGradientBrushFactory=_uuidof(ICanvasRadialGradientBrushFactory);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("3B0D4DAE-3E21-4818-99B4-779ACAAF18BE"), version] */
                    MIDL_INTERFACE("3B0D4DAE-3E21-4818-99B4-779ACAAF18BE")
                    ICanvasRadialGradientBrushStatics : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrSimple(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 startColorHdr,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 endColorHdr,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrWithStops(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * gradientStops,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndAlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * gradientStops,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateHdrWithEdgeBehaviorAndInterpolationOptions(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 gradientStopCount,
                            /* [size_is(gradientStopCount), in] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * gradientStops,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior edgeBehavior,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace preInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace postInterpolationSpace,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision bufferPrecision,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateRainbow(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */float eldritchness,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasRadialGradientBrush * * canvasRadialGradientBrush
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasRadialGradientBrushStatics=_uuidof(ICanvasRadialGradientBrushStatics);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Brushes {
                    /* [object, exclusiveto, uuid("4D27D756-14A9-4EB7-973F-E6614D4F89E7"), version] */
                    MIDL_INTERFACE("4D27D756-14A9-4EB7-973F-E6614D4F89E7")
                    ICanvasRadialGradientBrush : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Center(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Center(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OriginOffset(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OriginOffset(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RadiusX(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RadiusX(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RadiusY(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RadiusY(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Stops(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStop * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_StopsHdr(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Brushes::CanvasGradientStopHdr * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_EdgeBehavior(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PreInterpolationSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PostInterpolationSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BufferPrecision(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasBufferPrecision * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasRadialGradientBrush=_uuidof(ICanvasRadialGradientBrush);
                    
                } /* Brushes */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush";
#endif




namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                
                typedef ABI::Windows::Graphics::Imaging::BitmapSize BitmapSize;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasBitmapFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasBitmap
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapFactory[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4"), version] */
                MIDL_INTERFACE("F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4")
                ICanvasBitmapFactory : public IInspectable
                {
                public:
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasBitmapFactory=_uuidof(ICanvasBitmapFactory);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasBitmap
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasBitmap
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *     Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmap[] = L"Microsoft.Graphics.Canvas.ICanvasBitmap";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE"), version] */
                MIDL_INTERFACE("C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE")
                ICanvasBitmap : public IInspectable
                {
                public:
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SizeInPixels(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::BitmapSize * size
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                        /* [retval, out] */ABI::Windows::Foundation::Size * size
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Bounds(
                        /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Format(
                        /* [retval, out] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE SaveToFileAsync(
                        /* [in] */HSTRING fileName,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * asyncAction
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SaveToFileWithBitmapFileFormatAsync(
                        /* [in] */HSTRING fileName,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * asyncAction
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SaveToFileWithBitmapFileFormatAndQualityAsync(
                        /* [in] */HSTRING fileName,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                        /* [in] */float quality,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * asyncAction
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE SaveToStreamAsync(
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * asyncAction
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE SaveToStreamWithQualityAsync(
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBitmapFileFormat fileFormat,
                        /* [in] */float quality,
                        /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * asyncAction
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPixelBytes(
                        /* [out] */UINT32 * valueCount,
                        /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPixelBytesWithSubrectangle(
                        /* [in] */INT32 left,
                        /* [in] */INT32 top,
                        /* [in] */INT32 width,
                        /* [in] */INT32 height,
                        /* [out] */UINT32 * valueCount,
                        /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPixelBytesWithBuffer(
                        /* [in] */ABI::Windows::Storage::Streams::IBuffer * buffer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPixelBytesWithBufferAndSubrectangle(
                        /* [in] */ABI::Windows::Storage::Streams::IBuffer * buffer,
                        /* [in] */INT32 left,
                        /* [in] */INT32 top,
                        /* [in] */INT32 width,
                        /* [in] */INT32 height
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPixelColors(
                        /* [out] */UINT32 * valueCount,
                        /* [retval, size_is(, *(valueCount)), out] */ABI::Windows::UI::Color * * valueElements
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPixelColorsWithSubrectangle(
                        /* [in] */INT32 left,
                        /* [in] */INT32 top,
                        /* [in] */INT32 width,
                        /* [in] */INT32 height,
                        /* [out] */UINT32 * valueCount,
                        /* [retval, size_is(, *(valueCount)), out] */ABI::Windows::UI::Color * * valueElements
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SetPixelBytes(
                        /* [in] */UINT32 valueCount,
                        /* [size_is(valueCount), in] */BYTE * valueElements
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SetPixelBytesWithSubrectangle(
                        /* [in] */UINT32 valueCount,
                        /* [size_is(valueCount), in] */BYTE * valueElements,
                        /* [in] */INT32 left,
                        /* [in] */INT32 top,
                        /* [in] */INT32 width,
                        /* [in] */INT32 height
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE SetPixelBytesWithBuffer(
                        /* [in] */ABI::Windows::Storage::Streams::IBuffer * buffer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE SetPixelBytesWithBufferAndSubrectangle(
                        /* [in] */ABI::Windows::Storage::Streams::IBuffer * buffer,
                        /* [in] */INT32 left,
                        /* [in] */INT32 top,
                        /* [in] */INT32 width,
                        /* [in] */INT32 height
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE SetPixelColors(
                        /* [in] */UINT32 valueCount,
                        /* [size_is(valueCount), in] */ABI::Windows::UI::Color * valueElements
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE SetPixelColorsWithSubrectangle(
                        /* [in] */UINT32 valueCount,
                        /* [size_is(valueCount), in] */ABI::Windows::UI::Color * valueElements,
                        /* [in] */INT32 left,
                        /* [in] */INT32 top,
                        /* [in] */INT32 width,
                        /* [in] */INT32 height
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmap(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * otherBitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmapWithDestPoint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * otherBitmap,
                        /* [in] */INT32 destX,
                        /* [in] */INT32 destY
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CopyPixelsFromBitmapWithDestPointAndSourceRect(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * otherBitmap,
                        /* [in] */INT32 destX,
                        /* [in] */INT32 destY,
                        /* [in] */INT32 sourceRectLeft,
                        /* [in] */INT32 sourceRectTop,
                        /* [in] */INT32 sourceRectWidth,
                        /* [in] */INT32 sourceRectHeight
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasBitmap=_uuidof(ICanvasBitmap);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasBitmapStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasBitmap
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapStatics[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC"), version] */
                MIDL_INTERFACE("C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC")
                ICanvasBitmapStatics : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Surface(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface * surface,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface * surface,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface * surface,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromBytes(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */UINT32 byteCount,
                        /* [size_is(byteCount), in] */BYTE * bytes,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */UINT32 byteCount,
                        /* [size_is(byteCount), in] */BYTE * bytes,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */UINT32 byteCount,
                        /* [size_is(byteCount), in] */BYTE * bytes,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithBuffer(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IBuffer * buffer,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithBufferAndDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IBuffer * buffer,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromBytesWithBufferAndDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IBuffer * buffer,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromColors(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */UINT32 colorCount,
                        /* [size_is(colorCount), in] */ABI::Windows::UI::Color * colors,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromColorsWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */UINT32 colorCount,
                        /* [size_is(colorCount), in] */ABI::Windows::UI::Color * colors,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromColorsWithDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */UINT32 colorCount,
                        /* [size_is(colorCount), in] */ABI::Windows::UI::Color * colors,
                        /* [in] */INT32 widthInPixels,
                        /* [in] */INT32 heightInPixels,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateFromSoftwareBitmap(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Graphics::Imaging::ISoftwareBitmap * sourceBitmap,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstring(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */HSTRING fileName,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstringWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */HSTRING fileName,
                        /* [in] */float dpi,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromHstringWithDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */HSTRING fileName,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUri(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::IUriRuntimeClass * uri,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::IUriRuntimeClass * uri,
                        /* [in] */float dpi,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::IUriRuntimeClass * uri,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStream(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */float dpi,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasBitmapStatics=_uuidof(ICanvasBitmapStatics);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasBitmap
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasBitmap ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasBitmap[] = L"Microsoft.Graphics.Canvas.CanvasBitmap";
#endif

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasRenderTarget;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */




/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7"), version] */
                MIDL_INTERFACE("620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7")
                ICanvasRenderTargetFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateWithSize(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::Size size,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget * * renderTarget
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                        /* [in] */float width,
                        /* [in] */float height,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget * * renderTarget
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */float width,
                        /* [in] */float height,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget * * renderTarget
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */float width,
                        /* [in] */float height,
                        /* [in] */float dpi,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget * * renderTarget
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasRenderTargetFactory=_uuidof(ICanvasRenderTargetFactory);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("C7D1FE37-DD57-45D7-BCC1-15625A21E8D5"), version] */
                MIDL_INTERFACE("C7D1FE37-DD57-45D7-BCC1-15625A21E8D5")
                ICanvasRenderTargetStatics : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11Surface(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface * surface,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface * surface,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget * * bitmap
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFromDirect3D11SurfaceWithDpiAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface * surface,
                        /* [in] */float dpi,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasRenderTarget * * bitmap
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasRenderTargetStatics=_uuidof(ICanvasRenderTargetStatics);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasRenderTarget
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTarget";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B"), version] */
                MIDL_INTERFACE("2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B")
                ICanvasRenderTarget : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasRenderTarget=_uuidof(ICanvasRenderTarget);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasRenderTarget ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.CanvasRenderTarget";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasVirtualBitmapOptions
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasVirtualBitmapOptions : int
                {
                    None,
                    ReleaseSource,
                    CacheOnDemand,
                } CanvasVirtualBitmapOptions;
                const CanvasVirtualBitmapOptions CanvasVirtualBitmapOptions_None = CanvasVirtualBitmapOptions::None;
                const CanvasVirtualBitmapOptions CanvasVirtualBitmapOptions_ReleaseSource = CanvasVirtualBitmapOptions::ReleaseSource;
                const CanvasVirtualBitmapOptions CanvasVirtualBitmapOptions_CacheOnDemand = CanvasVirtualBitmapOptions::CacheOnDemand;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasVirtualBitmap
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics[] = L"Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("B2F1F8E9-0770-4DD4-956D-78D911390957"), version] */
                MIDL_INTERFACE("B2F1F8E9-0770-4DD4-956D-78D911390957")
                ICanvasVirtualBitmapStatics : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromFileName(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */HSTRING fileName,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromFileNameWithOptions(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */HSTRING fileName,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromFileNameWithOptionsAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */HSTRING fileName,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUri(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::IUriRuntimeClass * uri,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithOptions(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::IUriRuntimeClass * uri,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromUriWithOptionsAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::IUriRuntimeClass * uri,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStream(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithOptions(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE LoadAsyncFromStreamWithOptionsAndAlpha(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasVirtualBitmapOptions options,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alpha,
                        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasVirtualBitmapStatics=_uuidof(ICanvasVirtualBitmapStatics);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasVirtualBitmap
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasVirtualBitmap
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap[] = L"Microsoft.Graphics.Canvas.ICanvasVirtualBitmap";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("707D8BB0-05F9-484C-9EE2-179E0681C8A7"), version] */
                MIDL_INTERFACE("707D8BB0-05F9-484C-9EE2-179E0681C8A7")
                ICanvasVirtualBitmap : public IInspectable
                {
                public:
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsCachedOnDemand(
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SizeInPixels(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::BitmapSize * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                        /* [retval, out] */ABI::Windows::Foundation::Size * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Bounds(
                        /* [retval, out] */ABI::Windows::Foundation::Rect * value
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasVirtualBitmap=_uuidof(ICanvasVirtualBitmap);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasVirtualBitmap
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasVirtualBitmap ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasVirtualBitmap_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasVirtualBitmap_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasVirtualBitmap[] = L"Microsoft.Graphics.Canvas.CanvasVirtualBitmap";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    class CanvasStrokeStyle;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("FD3E1CD2-6019-40A1-B315-267EEF6C2AEB"), version] */
                    MIDL_INTERFACE("FD3E1CD2-6019-40A1-B315-267EEF6C2AEB")
                    ICanvasStrokeStyle : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_StartCap(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_StartCap(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_EndCap(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_EndCap(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DashCap(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DashCap(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineJoin(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LineJoin(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MiterLimit(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_MiterLimit(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DashStyle(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasDashStyle * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DashStyle(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasDashStyle value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DashOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DashOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CustomDashStyle(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CustomDashStyle(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TransformBehavior(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasStrokeTransformBehavior * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TransformBehavior(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasStrokeTransformBehavior value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasStrokeStyle=_uuidof(ICanvasStrokeStyle);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasLineBreakCondition : int
                    {
                        Neutral,
                        CanBreak,
                        CannotBreak,
                        MustBreak,
                    } CanvasLineBreakCondition;
                    const CanvasLineBreakCondition CanvasLineBreakCondition_Neutral = CanvasLineBreakCondition::Neutral;
                    const CanvasLineBreakCondition CanvasLineBreakCondition_CanBreak = CanvasLineBreakCondition::CanBreak;
                    const CanvasLineBreakCondition CanvasLineBreakCondition_CannotBreak = CanvasLineBreakCondition::CannotBreak;
                    const CanvasLineBreakCondition CanvasLineBreakCondition_MustBreak = CanvasLineBreakCondition::MustBreak;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, uuid("7A89EE99-CE2A-47FA-9DD2-0A6825F6053F"), version] */
                    MIDL_INTERFACE("7A89EE99-CE2A-47FA-9DD2-0A6825F6053F")
                    ICanvasTextInlineObject : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Draw(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer * textRenderer,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */::boolean isSideways,
                            /* [in] */::boolean isRightToLeft,
                            /* [in] */IInspectable * brush
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                            /* [retval, out] */ABI::Windows::Foundation::Size * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Baseline(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SupportsSideways(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DrawBounds(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BreakBefore(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BreakAfter(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextInlineObject=_uuidof(ICanvasTextInlineObject);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__) */


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasTextFormat;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextDirection
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTextDirection : int
                    {
                        LeftToRightThenTopToBottom,
                        RightToLeftThenTopToBottom,
                        LeftToRightThenBottomToTop,
                        RightToLeftThenBottomToTop,
                        TopToBottomThenLeftToRight,
                        BottomToTopThenLeftToRight,
                        TopToBottomThenRightToLeft,
                        BottomToTopThenRightToLeft,
                    } CanvasTextDirection;
                    const CanvasTextDirection CanvasTextDirection_LeftToRightThenTopToBottom = CanvasTextDirection::LeftToRightThenTopToBottom;
                    const CanvasTextDirection CanvasTextDirection_RightToLeftThenTopToBottom = CanvasTextDirection::RightToLeftThenTopToBottom;
                    const CanvasTextDirection CanvasTextDirection_LeftToRightThenBottomToTop = CanvasTextDirection::LeftToRightThenBottomToTop;
                    const CanvasTextDirection CanvasTextDirection_RightToLeftThenBottomToTop = CanvasTextDirection::RightToLeftThenBottomToTop;
                    const CanvasTextDirection CanvasTextDirection_TopToBottomThenLeftToRight = CanvasTextDirection::TopToBottomThenLeftToRight;
                    const CanvasTextDirection CanvasTextDirection_BottomToTopThenLeftToRight = CanvasTextDirection::BottomToTopThenLeftToRight;
                    const CanvasTextDirection CanvasTextDirection_TopToBottomThenRightToLeft = CanvasTextDirection::TopToBottomThenRightToLeft;
                    const CanvasTextDirection CanvasTextDirection_BottomToTopThenRightToLeft = CanvasTextDirection::BottomToTopThenRightToLeft;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasHorizontalAlignment : int
                    {
                        Left,
                        Right,
                        Center,
                        Justified,
                    } CanvasHorizontalAlignment;
                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Left = CanvasHorizontalAlignment::Left;
                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Right = CanvasHorizontalAlignment::Right;
                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Center = CanvasHorizontalAlignment::Center;
                    const CanvasHorizontalAlignment CanvasHorizontalAlignment_Justified = CanvasHorizontalAlignment::Justified;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasVerticalAlignment : int
                    {
                        Top,
                        Bottom,
                        Center,
                    } CanvasVerticalAlignment;
                    const CanvasVerticalAlignment CanvasVerticalAlignment_Top = CanvasVerticalAlignment::Top;
                    const CanvasVerticalAlignment CanvasVerticalAlignment_Bottom = CanvasVerticalAlignment::Bottom;
                    const CanvasVerticalAlignment CanvasVerticalAlignment_Center = CanvasVerticalAlignment::Center;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTextTrimmingGranularity : int
                    {
                        None,
                        Character,
                        Word,
                    } CanvasTextTrimmingGranularity;
                    const CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_None = CanvasTextTrimmingGranularity::None;
                    const CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_Character = CanvasTextTrimmingGranularity::Character;
                    const CanvasTextTrimmingGranularity CanvasTextTrimmingGranularity_Word = CanvasTextTrimmingGranularity::Word;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasWordWrapping
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasWordWrapping : int
                    {
                        Wrap,
                        NoWrap,
                        EmergencyBreak,
                        WholeWord,
                        Character,
                    } CanvasWordWrapping;
                    const CanvasWordWrapping CanvasWordWrapping_Wrap = CanvasWordWrapping::Wrap;
                    const CanvasWordWrapping CanvasWordWrapping_NoWrap = CanvasWordWrapping::NoWrap;
                    const CanvasWordWrapping CanvasWordWrapping_EmergencyBreak = CanvasWordWrapping::EmergencyBreak;
                    const CanvasWordWrapping CanvasWordWrapping_WholeWord = CanvasWordWrapping::WholeWord;
                    const CanvasWordWrapping CanvasWordWrapping_Character = CanvasWordWrapping::Character;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasLineSpacingMode : int
                    {
                        Default,
                        Uniform,
                        Proportional,
                    } CanvasLineSpacingMode;
                    const CanvasLineSpacingMode CanvasLineSpacingMode_Default = CanvasLineSpacingMode::Default;
                    const CanvasLineSpacingMode CanvasLineSpacingMode_Uniform = CanvasLineSpacingMode::Uniform;
                    const CanvasLineSpacingMode CanvasLineSpacingMode_Proportional = CanvasLineSpacingMode::Proportional;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasOpticalAlignment : int
                    {
                        Default,
                        NoSideBearings,
                    } CanvasOpticalAlignment;
                    const CanvasOpticalAlignment CanvasOpticalAlignment_Default = CanvasOpticalAlignment::Default;
                    const CanvasOpticalAlignment CanvasOpticalAlignment_NoSideBearings = CanvasOpticalAlignment::NoSideBearings;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasVerticalGlyphOrientation : int
                    {
                        Default,
                        Stacked,
                    } CanvasVerticalGlyphOrientation;
                    const CanvasVerticalGlyphOrientation CanvasVerticalGlyphOrientation_Default = CanvasVerticalGlyphOrientation::Default;
                    const CanvasVerticalGlyphOrientation CanvasVerticalGlyphOrientation_Stacked = CanvasVerticalGlyphOrientation::Stacked;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTrimmingSign : int
                    {
                        None,
                        Ellipsis,
                    } CanvasTrimmingSign;
                    const CanvasTrimmingSign CanvasTrimmingSign_None = CanvasTrimmingSign::None;
                    const CanvasTrimmingSign CanvasTrimmingSign_Ellipsis = CanvasTrimmingSign::Ellipsis;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextFormat
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextFormat
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormat";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("AF61BFDC-EABB-4D38-BA1B-AFB340612D33"), version] */
                    MIDL_INTERFACE("AF61BFDC-EABB-4D38-BA1B-AFB340612D33")
                    ICanvasTextFormat : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Direction(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Direction(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FontFamily(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_FontFamily(
                            /* [in] */HSTRING value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FontSize(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_FontSize(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FontStretch(
                            /* [retval, out] */ABI::Windows::UI::Text::FontStretch * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_FontStretch(
                            /* [in] */ABI::Windows::UI::Text::FontStretch value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FontStyle(
                            /* [retval, out] */ABI::Windows::UI::Text::FontStyle * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_FontStyle(
                            /* [in] */ABI::Windows::UI::Text::FontStyle value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FontWeight(
                            /* [retval, out] */ABI::Windows::UI::Text::FontWeight * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_FontWeight(
                            /* [in] */ABI::Windows::UI::Text::FontWeight value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IncrementalTabStop(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_IncrementalTabStop(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineSpacing(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LineSpacing(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineSpacingBaseline(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LineSpacingBaseline(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LocaleName(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LocaleName(
                            /* [in] */HSTRING value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_VerticalAlignment(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_VerticalAlignment(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HorizontalAlignment(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingGranularity(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingGranularity(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingDelimiter(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingDelimiter(
                            /* [in] */HSTRING value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingDelimiterCount(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingDelimiterCount(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_WordWrapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_WordWrapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Options(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Options(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_VerticalGlyphOrientation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_VerticalGlyphOrientation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OpticalAlignment(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OpticalAlignment(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LastLineWrapping(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LastLineWrapping(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineSpacingMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LineSpacingMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingSign(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingSign(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CustomTrimmingSign(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CustomTrimmingSign(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextFormat=_uuidof(ICanvasTextFormat);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextFormat
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("8A927515-33FC-4C92-A6AA-94A8F29C140B"), version] */
                    MIDL_INTERFACE("8A927515-33FC-4C92-A6AA-94A8F29C140B")
                    ICanvasTextFormatStatics : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetSystemFontFamilies(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */HSTRING * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetSystemFontFamiliesFromLocaleList(
                            /* [in] */__FIVectorView_1_HSTRING * localeList,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */HSTRING * * valueElements
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextFormatStatics=_uuidof(ICanvasTextFormatStatics);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextFormat
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextFormat ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextFormat";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTypographyFeatureName : int
                    {
                        None = 0,
                        Default = 1953261156,
                        VerticalWriting = 1953654134,
                        VerticalAlternatesAndRotation = 846492278,
                        AlternativeFractions = 1668441697,
                        PetiteCapitalsFromCapitals = 1668297315,
                        SmallCapitalsFromCapitals = 1668493923,
                        ContextualAlternates = 1953259875,
                        CaseSensitiveForms = 1702060387,
                        GlyphCompositionDecomposition = 1886217059,
                        ContextualLigatures = 1734962275,
                        CapitalSpacing = 1886613603,
                        ContextualSwash = 1752658787,
                        CursivePositioning = 1936880995,
                        DiscretionaryLigatures = 1734962276,
                        ExpertForms = 1953527909,
                        Fractions = 1667330662,
                        FullWidth = 1684633446,
                        HalfForms = 1718378856,
                        HalantForms = 1852596584,
                        AlternateHalfWidth = 1953259880,
                        HistoricalForms = 1953720680,
                        HorizontalKanaAlternates = 1634626408,
                        HistoricalLigatures = 1734962280,
                        HalfWidth = 1684633448,
                        HojoKanjiForms = 1869246312,
                        Jis04Forms = 875589738,
                        Jis78Forms = 943157354,
                        Jis83Forms = 859336810,
                        Jis90Forms = 809070698,
                        Kerning = 1852990827,
                        StandardLigatures = 1634167148,
                        LiningFigures = 1836412524,
                        LocalizedForms = 1818455916,
                        MarkPositioning = 1802658157,
                        MathematicalGreek = 1802659693,
                        MarkToMarkPositioning = 1802333037,
                        AlternateAnnotationForms = 1953259886,
                        NlcKanjiForms = 1801677934,
                        OldStyleFigures = 1836412527,
                        Ordinals = 1852076655,
                        ProportionalAlternateWidth = 1953259888,
                        PetiteCapitals = 1885430640,
                        ProportionalFigures = 1836412528,
                        ProportionalWidths = 1684633456,
                        QuarterWidths = 1684633457,
                        RequiredLigatures = 1734962290,
                        RubyNotationForms = 2036495730,
                        StylisticAlternates = 1953259891,
                        ScientificInferiors = 1718511987,
                        SmallCapitals = 1885564275,
                        SimplifiedForms = 1819307379,
                        StylisticSet1 = 825258867,
                        StylisticSet2 = 842036083,
                        StylisticSet3 = 858813299,
                        StylisticSet4 = 875590515,
                        StylisticSet5 = 892367731,
                        StylisticSet6 = 909144947,
                        StylisticSet7 = 925922163,
                        StylisticSet8 = 942699379,
                        StylisticSet9 = 959476595,
                        StylisticSet10 = 808547187,
                        StylisticSet11 = 825324403,
                        StylisticSet12 = 842101619,
                        StylisticSet13 = 858878835,
                        StylisticSet14 = 875656051,
                        StylisticSet15 = 892433267,
                        StylisticSet16 = 909210483,
                        StylisticSet17 = 925987699,
                        StylisticSet18 = 942764915,
                        StylisticSet19 = 959542131,
                        StylisticSet20 = 808612723,
                        Subscript = 1935832435,
                        Superscript = 1936749939,
                        Swash = 1752397683,
                        Titling = 1819568500,
                        TraditionalNameForms = 1835101812,
                        TabularFigures = 1836412532,
                        TraditionalForms = 1684107892,
                        ThirdWidths = 1684633460,
                        Unicase = 1667853941,
                        SlashedZero = 1869768058,
                    } CanvasTypographyFeatureName;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_None = CanvasTypographyFeatureName::None;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Default = CanvasTypographyFeatureName::Default;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_VerticalWriting = CanvasTypographyFeatureName::VerticalWriting;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_VerticalAlternatesAndRotation = CanvasTypographyFeatureName::VerticalAlternatesAndRotation;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_AlternativeFractions = CanvasTypographyFeatureName::AlternativeFractions;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_PetiteCapitalsFromCapitals = CanvasTypographyFeatureName::PetiteCapitalsFromCapitals;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_SmallCapitalsFromCapitals = CanvasTypographyFeatureName::SmallCapitalsFromCapitals;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ContextualAlternates = CanvasTypographyFeatureName::ContextualAlternates;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_CaseSensitiveForms = CanvasTypographyFeatureName::CaseSensitiveForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_GlyphCompositionDecomposition = CanvasTypographyFeatureName::GlyphCompositionDecomposition;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ContextualLigatures = CanvasTypographyFeatureName::ContextualLigatures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_CapitalSpacing = CanvasTypographyFeatureName::CapitalSpacing;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ContextualSwash = CanvasTypographyFeatureName::ContextualSwash;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_CursivePositioning = CanvasTypographyFeatureName::CursivePositioning;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_DiscretionaryLigatures = CanvasTypographyFeatureName::DiscretionaryLigatures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ExpertForms = CanvasTypographyFeatureName::ExpertForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Fractions = CanvasTypographyFeatureName::Fractions;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_FullWidth = CanvasTypographyFeatureName::FullWidth;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_HalfForms = CanvasTypographyFeatureName::HalfForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_HalantForms = CanvasTypographyFeatureName::HalantForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_AlternateHalfWidth = CanvasTypographyFeatureName::AlternateHalfWidth;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_HistoricalForms = CanvasTypographyFeatureName::HistoricalForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_HorizontalKanaAlternates = CanvasTypographyFeatureName::HorizontalKanaAlternates;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_HistoricalLigatures = CanvasTypographyFeatureName::HistoricalLigatures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_HalfWidth = CanvasTypographyFeatureName::HalfWidth;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_HojoKanjiForms = CanvasTypographyFeatureName::HojoKanjiForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis04Forms = CanvasTypographyFeatureName::Jis04Forms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis78Forms = CanvasTypographyFeatureName::Jis78Forms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis83Forms = CanvasTypographyFeatureName::Jis83Forms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Jis90Forms = CanvasTypographyFeatureName::Jis90Forms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Kerning = CanvasTypographyFeatureName::Kerning;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StandardLigatures = CanvasTypographyFeatureName::StandardLigatures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_LiningFigures = CanvasTypographyFeatureName::LiningFigures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_LocalizedForms = CanvasTypographyFeatureName::LocalizedForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_MarkPositioning = CanvasTypographyFeatureName::MarkPositioning;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_MathematicalGreek = CanvasTypographyFeatureName::MathematicalGreek;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_MarkToMarkPositioning = CanvasTypographyFeatureName::MarkToMarkPositioning;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_AlternateAnnotationForms = CanvasTypographyFeatureName::AlternateAnnotationForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_NlcKanjiForms = CanvasTypographyFeatureName::NlcKanjiForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_OldStyleFigures = CanvasTypographyFeatureName::OldStyleFigures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Ordinals = CanvasTypographyFeatureName::Ordinals;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ProportionalAlternateWidth = CanvasTypographyFeatureName::ProportionalAlternateWidth;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_PetiteCapitals = CanvasTypographyFeatureName::PetiteCapitals;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ProportionalFigures = CanvasTypographyFeatureName::ProportionalFigures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ProportionalWidths = CanvasTypographyFeatureName::ProportionalWidths;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_QuarterWidths = CanvasTypographyFeatureName::QuarterWidths;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_RequiredLigatures = CanvasTypographyFeatureName::RequiredLigatures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_RubyNotationForms = CanvasTypographyFeatureName::RubyNotationForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticAlternates = CanvasTypographyFeatureName::StylisticAlternates;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ScientificInferiors = CanvasTypographyFeatureName::ScientificInferiors;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_SmallCapitals = CanvasTypographyFeatureName::SmallCapitals;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_SimplifiedForms = CanvasTypographyFeatureName::SimplifiedForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet1 = CanvasTypographyFeatureName::StylisticSet1;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet2 = CanvasTypographyFeatureName::StylisticSet2;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet3 = CanvasTypographyFeatureName::StylisticSet3;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet4 = CanvasTypographyFeatureName::StylisticSet4;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet5 = CanvasTypographyFeatureName::StylisticSet5;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet6 = CanvasTypographyFeatureName::StylisticSet6;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet7 = CanvasTypographyFeatureName::StylisticSet7;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet8 = CanvasTypographyFeatureName::StylisticSet8;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet9 = CanvasTypographyFeatureName::StylisticSet9;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet10 = CanvasTypographyFeatureName::StylisticSet10;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet11 = CanvasTypographyFeatureName::StylisticSet11;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet12 = CanvasTypographyFeatureName::StylisticSet12;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet13 = CanvasTypographyFeatureName::StylisticSet13;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet14 = CanvasTypographyFeatureName::StylisticSet14;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet15 = CanvasTypographyFeatureName::StylisticSet15;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet16 = CanvasTypographyFeatureName::StylisticSet16;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet17 = CanvasTypographyFeatureName::StylisticSet17;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet18 = CanvasTypographyFeatureName::StylisticSet18;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet19 = CanvasTypographyFeatureName::StylisticSet19;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_StylisticSet20 = CanvasTypographyFeatureName::StylisticSet20;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Subscript = CanvasTypographyFeatureName::Subscript;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Superscript = CanvasTypographyFeatureName::Superscript;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Swash = CanvasTypographyFeatureName::Swash;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Titling = CanvasTypographyFeatureName::Titling;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_TraditionalNameForms = CanvasTypographyFeatureName::TraditionalNameForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_TabularFigures = CanvasTypographyFeatureName::TabularFigures;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_TraditionalForms = CanvasTypographyFeatureName::TraditionalForms;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_ThirdWidths = CanvasTypographyFeatureName::ThirdWidths;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_Unicase = CanvasTypographyFeatureName::Unicase;
                    const CanvasTypographyFeatureName CanvasTypographyFeatureName_SlashedZero = CanvasTypographyFeatureName::SlashedZero;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasTypographyFeature
                    {
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName Name;
                        UINT32 Parameter;
                    } CanvasTypographyFeature;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTypography
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTypography
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTypography[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTypography";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("F15BC312-447F-44ED-8BEC-7E40F4A4DFC8"), version] */
                    MIDL_INTERFACE("F15BC312-447F-44ED-8BEC-7E40F4A4DFC8")
                    ICanvasTypography : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE AddFeature(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature feature
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE AddFeatureWithNameAndParameter(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName name,
                            /* [in] */UINT32 parameter
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFeatures(
                            /* [out] */UINT32 * featureCount,
                            /* [retval, size_is(, *(featureCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeature * * features
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTypography=_uuidof(ICanvasTypography);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTypography
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTypography ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTypography_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTypography_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTypography[] = L"Microsoft.Graphics.Canvas.Text.CanvasTypography";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasTextLayout;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasTextLayoutRegion
                    {
                        int CharacterIndex;
                        int CharacterCount;
                        ABI::Windows::Foundation::Rect LayoutBounds;
                    } CanvasTextLayoutRegion;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasClusterProperties
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [flags, version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasClusterProperties : unsigned int
                    {
                        None = 0,
                        CanWrapLineAfter = 0x1,
                        Whitespace = 0x2,
                        Newline = 0x4,
                        SoftHyphen = 0x8,
                        RightToLeft = 0x10,
                    } CanvasClusterProperties;
                    
                    DEFINE_ENUM_FLAG_OPERATORS(CanvasClusterProperties)
                    const CanvasClusterProperties CanvasClusterProperties_None = CanvasClusterProperties::None;
                    const CanvasClusterProperties CanvasClusterProperties_CanWrapLineAfter = CanvasClusterProperties::CanWrapLineAfter;
                    const CanvasClusterProperties CanvasClusterProperties_Whitespace = CanvasClusterProperties::Whitespace;
                    const CanvasClusterProperties CanvasClusterProperties_Newline = CanvasClusterProperties::Newline;
                    const CanvasClusterProperties CanvasClusterProperties_SoftHyphen = CanvasClusterProperties::SoftHyphen;
                    const CanvasClusterProperties CanvasClusterProperties_RightToLeft = CanvasClusterProperties::RightToLeft;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasClusterMetrics
                    {
                        int CharacterCount;
                        float Width;
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasClusterProperties Properties;
                    } CanvasClusterMetrics;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasLineMetrics
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasLineMetrics
                    {
                        int CharacterCount;
                        int TrailingWhitespaceCount;
                        int TerminalNewlineCount;
                        float Height;
                        float Baseline;
                        ::boolean IsTrimmed;
                        float LeadingWhitespaceBefore;
                        float LeadingWhitespaceAfter;
                    } CanvasLineMetrics;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasGlyphOrientation : int
                    {
                        Upright,
                        Clockwise90Degrees,
                        Clockwise180Degrees,
                        Clockwise270Degrees,
                    } CanvasGlyphOrientation;
                    const CanvasGlyphOrientation CanvasGlyphOrientation_Upright = CanvasGlyphOrientation::Upright;
                    const CanvasGlyphOrientation CanvasGlyphOrientation_Clockwise90Degrees = CanvasGlyphOrientation::Clockwise90Degrees;
                    const CanvasGlyphOrientation CanvasGlyphOrientation_Clockwise180Degrees = CanvasGlyphOrientation::Clockwise180Degrees;
                    const CanvasGlyphOrientation CanvasGlyphOrientation_Clockwise270Degrees = CanvasGlyphOrientation::Clockwise270Degrees;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayout
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayout";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("BAE63E54-48AE-4446-A2C7-B6EF93806C20"), version] */
                    MIDL_INTERFACE("BAE63E54-48AE-4446-A2C7-B6EF93806C20")
                    ICanvasTextLayout : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetFormatChangeIndices(
                            /* [out] */UINT32 * stopCount,
                            /* [retval, size_is(, *(stopCount)), out] */INT32 * * stops
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Direction(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Direction(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DefaultFontFamily(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DefaultFontSize(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DefaultFontStretch(
                            /* [retval, out] */ABI::Windows::UI::Text::FontStretch * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DefaultFontStyle(
                            /* [retval, out] */ABI::Windows::UI::Text::FontStyle * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DefaultFontWeight(
                            /* [retval, out] */ABI::Windows::UI::Text::FontWeight * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IncrementalTabStop(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_IncrementalTabStop(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineSpacing(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LineSpacing(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineSpacingBaseline(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LineSpacingBaseline(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DefaultLocaleName(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_VerticalAlignment(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_VerticalAlignment(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalAlignment value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HorizontalAlignment(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HorizontalAlignment(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasHorizontalAlignment value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingGranularity(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingGranularity(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextTrimmingGranularity value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingDelimiter(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingDelimiter(
                            /* [in] */HSTRING value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingDelimiterCount(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingDelimiterCount(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_WordWrapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_WordWrapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasWordWrapping value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Options(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Options(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasDrawTextOptions value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineSpacingMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LineSpacingMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasLineSpacingMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TrimmingSign(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TrimmingSign(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTrimmingSign value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CustomTrimmingSign(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CustomTrimmingSign(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RequestedSize(
                            /* [retval, out] */ABI::Windows::Foundation::Size * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RequestedSize(
                            /* [in] */ABI::Windows::Foundation::Size value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetMinimumLineLength(
                            /* [retval, out] */float * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetBrush(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * * brush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetCustomBrush(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */IInspectable * * brush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFontFamily(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */HSTRING * fontFamily
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFontSize(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */float * fontSize
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFontStretch(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */ABI::Windows::UI::Text::FontStretch * fontStretch
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFontStyle(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */ABI::Windows::UI::Text::FontStyle * fontStyle
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFontWeight(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */ABI::Windows::UI::Text::FontWeight * fontWeight
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetLocaleName(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */HSTRING * localeName
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetStrikethrough(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */::boolean * hasStrikethrough
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetUnderline(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */::boolean * hasUnderline
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetInlineObject(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject * * inlineObject
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetColor(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */ABI::Windows::UI::Color color
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetBrush(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetCustomBrush(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */IInspectable * brush
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFontFamily(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */HSTRING fontFamily
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFontSize(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */float fontSize
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFontStretch(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */ABI::Windows::UI::Text::FontStretch fontStretch
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFontStyle(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */ABI::Windows::UI::Text::FontStyle fontStyle
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFontWeight(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */ABI::Windows::UI::Text::FontWeight fontWeight
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetLocaleName(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */HSTRING name
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetStrikethrough(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */::boolean hasStrikethrough
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetUnderline(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */::boolean hasUnderline
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetInlineObject(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject * inlineObject
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawToTextRenderer(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer * textRenderer,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 position
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawToTextRendererWithCoords(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderer * textRenderer,
                            /* [in] */float x,
                            /* [in] */float y
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineMetrics(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasLineMetrics * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClusterMetrics(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasClusterMetrics * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetTypography(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography * typography
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetTypography(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTypography * * typography
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LayoutBounds(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LayoutBoundsIncludingTrailingWhitespace(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineCount(
                            /* [retval, out] */INT32 * lineCount
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MaximumBidiReorderingDepth(
                            /* [retval, out] */int * depth
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DrawBounds(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE HitTest(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [retval, out] */::boolean * isHit
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE HitTestWithCoords(
                            /* [in] */float x,
                            /* [in] */float y,
                            /* [retval, out] */::boolean * isHit
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE HitTestWithDescription(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion * textLayoutRegion,
                            /* [retval, out] */::boolean * isHit
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndCoords(
                            /* [in] */float x,
                            /* [in] */float y,
                            /* [out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion * textLayoutRegion,
                            /* [retval, out] */::boolean * isHit
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndTrailingSide(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion * textLayoutRegion,
                            /* [out] */::boolean * trailingSideOfCharacter,
                            /* [retval, out] */::boolean * isHit
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE HitTestWithDescriptionAndCoordsAndTrailingSide(
                            /* [in] */float x,
                            /* [in] */float y,
                            /* [out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion * textLayoutRegion,
                            /* [out] */::boolean * trailingSideOfCharacter,
                            /* [retval, out] */::boolean * isHit
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetCaretPosition(
                            /* [in] */INT32 characterIndex,
                            /* [in] */::boolean trailingSideOfCharacter,
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * location
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE GetCaretPositionWithDescription(
                            /* [in] */INT32 characterIndex,
                            /* [in] */::boolean trailingSideOfCharacter,
                            /* [out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion * textLayoutRegion,
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * location
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE GetCharacterRegions(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [out] */UINT32 * hitTestDescriptionCount,
                            /* [retval, size_is(, *(hitTestDescriptionCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextLayoutRegion * * hitTestDescriptions
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetPairKerning(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */::boolean * hasPairKerning
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetPairKerning(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */::boolean hasPairKerning
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetLeadingCharacterSpacing(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */float * leadingSpacing
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetTrailingCharacterSpacing(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */float * trailingSpacing
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetMinimumCharacterAdvance(
                            /* [in] */INT32 characterIndex,
                            /* [retval, out] */float * minimumAdvance
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetCharacterSpacing(
                            /* [in] */INT32 characterIndex,
                            /* [in] */INT32 characterCount,
                            /* [in] */float leadingSpacing,
                            /* [in] */float trailingSpacing,
                            /* [in] */float minimumAdvance
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_VerticalGlyphOrientation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_VerticalGlyphOrientation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OpticalAlignment(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OpticalAlignment(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasOpticalAlignment value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LastLineWrapping(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LastLineWrapping(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextLayout=_uuidof(ICanvasTextLayout);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("9C1F7179-ACD0-4680-93D5-95A6247E8F6B"), version] */
                    MIDL_INTERFACE("9C1F7179-ACD0-4680-93D5-95A6247E8F6B")
                    ICanvasTextLayoutFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */HSTRING textString,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * textFormat,
                            /* [in] */float requestedWidth,
                            /* [in] */float requestedHeight,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout * * canvasTextLayout
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextLayoutFactory=_uuidof(ICanvasTextLayoutFactory);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("7F2B8FFD-6935-4F60-B409-6394A19C5EBC"), version] */
                    MIDL_INTERFACE("7F2B8FFD-6935-4F60-B409-6394A19C5EBC")
                    ICanvasTextLayoutStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetGlyphOrientationTransform(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation,
                            /* [in] */::boolean isSideways,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 position,
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix3x2 * transform
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextLayoutStatics=_uuidof(ICanvasTextLayoutStatics);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextLayout ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextLayout";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    class CanvasPathBuilder;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    class CanvasGeometry;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("BCF5822F-8127-4E5C-96B8-29983B915541"), version] */
                    MIDL_INTERFACE("BCF5822F-8127-4E5C-96B8-29983B915541")
                    ICanvasPathBuilder : public IInspectable
                    {
                    public:
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE BeginFigureWithFigureFill(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 startPoint,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE BeginFigure(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 startPoint
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE BeginFigureAtCoordsWithFigureFill(
                            /* [in] */float startX,
                            /* [in] */float startY,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE BeginFigureAtCoords(
                            /* [in] */float startX,
                            /* [in] */float startY
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE AddArcToPoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint,
                            /* [in] */float radiusX,
                            /* [in] */float radiusY,
                            /* [in] */float rotationAngle,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasSweepDirection sweepDirection,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasArcSize arcSize
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE AddArcAroundEllipse(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */float radiusX,
                            /* [in] */float radiusY,
                            /* [in] */float startAngle,
                            /* [in] */float sweepAngle
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE AddCubicBezier(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 controlPoint1,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 controlPoint2,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE AddLine(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE AddLineWithCoords(
                            /* [in] */float x,
                            /* [in] */float y
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE AddQuadraticBezier(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 controlPoint,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDetermination(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetSegmentOptions(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureSegmentOptions figureSegmentOptions
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE EndFigure(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureLoop figureLoop
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE AddGeometry(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPathBuilder=_uuidof(ICanvasPathBuilder);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilderFactory[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("AC2BEE14-EFD1-4343-8E53-BA62153D8966"), version] */
                    MIDL_INTERFACE("AC2BEE14-EFD1-4343-8E53-BA62153D8966")
                    ICanvasPathBuilderFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder * * canvasPathBuilder
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPathBuilderFactory=_uuidof(ICanvasPathBuilderFactory);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasActiveLayer;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasActiveLayer
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasActiveLayer
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.ICanvasActiveLayer";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("49ECFC58-5E1C-4EE3-8088-542F94E93C60"), version] */
                MIDL_INTERFACE("49ECFC58-5E1C-4EE3-8088-542F94E93C60")
                ICanvasActiveLayer : public IInspectable
                {
                public:
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasActiveLayer=_uuidof(ICanvasActiveLayer);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasActiveLayer
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasActiveLayer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.CanvasActiveLayer";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasGradientMeshPatchEdge : int
                    {
                        Aliased = 0,
                        Antialiased = 1,
                        AliasedAndInflated = 2,
                    } CanvasGradientMeshPatchEdge;
                    const CanvasGradientMeshPatchEdge CanvasGradientMeshPatchEdge_Aliased = CanvasGradientMeshPatchEdge::Aliased;
                    const CanvasGradientMeshPatchEdge CanvasGradientMeshPatchEdge_Antialiased = CanvasGradientMeshPatchEdge::Antialiased;
                    const CanvasGradientMeshPatchEdge CanvasGradientMeshPatchEdge_AliasedAndInflated = CanvasGradientMeshPatchEdge::AliasedAndInflated;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef 
                    struct CanvasGradientMeshPatch
                    {
                        ABI::Windows::Foundation::Numerics::Vector2 Point00;
                        ABI::Windows::Foundation::Numerics::Vector2 Point01;
                        ABI::Windows::Foundation::Numerics::Vector2 Point02;
                        ABI::Windows::Foundation::Numerics::Vector2 Point03;
                        ABI::Windows::Foundation::Numerics::Vector2 Point10;
                        ABI::Windows::Foundation::Numerics::Vector2 Point11;
                        ABI::Windows::Foundation::Numerics::Vector2 Point12;
                        ABI::Windows::Foundation::Numerics::Vector2 Point13;
                        ABI::Windows::Foundation::Numerics::Vector2 Point20;
                        ABI::Windows::Foundation::Numerics::Vector2 Point21;
                        ABI::Windows::Foundation::Numerics::Vector2 Point22;
                        ABI::Windows::Foundation::Numerics::Vector2 Point23;
                        ABI::Windows::Foundation::Numerics::Vector2 Point30;
                        ABI::Windows::Foundation::Numerics::Vector2 Point31;
                        ABI::Windows::Foundation::Numerics::Vector2 Point32;
                        ABI::Windows::Foundation::Numerics::Vector2 Point33;
                        ABI::Windows::Foundation::Numerics::Vector4 Color00;
                        ABI::Windows::Foundation::Numerics::Vector4 Color03;
                        ABI::Windows::Foundation::Numerics::Vector4 Color30;
                        ABI::Windows::Foundation::Numerics::Vector4 Color33;
                        ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge Edge00To03;
                        ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge Edge03To33;
                        ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge Edge33To30;
                        ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge Edge30To00;
                    } CanvasGradientMeshPatch;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    class CanvasGradientMesh;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMesh[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("6BFC2BF1-0A7A-449C-A7EF-6706321B0C1A"), version] */
                    MIDL_INTERFACE("6BFC2BF1-0A7A-449C-A7EF-6706321B0C1A")
                    ICanvasGradientMesh : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Patches(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBounds(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBoundsWithTransform(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasGradientMesh=_uuidof(ICanvasGradientMesh);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshFactory[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("4756492D-251E-421D-834D-87EC260D5E4D"), version] */
                    MIDL_INTERFACE("4756492D-251E-421D-834D-87EC260D5E4D")
                    ICanvasGradientMeshFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 patchCount,
                            /* [size_is(patchCount), in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch * patchElements,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh * * canvasGradientMesh
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasGradientMeshFactory=_uuidof(ICanvasGradientMeshFactory);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("44027640-3EAB-4199-AA3B-644890D0123D"), version] */
                    MIDL_INTERFACE("44027640-3EAB-4199-AA3B-644890D0123D")
                    ICanvasGradientMeshStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateCoonsPatch(
                            /* [in] */UINT32 pointCount,
                            /* [size_is(pointCount), in] */ABI::Windows::Foundation::Numerics::Vector2 * points,
                            /* [in] */UINT32 colorCount,
                            /* [size_is(colorCount), in] */ABI::Windows::Foundation::Numerics::Vector4 * colors,
                            /* [in] */UINT32 edgeCount,
                            /* [size_is(edgeCount), in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge * edges,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch * gradientMeshPatch
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateTensorPatch(
                            /* [in] */UINT32 pointCount,
                            /* [size_is(pointCount), in] */ABI::Windows::Foundation::Numerics::Vector2 * points,
                            /* [in] */UINT32 colorCount,
                            /* [size_is(colorCount), in] */ABI::Windows::Foundation::Numerics::Vector4 * colors,
                            /* [in] */UINT32 edgeCount,
                            /* [size_is(edgeCount), in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatchEdge * edges,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGradientMeshPatch * gradientMeshPatch
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasGradientMeshStatics=_uuidof(ICanvasGradientMeshStatics);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTextRenderingMode : int
                    {
                        Default,
                        Aliased,
                        GdiClassic,
                        GdiNatural,
                        Natural,
                        NaturalSymmetric,
                        Outline,
                        NaturalSymmetricDownsampled,
                    } CanvasTextRenderingMode;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_Default = CanvasTextRenderingMode::Default;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_Aliased = CanvasTextRenderingMode::Aliased;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_GdiClassic = CanvasTextRenderingMode::GdiClassic;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_GdiNatural = CanvasTextRenderingMode::GdiNatural;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_Natural = CanvasTextRenderingMode::Natural;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_NaturalSymmetric = CanvasTextRenderingMode::NaturalSymmetric;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_Outline = CanvasTextRenderingMode::Outline;
                    const CanvasTextRenderingMode CanvasTextRenderingMode_NaturalSymmetricDownsampled = CanvasTextRenderingMode::NaturalSymmetricDownsampled;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextGridFit
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTextGridFit : int
                    {
                        Default,
                        Disable,
                        Enable,
                    } CanvasTextGridFit;
                    const CanvasTextGridFit CanvasTextGridFit_Default = CanvasTextGridFit::Default;
                    const CanvasTextGridFit CanvasTextGridFit_Disable = CanvasTextGridFit::Disable;
                    const CanvasTextGridFit CanvasTextGridFit_Enable = CanvasTextGridFit::Enable;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasTextRenderingParameters;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParameters[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6"), version] */
                    MIDL_INTERFACE("B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6")
                    ICanvasTextRenderingParameters : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RenderingMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GridFit(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextGridFit * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextRenderingParameters=_uuidof(ICanvasTextRenderingParameters);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParametersFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("D240AC25-4D23-4964-9D9A-DB2FC8AF185D"), version] */
                    MIDL_INTERFACE("D240AC25-4D23-4964-9D9A-DB2FC8AF185D")
                    ICanvasTextRenderingParametersFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode textRenderingMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextGridFit gridFit,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters * * textRenderingParameters
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextRenderingParametersFactory=_uuidof(ICanvasTextRenderingParametersFactory);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasTextMeasuringMode : int
                    {
                        Natural,
                        GdiClassic,
                        GdiNatural,
                    } CanvasTextMeasuringMode;
                    const CanvasTextMeasuringMode CanvasTextMeasuringMode_Natural = CanvasTextMeasuringMode::Natural;
                    const CanvasTextMeasuringMode CanvasTextMeasuringMode_GdiClassic = CanvasTextMeasuringMode::GdiClassic;
                    const CanvasTextMeasuringMode CanvasTextMeasuringMode_GdiNatural = CanvasTextMeasuringMode::GdiNatural;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFontFileFormatType : int
                    {
                        Cff,
                        TrueType,
                        TrueTypeCollection,
                        Type1,
                        Vector,
                        Bitmap,
                        Unknown,
                        RawCff,
                    } CanvasFontFileFormatType;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_Cff = CanvasFontFileFormatType::Cff;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_TrueType = CanvasFontFileFormatType::TrueType;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_TrueTypeCollection = CanvasFontFileFormatType::TrueTypeCollection;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_Type1 = CanvasFontFileFormatType::Type1;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_Vector = CanvasFontFileFormatType::Vector;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_Bitmap = CanvasFontFileFormatType::Bitmap;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_Unknown = CanvasFontFileFormatType::Unknown;
                    const CanvasFontFileFormatType CanvasFontFileFormatType_RawCff = CanvasFontFileFormatType::RawCff;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontSimulations
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [flags, version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFontSimulations : unsigned int
                    {
                        None = 0,
                        Bold = 0x1,
                        Oblique = 0x2,
                    } CanvasFontSimulations;
                    
                    DEFINE_ENUM_FLAG_OPERATORS(CanvasFontSimulations)
                    const CanvasFontSimulations CanvasFontSimulations_None = CanvasFontSimulations::None;
                    const CanvasFontSimulations CanvasFontSimulations_Bold = CanvasFontSimulations::Bold;
                    const CanvasFontSimulations CanvasFontSimulations_Oblique = CanvasFontSimulations::Oblique;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontInformation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFontInformation : int
                    {
                        None,
                        CopyrightNotice,
                        VersionStrings,
                        Trademark,
                        Manufacturer,
                        Designer,
                        DesignerUrl,
                        Description,
                        FontVendorUrl,
                        LicenseDescription,
                        LicenseInfoUrl,
                        Win32FamilyNames,
                        Win32SubfamilyNames,
                        PreferredFamilyNames,
                        PreferredSubfamilyNames,
                        SampleText,
                        FullName,
                        PostscriptName,
                        PostscriptCidName,
                        WwsFamilyName,
                        DesignScriptLanguageTag,
                        SupportedScriptLanguageTag,
                    } CanvasFontInformation;
                    const CanvasFontInformation CanvasFontInformation_None = CanvasFontInformation::None;
                    const CanvasFontInformation CanvasFontInformation_CopyrightNotice = CanvasFontInformation::CopyrightNotice;
                    const CanvasFontInformation CanvasFontInformation_VersionStrings = CanvasFontInformation::VersionStrings;
                    const CanvasFontInformation CanvasFontInformation_Trademark = CanvasFontInformation::Trademark;
                    const CanvasFontInformation CanvasFontInformation_Manufacturer = CanvasFontInformation::Manufacturer;
                    const CanvasFontInformation CanvasFontInformation_Designer = CanvasFontInformation::Designer;
                    const CanvasFontInformation CanvasFontInformation_DesignerUrl = CanvasFontInformation::DesignerUrl;
                    const CanvasFontInformation CanvasFontInformation_Description = CanvasFontInformation::Description;
                    const CanvasFontInformation CanvasFontInformation_FontVendorUrl = CanvasFontInformation::FontVendorUrl;
                    const CanvasFontInformation CanvasFontInformation_LicenseDescription = CanvasFontInformation::LicenseDescription;
                    const CanvasFontInformation CanvasFontInformation_LicenseInfoUrl = CanvasFontInformation::LicenseInfoUrl;
                    const CanvasFontInformation CanvasFontInformation_Win32FamilyNames = CanvasFontInformation::Win32FamilyNames;
                    const CanvasFontInformation CanvasFontInformation_Win32SubfamilyNames = CanvasFontInformation::Win32SubfamilyNames;
                    const CanvasFontInformation CanvasFontInformation_PreferredFamilyNames = CanvasFontInformation::PreferredFamilyNames;
                    const CanvasFontInformation CanvasFontInformation_PreferredSubfamilyNames = CanvasFontInformation::PreferredSubfamilyNames;
                    const CanvasFontInformation CanvasFontInformation_SampleText = CanvasFontInformation::SampleText;
                    const CanvasFontInformation CanvasFontInformation_FullName = CanvasFontInformation::FullName;
                    const CanvasFontInformation CanvasFontInformation_PostscriptName = CanvasFontInformation::PostscriptName;
                    const CanvasFontInformation CanvasFontInformation_PostscriptCidName = CanvasFontInformation::PostscriptCidName;
                    const CanvasFontInformation CanvasFontInformation_WwsFamilyName = CanvasFontInformation::WwsFamilyName;
                    const CanvasFontInformation CanvasFontInformation_DesignScriptLanguageTag = CanvasFontInformation::DesignScriptLanguageTag;
                    const CanvasFontInformation CanvasFontInformation_SupportedScriptLanguageTag = CanvasFontInformation::SupportedScriptLanguageTag;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasUnicodeRange
                    {
                        UINT32 First;
                        UINT32 Last;
                    } CanvasUnicodeRange;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyph
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasGlyph
                    {
                        int Index;
                        float Advance;
                        float AdvanceOffset;
                        float AscenderOffset;
                    } CanvasGlyph;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasGlyphMetrics
                    {
                        float LeftSideBearing;
                        float AdvanceWidth;
                        float RightSideBearing;
                        float TopSideBearing;
                        float AdvanceHeight;
                        float BottomSideBearing;
                        float VerticalOrigin;
                        ABI::Windows::Foundation::Rect DrawBounds;
                    } CanvasGlyphMetrics;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasScriptShape
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasScriptShape : int
                    {
                        Default,
                        NoVisual,
                    } CanvasScriptShape;
                    const CanvasScriptShape CanvasScriptShape_Default = CanvasScriptShape::Default;
                    const CanvasScriptShape CanvasScriptShape_NoVisual = CanvasScriptShape::NoVisual;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasAnalyzedScript
                    {
                        INT32 ScriptIdentifier;
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasScriptShape Shape;
                    } CanvasAnalyzedScript;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontFace
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontFace
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontFace[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontFace";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("5199D129-4EF9-4DEE-B74C-4DC910201A7F"), version] */
                    MIDL_INTERFACE("5199D129-4EF9-4DEE-B74C-4DC910201A7F")
                    ICanvasFontFace : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetRecommendedRenderingMode(
                            /* [in] */float fontSize,
                            /* [in] */float dpi,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters * renderingParameters,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode * renderingMode
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetRecommendedRenderingModeWithAllOptions(
                            /* [in] */float fontSize,
                            /* [in] */float dpi,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters * renderingParameters,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */::boolean isSideways,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing outlineThreshold,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextRenderingMode * renderingMode
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetRecommendedGridFit(
                            /* [in] */float fontSize,
                            /* [in] */float dpi,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters * renderingParameters,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */::boolean isSideways,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing outlineThreshold,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextGridFit * gridFit
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GlyphBox(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SubscriptPosition(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SubscriptSize(
                            /* [retval, out] */ABI::Windows::Foundation::Size * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SuperscriptPosition(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SuperscriptSize(
                            /* [retval, out] */ABI::Windows::Foundation::Size * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HasTypographicMetrics(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Ascent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Descent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LineGap(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CapHeight(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LowercaseLetterHeight(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_UnderlinePosition(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_UnderlineThickness(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_StrikethroughPosition(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_StrikethroughThickness(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CaretSlopeRise(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CaretSlopeRun(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CaretOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_UnicodeRanges(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasUnicodeRange * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsMonospaced(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetVerticalGlyphVariants(
                            /* [in] */UINT32 inputCount,
                            /* [size_is(inputCount), in] */int * inputElements,
                            /* [out] */UINT32 * outputCount,
                            /* [retval, size_is(, *(outputCount)), out] */int * * outputElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HasVerticalGlyphVariants(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FileFormatType(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontFileFormatType * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Simulations(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontSimulations * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsSymbolFont(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GlyphCount(
                            /* [retval, out] */UINT32 * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetGlyphIndices(
                            /* [in] */UINT32 inputCount,
                            /* [size_is(inputCount), in] */UINT32 * inputElements,
                            /* [out] */UINT32 * outputCount,
                            /* [retval, size_is(, *(outputCount)), out] */int * * outputElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetGlyphMetrics(
                            /* [in] */UINT32 inputCount,
                            /* [size_is(inputCount), in] */int * inputElements,
                            /* [in] */::boolean isSideways,
                            /* [out] */UINT32 * outputCount,
                            /* [retval, size_is(, *(outputCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics * * outputElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetGdiCompatibleGlyphMetrics(
                            /* [in] */float fontSize,
                            /* [in] */float dpi,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */::boolean useGdiNatural,
                            /* [in] */UINT32 inputCount,
                            /* [size_is(inputCount), in] */int * inputElements,
                            /* [in] */::boolean isSideways,
                            /* [out] */UINT32 * outputCount,
                            /* [retval, size_is(, *(outputCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphMetrics * * outputElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Weight(
                            /* [retval, out] */ABI::Windows::UI::Text::FontWeight * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Stretch(
                            /* [retval, out] */ABI::Windows::UI::Text::FontStretch * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Style(
                            /* [retval, out] */ABI::Windows::UI::Text::FontStyle * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FamilyNames(
                            /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FaceNames(
                            /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetInformationalStrings(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontInformation fontInformation,
                            /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE HasCharacter(
                            /* [in] */UINT32 unicodeValue,
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetGlyphRunBounds(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * drawingSession,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */float fontSize,
                            /* [in] */UINT32 glyphCount,
                            /* [size_is(glyphCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphs,
                            /* [in] */::boolean isSideways,
                            /* [in] */UINT32 bidiLevel,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetGlyphRunBoundsWithMeasuringMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * drawingSession,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */float fontSize,
                            /* [in] */UINT32 glyphCount,
                            /* [size_is(glyphCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphs,
                            /* [in] */::boolean isSideways,
                            /* [in] */UINT32 bidiLevel,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Panose(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetSupportedTypographicFeatureNames(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetSupportedTypographicFeatureNamesWithLocale(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [in] */HSTRING locale,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetTypographicFeatureGlyphSupport(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName typographicFeatureName,
                            /* [in] */UINT32 glyphsCount,
                            /* [size_is(glyphsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphsElements,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */::boolean * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetTypographicFeatureGlyphSupportWithLocale(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTypographyFeatureName typographicFeatureName,
                            /* [in] */UINT32 glyphsCount,
                            /* [size_is(glyphsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphsElements,
                            /* [in] */HSTRING locale,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */::boolean * * valueElements
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasFontFace=_uuidof(ICanvasFontFace);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasFontFace
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasFontFace ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontFace_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontFace_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasFontFace[] = L"Microsoft.Graphics.Canvas.Text.CanvasFontFace";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, uuid("9AAEECE5-8D09-4A64-B322-AF030421B2E4"), version] */
                    MIDL_INTERFACE("9AAEECE5-8D09-4A64-B322-AF030421B2E4")
                    ICanvasTextRenderer : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE DrawGlyphRun(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [in] */float fontSize,
                            /* [in] */UINT32 glyphCount,
                            /* [size_is(glyphCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphs,
                            /* [in] */::boolean isSideways,
                            /* [in] */UINT32 bidiLevel,
                            /* [in] */IInspectable * brush,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                            /* [in] */HSTRING localeName,
                            /* [in] */HSTRING textString,
                            /* [in] */UINT32 clusterMapIndicesCount,
                            /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndices,
                            /* [in] */UINT32 characterIndex,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE DrawStrikethrough(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */float strikethroughWidth,
                            /* [in] */float strikethroughThickness,
                            /* [in] */float strikethroughOffset,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                            /* [in] */IInspectable * brush,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode textMeasuringMode,
                            /* [in] */HSTRING localeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE DrawUnderline(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */float underlineWidth,
                            /* [in] */float underlineThickness,
                            /* [in] */float underlineOffset,
                            /* [in] */float runHeight,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                            /* [in] */IInspectable * brush,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode textMeasuringMode,
                            /* [in] */HSTRING localeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE DrawInlineObject(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextInlineObject * inlineObject,
                            /* [in] */::boolean isSideways,
                            /* [in] */::boolean isRightToLeft,
                            /* [in] */IInspectable * brush,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PixelSnappingDisabled(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Transform(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix3x2 * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Dpi(
                            /* [retval, out] */float * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextRenderer=_uuidof(ICanvasTextRenderer);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__) */




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [version] */
                    typedef 
                    struct CanvasTriangleVertices
                    {
                        ABI::Windows::Foundation::Numerics::Vector2 Vertex1;
                        ABI::Windows::Foundation::Numerics::Vector2 Vertex2;
                        ABI::Windows::Foundation::Numerics::Vector2 Vertex3;
                    } CanvasTriangleVertices;
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathReceiver[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, uuid("70E65373-7FB3-4645-8B6D-F616D1B9A9D7"), version] */
                    MIDL_INTERFACE("70E65373-7FB3-4645-8B6D-F616D1B9A9D7")
                    ICanvasPathReceiver : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE BeginFigure(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 startPoint,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureFill figureFill
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE AddArc(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint,
                            /* [in] */float radiusX,
                            /* [in] */float radiusY,
                            /* [in] */float rotationAngle,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasSweepDirection sweepDirection,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasArcSize arcSize
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE AddCubicBezier(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 controlPoint1,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 controlPoint2,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE AddLine(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE AddQuadraticBezier(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 controlPoint,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 endPoint
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDetermination(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetSegmentOptions(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureSegmentOptions figureSegmentOptions
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE EndFigure(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFigureLoop figureLoop
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPathReceiver=_uuidof(ICanvasPathReceiver);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGeometry
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("74EA89FA-C87C-4D0D-9057-2743B8DB67EE"), version] */
                    MIDL_INTERFACE("74EA89FA-C87C-4D0D-9057-2743B8DB67EE")
                    ICanvasGeometry : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CombineWith(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * otherGeometry,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 otherGeometryTransform,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryCombine combine,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CombineWithUsingFlatteningTolerance(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * otherGeometry,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 otherGeometryTransform,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryCombine combine,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE Stroke(
                            /* [in] */float strokeWidth,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE StrokeWithStrokeStyle(
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE StrokeWithAllOptions(
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE Outline(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE OutlineWithTransformAndFlatteningTolerance(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE Simplify(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometrySimplification simplification,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SimplifyWithTransformAndFlatteningTolerance(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometrySimplification simplification,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE Transform(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CompareWith(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * otherGeometry,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryRelation * relation
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CompareWithUsingTransformAndFlatteningTolerance(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * otherGeometry,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 otherGeometryTransform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasGeometryRelation * relation
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE ComputeArea(
                            /* [retval, out] */float * area
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputeAreaWithTransformAndFlatteningTolerance(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */float * area
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE ComputePathLength(
                            /* [retval, out] */float * length
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputePathLengthWithTransformAndFlatteningTolerance(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */float * length
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE ComputePointOnPath(
                            /* [in] */float distance,
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * point
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputePointOnPathWithTangent(
                            /* [in] */float distance,
                            /* [out] */ABI::Windows::Foundation::Numerics::Vector2 * tangent,
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * point
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(
                            /* [in] */float length,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [out] */ABI::Windows::Foundation::Numerics::Vector2 * tangent,
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * point
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillContainsPoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [retval, out] */::boolean * containsPoint
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillContainsPointWithTransformAndFlatteningTolerance(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */::boolean * containsPoint
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE ComputeBounds(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputeBoundsWithTransform(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBounds(
                            /* [in] */float strokeWidth,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBoundsWithStrokeStyle(
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputeStrokeBoundsWithAllOptions(
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * bounds
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE StrokeContainsPoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */float strokeWidth,
                            /* [retval, out] */::boolean * containsPoint
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE StrokeContainsPointWithStrokeStyle(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [retval, out] */::boolean * containsPoint
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE StrokeContainsPointWithAllOptions(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */::boolean * containsPoint
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE Tessellate(
                            /* [out] */UINT32 * trianglesCount,
                            /* [retval, size_is(, *(trianglesCount)), out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasTriangleVertices * * triangles
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE TessellateWithTransformAndFlatteningTolerance(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [out] */UINT32 * trianglesCount,
                            /* [retval, size_is(, *(trianglesCount)), out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasTriangleVertices * * triangles
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SendPathTo(
                            ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathReceiver * streamReader
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasGeometry=_uuidof(ICanvasGeometry);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGeometry
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("D94E33CF-CD59-46F2-8DF4-55066AABFD56"), version] */
                    MIDL_INTERFACE("D94E33CF-CD59-46F2-8DF4-55066AABFD56")
                    ICanvasGeometryStatics : public IInspectable
                    {
                    public:
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateRectangle(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Rect rect,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateRectangleAtCoords(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */float x,
                            /* [in] */float y,
                            /* [in] */float w,
                            /* [in] */float h,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateRoundedRectangle(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Rect rect,
                            /* [in] */float radiusX,
                            /* [in] */float radiusY,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateRoundedRectangleAtCoords(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */float x,
                            /* [in] */float y,
                            /* [in] */float w,
                            /* [in] */float h,
                            /* [in] */float radiusX,
                            /* [in] */float radiusY,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateEllipse(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */float radiusX,
                            /* [in] */float radiusY,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateEllipseAtCoords(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */float x,
                            /* [in] */float y,
                            /* [in] */float radiusX,
                            /* [in] */float radiusY,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateCircle(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                            /* [in] */float radius,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateCircleAtCoords(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */float x,
                            /* [in] */float y,
                            /* [in] */float radius,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreatePath(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasPathBuilder * pathBuilder,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreatePolygon(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 pointCount,
                            /* [size_is(pointCount), in] */ABI::Windows::Foundation::Numerics::Vector2 * points,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateGroup(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 geometriesCount,
                            /* [size_is(geometriesCount), in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometries,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateGroupWithFilledRegionDetermination(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 geometriesCount,
                            /* [size_is(geometriesCount), in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometries,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination filledRegionDetermination,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateText(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout * textLayout,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateGlyphRun(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [in] */float fontSize,
                            /* [in] */UINT32 glyphCount,
                            /* [size_is(glyphCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphs,
                            /* [in] */::boolean isSideways,
                            /* [in] */UINT32 bidiLevel,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation glyphOrientation,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateInk(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateInkWithTransformAndFlatteningTolerance(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * geometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE ComputeFlatteningTolerance(
                            /* [in] */float dpi,
                            /* [in] */float maximumZoomFactor,
                            /* [retval, out] */float * flatteningTolerance
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ComputeFlatteningToleranceWithTransform(
                            /* [in] */float dpi,
                            /* [in] */float maximumZoomFactor,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 expectedGeometryTransform,
                            /* [retval, out] */float * flatteningTolerance
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DefaultFlatteningTolerance(
                            /* [retval, out] */float * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasGeometryStatics=_uuidof(ICanvasGeometryStatics);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasGeometry
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry ** Default Interface **
 *    Windows.Graphics.IGeometrySource2D
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    class CanvasCachedGeometry;
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("BA6CB114-E1A1-448D-AB7C-8D2B92674119"), version] */
                    MIDL_INTERFACE("BA6CB114-E1A1-448D-AB7C-8D2B92674119")
                    ICanvasCachedGeometry : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasCachedGeometry=_uuidof(ICanvasCachedGeometry);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Geometry {
                    /* [object, exclusiveto, uuid("80BA1060-A9D7-41BA-9372-EC3FC1744E5D"), version] */
                    MIDL_INTERFACE("80BA1060-A9D7-41BA-9372-EC3FC1744E5D")
                    ICanvasCachedGeometryStatics : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateFill(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * * cachedGeometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateFillWithFlatteningTolerance(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * * cachedGeometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateStroke(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                            /* [in] */float strokeWidth,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * * cachedGeometry
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateStrokeWithStrokeStyle(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * * cachedGeometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateStrokeWithStrokeStyleAndFlatteningTolerance(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                            /* [in] */float strokeWidth,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle,
                            /* [in] */float flatteningTolerance,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * * cachedGeometry
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasCachedGeometryStatics=_uuidof(ICanvasCachedGeometryStatics);
                    
                } /* Geometry */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasFontSet;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasFontPropertyIdentifier : int
                    {
                        None,
                        FamilyName,
                        PreferredFamilyName,
                        FaceName,
                        FullName,
                        Win32FamilyName,
                        PostscriptName,
                        DesignScriptLanguageTag,
                        SupportedScriptLanguageTag,
                        SemanticTag,
                        Weight,
                        Stretch,
                        Style,
                        Total,
                    } CanvasFontPropertyIdentifier;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_None = CanvasFontPropertyIdentifier::None;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_FamilyName = CanvasFontPropertyIdentifier::FamilyName;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_PreferredFamilyName = CanvasFontPropertyIdentifier::PreferredFamilyName;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_FaceName = CanvasFontPropertyIdentifier::FaceName;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_FullName = CanvasFontPropertyIdentifier::FullName;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Win32FamilyName = CanvasFontPropertyIdentifier::Win32FamilyName;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_PostscriptName = CanvasFontPropertyIdentifier::PostscriptName;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_DesignScriptLanguageTag = CanvasFontPropertyIdentifier::DesignScriptLanguageTag;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_SupportedScriptLanguageTag = CanvasFontPropertyIdentifier::SupportedScriptLanguageTag;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_SemanticTag = CanvasFontPropertyIdentifier::SemanticTag;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Weight = CanvasFontPropertyIdentifier::Weight;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Stretch = CanvasFontPropertyIdentifier::Stretch;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Style = CanvasFontPropertyIdentifier::Style;
                    const CanvasFontPropertyIdentifier CanvasFontPropertyIdentifier_Total = CanvasFontPropertyIdentifier::Total;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontProperty
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasFontProperty
                    {
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier Identifier;
                        HSTRING Value;
                        HSTRING Locale;
                    } CanvasFontProperty;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontSet
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSet[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSet";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("0A5BFB92-1F3C-459F-9D7E-A6289DD093C0"), version] */
                    MIDL_INTERFACE("0A5BFB92-1F3C-459F-9D7E-A6289DD093C0")
                    ICanvasFontSet : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Fonts(
                            /* [retval, out] */__FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE TryFindFontFace(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [out] */int * index,
                            /* [retval, out] */::boolean * succeeded
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetMatchingFontsFromProperties(
                            /* [in] */UINT32 propertyCount,
                            /* [size_is(propertyCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty * propertyElements,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet * * matchingFonts
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetMatchingFontsFromWwsFamily(
                            /* [in] */HSTRING familyName,
                            /* [in] */ABI::Windows::UI::Text::FontWeight weight,
                            /* [in] */ABI::Windows::UI::Text::FontStretch stretch,
                            /* [in] */ABI::Windows::UI::Text::FontStyle style,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet * * matchingFonts
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CountFontsMatchingProperty(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty property,
                            /* [retval, out] */UINT32 * count
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE GetPropertyValuesFromIndex(
                            /* [in] */UINT32 fontIndex,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier,
                            /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPropertyValuesFromIdentifier(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier,
                            /* [in] */HSTRING preferredLocaleNames,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetPropertyValues(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontPropertyIdentifier propertyIdentifier,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasFontProperty * * valueElements
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasFontSet=_uuidof(ICanvasFontSet);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSetFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("3C9C9BDA-70F9-4FF9-AAB2-3B42923286EE"), version] */
                    MIDL_INTERFACE("3C9C9BDA-70F9-4FF9-AAB2-3B42923286EE")
                    ICanvasFontSetFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Windows::Foundation::IUriRuntimeClass * uri,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet * * fontSet
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasFontSetFactory=_uuidof(ICanvasFontSetFactory);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSetStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("5F4275CE-BCFA-48C5-9E67-FBE9866D4924"), version] */
                    MIDL_INTERFACE("5F4275CE-BCFA-48C5-9E67-FBE9866D4924")
                    ICanvasFontSetStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetSystemFontSet(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet * * fontSet
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasFontSetStatics=_uuidof(ICanvasFontSetStatics);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasFontSet ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontSet_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontSet_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasFontSet[] = L"Microsoft.Graphics.Canvas.Text.CanvasFontSet";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasNumberSubstitutionMethod : int
                    {
                        FromCulture,
                        Contextual,
                        Disabled,
                        National,
                        Traditional,
                    } CanvasNumberSubstitutionMethod;
                    const CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_FromCulture = CanvasNumberSubstitutionMethod::FromCulture;
                    const CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_Contextual = CanvasNumberSubstitutionMethod::Contextual;
                    const CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_Disabled = CanvasNumberSubstitutionMethod::Disabled;
                    const CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_National = CanvasNumberSubstitutionMethod::National;
                    const CanvasNumberSubstitutionMethod CanvasNumberSubstitutionMethod_Traditional = CanvasNumberSubstitutionMethod::Traditional;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitution[] = L"Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("C81A67AD-0639-4F8F-878B-D937F8A14293"), version] */
                    MIDL_INTERFACE("C81A67AD-0639-4F8F-878B-D937F8A14293")
                    ICanvasNumberSubstitution : public IInspectable
                    {
                    public:
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasNumberSubstitution=_uuidof(ICanvasNumberSubstitution);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("7496A822-C781-4EB0-AAFB-C078E7FA8E24"), version] */
                    MIDL_INTERFACE("7496A822-C781-4EB0-AAFB-C078E7FA8E24")
                    ICanvasNumberSubstitutionFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod method,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution * * canvasNumberSubstitution
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithLocaleAndIgnoreOverrides(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasNumberSubstitutionMethod method,
                            /* [in] */HSTRING localeName,
                            /* [in] */::boolean ignoreEnvironmentOverrides,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution * * canvasNumberSubstitution
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasNumberSubstitutionFactory=_uuidof(ICanvasNumberSubstitutionFactory);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution[] = L"Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerOptions[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, uuid("31F2406A-8C5F-4E12-8BD6-CFBBC7214D02"), version] */
                    MIDL_INTERFACE("31F2406A-8C5F-4E12-8BD6-CFBBC7214D02")
                    ICanvasTextAnalyzerOptions : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE GetLocaleName(
                            /* [in] */INT32 characterIndex,
                            /* [out] */INT32 * characterCount,
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetNumberSubstitution(
                            /* [in] */INT32 characterIndex,
                            /* [out] */INT32 * characterCount,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetVerticalGlyphOrientation(
                            /* [in] */INT32 characterIndex,
                            /* [out] */INT32 * characterCount,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetBidiLevel(
                            /* [in] */INT32 characterIndex,
                            /* [out] */INT32 * characterCount,
                            /* [retval, out] */UINT32 * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextAnalyzerOptions=_uuidof(ICanvasTextAnalyzerOptions);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__) */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasScaledFont
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasScaledFont
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasScaledFont[] = L"Microsoft.Graphics.Canvas.Text.ICanvasScaledFont";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("BBC4F8D2-EB2B-45F1-AC2A-CFC1F598BAE3"), version] */
                    MIDL_INTERFACE("BBC4F8D2-EB2B-45F1-AC2A-CFC1F598BAE3")
                    ICanvasScaledFont : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FontFace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ScaleFactor(
                            /* [retval, out] */float * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasScaledFont=_uuidof(ICanvasScaledFont);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasScaledFont
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasScaledFont ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasScaledFont_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasScaledFont_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasScaledFont[] = L"Microsoft.Graphics.Canvas.Text.CanvasScaledFont";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasCharacterRange
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasCharacterRange
                    {
                        INT32 CharacterIndex;
                        INT32 CharacterCount;
                    } CanvasCharacterRange;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasAnalyzedBidi
                    {
                        UINT32 ExplicitLevel;
                        UINT32 ResolvedLevel;
                    } CanvasAnalyzedBidi;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasAnalyzedBreakpoint
                    {
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition BreakBefore;
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasLineBreakCondition BreakAfter;
                        ::boolean IsWhitespace;
                        ::boolean IsSoftHyphen;
                    } CanvasAnalyzedBreakpoint;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasScriptProperties
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasScriptProperties
                    {
                        HSTRING IsoScriptCode;
                        INT32 IsoScriptNumber;
                        INT32 ClusterLookahead;
                        HSTRING JustificationCharacter;
                        ::boolean RestrictCaretToClusters;
                        ::boolean UsesWordDividers;
                        ::boolean IsDiscreteWriting;
                        ::boolean IsBlockWriting;
                        ::boolean IsDistributedWithinCluster;
                        ::boolean IsConnectedWriting;
                        ::boolean IsCursiveWriting;
                    } CanvasScriptProperties;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasGlyphJustification : int
                    {
                        None = 0,
                        ArabicBlank = 1,
                        Character = 2,
                        Blank = 4,
                        ArabicNormal = 7,
                        ArabicKashida = 8,
                        ArabicAlef = 9,
                        ArabicHa = 10,
                        ArabicRa = 11,
                        ArabicBa = 12,
                        ArabicBara = 13,
                        ArabicSeen = 14,
                        ArabicSeenM = 15,
                    } CanvasGlyphJustification;
                    const CanvasGlyphJustification CanvasGlyphJustification_None = CanvasGlyphJustification::None;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicBlank = CanvasGlyphJustification::ArabicBlank;
                    const CanvasGlyphJustification CanvasGlyphJustification_Character = CanvasGlyphJustification::Character;
                    const CanvasGlyphJustification CanvasGlyphJustification_Blank = CanvasGlyphJustification::Blank;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicNormal = CanvasGlyphJustification::ArabicNormal;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicKashida = CanvasGlyphJustification::ArabicKashida;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicAlef = CanvasGlyphJustification::ArabicAlef;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicHa = CanvasGlyphJustification::ArabicHa;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicRa = CanvasGlyphJustification::ArabicRa;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicBa = CanvasGlyphJustification::ArabicBa;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicBara = CanvasGlyphJustification::ArabicBara;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicSeen = CanvasGlyphJustification::ArabicSeen;
                    const CanvasGlyphJustification CanvasGlyphJustification_ArabicSeenM = CanvasGlyphJustification::ArabicSeenM;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasGlyphShaping
                    {
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphJustification Justification;
                        ::boolean IsClusterStart;
                        ::boolean IsDiacritic;
                        ::boolean IsZeroWidthSpace;
                    } CanvasGlyphShaping;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasAnalyzedGlyphOrientation
                    {
                        ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphOrientation GlyphOrientation;
                        UINT32 AdjustedBidiLevel;
                        ::boolean IsSideways;
                        ::boolean IsRightToLeft;
                    } CanvasAnalyzedGlyphOrientation;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [version] */
                    typedef 
                    struct CanvasJustificationOpportunity
                    {
                        float ExpansionMinimum;
                        float ExpansionMaximum;
                        float CompressionMaximum;
                        BYTE ExpansionPriority;
                        BYTE CompressionPriority;
                        ::boolean AllowResidualExpansion;
                        ::boolean AllowResidualCompression;
                        ::boolean ApplyToLeadingEdge;
                        ::boolean ApplyToTrailingEdge;
                    } CanvasJustificationOpportunity;
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    class CanvasTextAnalyzer;
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("4298F3D1-645B-40E3-B91B-81986D767FC0"), version] */
                    MIDL_INTERFACE("4298F3D1-645B-40E3-B91B-81986D767FC0")
                    ICanvasTextAnalyzer : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetFontsUsingSystemFontSet(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * textFormat,
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetFonts(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * textFormat,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontSet * fontSet,
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBidi(
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBidiWithLocale(
                            /* [in] */HSTRING locale,
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBreakpoints(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetBreakpointsWithLocale(
                            /* [in] */HSTRING locale,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedBreakpoint * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetNumberSubstitutions(
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetScript(
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetScriptWithLocale(
                            /* [in] */HSTRING locale,
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetGlyphOrientations(
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * * values
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetGlyphOrientationsWithLocale(
                            /* [in] */HSTRING locale,
                            /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * * values
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetScriptProperties(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript analyzedScript,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasScriptProperties * scriptProperties
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetGlyphs(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange characterRange,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [in] */float fontSize,
                            /* [in] */::boolean isSideways,
                            /* [in] */::boolean isRightToLeft,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetGlyphsWithAllOptions(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange characterRange,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [in] */float fontSize,
                            /* [in] */::boolean isSideways,
                            /* [in] */::boolean isRightToLeft,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [in] */HSTRING locale,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution * numberSubstitution,
                            /* [in] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * typographyRanges,
                            /* [out] */UINT32 * clusterMapIndicesCount,
                            /* [size_is(, *(clusterMapIndicesCount)), out] */int * * clusterMapIndicesElements,
                            /* [out] */UINT32 * isShapedAloneGlyphsCount,
                            /* [size_is(, *(isShapedAloneGlyphsCount)), out] */::boolean * * isShapedAloneGlyphsElements,
                            /* [out] */UINT32 * glyphShapingResultsCount,
                            /* [size_is(, *(glyphShapingResultsCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping * * glyphShapingResultsElements,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetJustificationOpportunities(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasCharacterRange characterRange,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [in] */float fontSize,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [in] */UINT32 clusterMapIndicesCount,
                            /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndicesElements,
                            /* [in] */UINT32 glyphShapingResultsCount,
                            /* [size_is(glyphShapingResultsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping * glyphShapingResultsElements,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE ApplyJustificationOpportunities(
                            /* [in] */float lineWidth,
                            /* [in] */UINT32 justificationOpportunitiesCount,
                            /* [size_is(justificationOpportunitiesCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasJustificationOpportunity * justificationOpportunitiesElements,
                            /* [in] */UINT32 sourceGlyphsCount,
                            /* [size_is(sourceGlyphsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * sourceGlyphsElements,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * * valueElements
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE AddGlyphsAfterJustification(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [in] */float fontSize,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [in] */UINT32 clusterMapIndicesCount,
                            /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndicesElements,
                            /* [in] */UINT32 originalGlyphsCount,
                            /* [size_is(originalGlyphsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * originalGlyphsElements,
                            /* [in] */UINT32 justifiedGlyphsCount,
                            /* [size_is(justifiedGlyphsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * justifiedGlyphsElements,
                            /* [in] */UINT32 glyphShapingResultsCount,
                            /* [size_is(glyphShapingResultsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping * glyphShapingResultsElements,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * * valueElements
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE AddGlyphsAfterJustificationWithClusterMap(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                            /* [in] */float fontSize,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasAnalyzedScript script,
                            /* [in] */UINT32 clusterMapIndicesCount,
                            /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndicesElements,
                            /* [in] */UINT32 originalGlyphsCount,
                            /* [size_is(originalGlyphsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * originalGlyphsElements,
                            /* [in] */UINT32 justifiedGlyphsCount,
                            /* [size_is(justifiedGlyphsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * justifiedGlyphsElements,
                            /* [in] */UINT32 glyphShapingResultsCount,
                            /* [size_is(glyphShapingResultsCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyphShaping * glyphShapingResultsElements,
                            /* [out] */UINT32 * outputClusterMapIndicesCount,
                            /* [size_is(, *(outputClusterMapIndicesCount)), out] */int * * outputClusterMapIndicesElements,
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * * valueElements
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextAnalyzer=_uuidof(ICanvasTextAnalyzer);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Text {
                    /* [object, exclusiveto, uuid("521E433F-F698-44C0-8D7F-FE374FE539E1"), version] */
                    MIDL_INTERFACE("521E433F-F698-44C0-8D7F-FE374FE539E1")
                    ICanvasTextAnalyzerFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */HSTRING text,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer * * canvasTextAnalyzer
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(
                            /* [in] */HSTRING text,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasNumberSubstitution * numberSubstitution,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasVerticalGlyphOrientation verticalGlyphOrientation,
                            /* [in] */UINT32 bidiLevel,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer * * canvasTextAnalyzer
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateWithOptions(
                            /* [in] */HSTRING text,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextDirection textDirection,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzerOptions * options,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextAnalyzer * * canvasTextAnalyzer
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasTextAnalyzerFactory=_uuidof(ICanvasTextAnalyzerFactory);
                    
                } /* Text */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSpriteSortMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasSpriteSortMode : int
                {
                    None,
                    Bitmap,
                } CanvasSpriteSortMode;
                const CanvasSpriteSortMode CanvasSpriteSortMode_None = CanvasSpriteSortMode::None;
                const CanvasSpriteSortMode CanvasSpriteSortMode_Bitmap = CanvasSpriteSortMode::Bitmap;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSpriteOptions
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [flags, version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasSpriteOptions : unsigned int
                {
                    None = 0,
                    ClampToSourceRect = 0x1,
                } CanvasSpriteOptions;
                
                DEFINE_ENUM_FLAG_OPERATORS(CanvasSpriteOptions)
                const CanvasSpriteOptions CanvasSpriteOptions_None = CanvasSpriteOptions::None;
                const CanvasSpriteOptions CanvasSpriteOptions_ClampToSourceRect = CanvasSpriteOptions::ClampToSourceRect;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSpriteFlip
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [flags, version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasSpriteFlip : unsigned int
                {
                    None = 0,
                    Horizontal = 0x1,
                    Vertical = 0x2,
                    Both = 0x3,
                } CanvasSpriteFlip;
                
                DEFINE_ENUM_FLAG_OPERATORS(CanvasSpriteFlip)
                const CanvasSpriteFlip CanvasSpriteFlip_None = CanvasSpriteFlip::None;
                const CanvasSpriteFlip CanvasSpriteFlip_Horizontal = CanvasSpriteFlip::Horizontal;
                const CanvasSpriteFlip CanvasSpriteFlip_Vertical = CanvasSpriteFlip::Vertical;
                const CanvasSpriteFlip CanvasSpriteFlip_Both = CanvasSpriteFlip::Both;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasSpriteBatch;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSpriteBatch
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSpriteBatchStatics[] = L"Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("851EB08D-9D01-4B57-9E94-24113151B74B"), version] */
                MIDL_INTERFACE("851EB08D-9D01-4B57-9E94-24113151B74B")
                ICanvasSpriteBatchStatics : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE IsSupported(
                        ABI::Microsoft::Graphics::Canvas::ICanvasDevice * device,
                        /* [retval, out] */::boolean * value
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasSpriteBatchStatics=_uuidof(ICanvasSpriteBatchStatics);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSpriteBatch
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSpriteBatch
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSpriteBatch[] = L"Microsoft.Graphics.Canvas.ICanvasSpriteBatch";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("A065DCE4-A7F2-4DF4-8405-EA9E3A215BF8"), version] */
                MIDL_INTERFACE("A065DCE4-A7F2-4DF4-8405-EA9E3A215BF8")
                ICanvasSpriteBatch : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawToRect(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destRect
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawAtOffset(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawWithTransform(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawToRectWithTint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawAtOffsetWithTint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawWithTransformAndTint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawToRectWithTintAndFlip(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawWithTransformAndTintAndFlip(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawAtOffsetWithTintAndTransform(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 origin,
                        /* [in] */float rotation,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 scale,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetToRect(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destRect,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetAtOffset(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetWithTransform(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetToRectWithTint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destRect,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetAtOffsetWithTint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetWithTransformAndTint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetToRectWithTintAndFlip(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destRect,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetWithTransformAndTintAndFlip(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 transform,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawFromSpriteSheetAtOffsetWithTintAndTransform(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRect,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 tint,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 origin,
                        /* [in] */float rotation,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 scale,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteFlip flip
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasSpriteBatch=_uuidof(ICanvasSpriteBatch);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasSpriteBatch
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasSpriteBatch ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSpriteBatch_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSpriteBatch_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasSpriteBatch[] = L"Microsoft.Graphics.Canvas.CanvasSpriteBatch";
#endif



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    class CanvasSvgTextElement;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgDisplay : int
                    {
                        Inline,
                        None,
                    } CanvasSvgDisplay;
                    const CanvasSvgDisplay CanvasSvgDisplay_Inline = CanvasSvgDisplay::Inline;
                    const CanvasSvgDisplay CanvasSvgDisplay_None = CanvasSvgDisplay::None;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgVisibility : int
                    {
                        Visible,
                        Hidden,
                    } CanvasSvgVisibility;
                    const CanvasSvgVisibility CanvasSvgVisibility_Visible = CanvasSvgVisibility::Visible;
                    const CanvasSvgVisibility CanvasSvgVisibility_Hidden = CanvasSvgVisibility::Hidden;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgOverflow : int
                    {
                        DoNotClipToViewport,
                        ClipToViewport,
                    } CanvasSvgOverflow;
                    const CanvasSvgOverflow CanvasSvgOverflow_DoNotClipToViewport = CanvasSvgOverflow::DoNotClipToViewport;
                    const CanvasSvgOverflow CanvasSvgOverflow_ClipToViewport = CanvasSvgOverflow::ClipToViewport;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgUnits : int
                    {
                        UserSpaceOnUse,
                        ObjectBoundingBox,
                    } CanvasSvgUnits;
                    const CanvasSvgUnits CanvasSvgUnits_UserSpaceOnUse = CanvasSvgUnits::UserSpaceOnUse;
                    const CanvasSvgUnits CanvasSvgUnits_ObjectBoundingBox = CanvasSvgUnits::ObjectBoundingBox;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgAspectScaling : int
                    {
                        Meet,
                        Slice,
                    } CanvasSvgAspectScaling;
                    const CanvasSvgAspectScaling CanvasSvgAspectScaling_Meet = CanvasSvgAspectScaling::Meet;
                    const CanvasSvgAspectScaling CanvasSvgAspectScaling_Slice = CanvasSvgAspectScaling::Slice;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgAspectAlignment : int
                    {
                        None,
                        XMinYMin,
                        XMidYMin,
                        XMaxYMin,
                        XMinYMid,
                        XMidYMid,
                        XMaxYMid,
                        XMinYMax,
                        XMidYMax,
                        XMaxYMax,
                    } CanvasSvgAspectAlignment;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_None = CanvasSvgAspectAlignment::None;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMinYMin = CanvasSvgAspectAlignment::XMinYMin;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMidYMin = CanvasSvgAspectAlignment::XMidYMin;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMaxYMin = CanvasSvgAspectAlignment::XMaxYMin;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMinYMid = CanvasSvgAspectAlignment::XMinYMid;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMidYMid = CanvasSvgAspectAlignment::XMidYMid;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMaxYMid = CanvasSvgAspectAlignment::XMaxYMid;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMinYMax = CanvasSvgAspectAlignment::XMinYMax;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMidYMax = CanvasSvgAspectAlignment::XMidYMax;
                    const CanvasSvgAspectAlignment CanvasSvgAspectAlignment_XMaxYMax = CanvasSvgAspectAlignment::XMaxYMax;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgLengthUnits : int
                    {
                        Number,
                        Percentage,
                    } CanvasSvgLengthUnits;
                    const CanvasSvgLengthUnits CanvasSvgLengthUnits_Number = CanvasSvgLengthUnits::Number;
                    const CanvasSvgLengthUnits CanvasSvgLengthUnits_Percentage = CanvasSvgLengthUnits::Percentage;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, uuid("0775CB81-C555-45BF-9795-0FF59151C3BE"), version] */
                    MIDL_INTERFACE("0775CB81-C555-45BF-9795-0FF59151C3BE")
                    ICanvasSvgElement : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ContainingDocument(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Parent(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgElement=_uuidof(ICanvasSvgElement);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, uuid("652786A8-F3AB-4083-991D-9748AA86BD6E"), version] */
                    MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD6E")
                    ICanvasSvgAttribute : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Clone(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute * * result
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetElement(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgAttribute=_uuidof(ICanvasSvgAttribute);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("D8B7CB94-8167-495D-9C71-5E97E5D08D2B"), version] */
                    MIDL_INTERFACE("D8B7CB94-8167-495D-9C71-5E97E5D08D2B")
                    ICanvasSvgNamedElement : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE AppendChild(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * child
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateAndAppendNamedChildElement(
                            /* [in] */HSTRING childName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement * * childElement
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateAndAppendTextChildElement(
                            /* [in] */HSTRING textContent,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgTextElement * * childElement
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_FirstChild(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LastChild(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetPreviousSibling(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * child,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetNextSibling(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * child,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SpecifiedAttributes(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */HSTRING * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Tag(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HasChildren(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE InsertChildBefore(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * child,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * referenceChild
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE IsAttributeSpecified(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE IsAttributeSpecifiedWithInherhited(
                            /* [in] */HSTRING attributeName,
                            /* [in] */::boolean inherited,
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE RemoveAttribute(
                            /* [in] */HSTRING attributeName
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE RemoveChild(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * child
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE ReplaceChild(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * newChild,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgElement * oldChild
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetStringAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */HSTRING attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetStringAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */HSTRING * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgAttribute * * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetIdAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */HSTRING attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetIdAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */HSTRING * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFloatAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */float attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFloatAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */float * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetColorAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Windows::UI::Color attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetColorAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Windows::UI::Color * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetFilledRegionDeterminationAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetFilledRegionDeterminationAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetDisplayAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetDisplayAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgDisplay * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetOverflowAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetOverflowAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgOverflow * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetCapStyleAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetCapStyleAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasCapStyle * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetLineJoinAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetLineJoinAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasLineJoin * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetVisibilityAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetVisibilityAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgVisibility * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetTransformAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetTransformAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix3x2 * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetUnitsAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetUnitsAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgUnits * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetEdgeBehaviorAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetEdgeBehaviorAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetRectangleAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Windows::Foundation::Rect attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetRectangleAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [retval, out] */ABI::Windows::Foundation::Rect * attributeValue
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetLengthAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */float value,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits units
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetLengthAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits * units,
                            /* [retval, out] */float * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetAspectRatioAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment alignment,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling meetOrSlice
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetAspectRatioAttribute(
                            /* [in] */HSTRING attributeName,
                            /* [out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectScaling * meetOrSlice,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgAspectAlignment * alignment
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgNamedElement=_uuidof(ICanvasSvgNamedElement);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgTextElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AA86BD6D"), version] */
                    MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD6D")
                    ICanvasSvgTextElement : public IInspectable
                    {
                    public:
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Text(
                            /* [in] */HSTRING value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Text(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgTextElement=_uuidof(ICanvasSvgTextElement);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgPaintType : int
                    {
                        None,
                        Color,
                        CurrentColor,
                        Uri,
                        UriThenNone,
                        UriThenColor,
                        UriThenCurrentColor,
                    } CanvasSvgPaintType;
                    const CanvasSvgPaintType CanvasSvgPaintType_None = CanvasSvgPaintType::None;
                    const CanvasSvgPaintType CanvasSvgPaintType_Color = CanvasSvgPaintType::Color;
                    const CanvasSvgPaintType CanvasSvgPaintType_CurrentColor = CanvasSvgPaintType::CurrentColor;
                    const CanvasSvgPaintType CanvasSvgPaintType_Uri = CanvasSvgPaintType::Uri;
                    const CanvasSvgPaintType CanvasSvgPaintType_UriThenNone = CanvasSvgPaintType::UriThenNone;
                    const CanvasSvgPaintType CanvasSvgPaintType_UriThenColor = CanvasSvgPaintType::UriThenColor;
                    const CanvasSvgPaintType CanvasSvgPaintType_UriThenCurrentColor = CanvasSvgPaintType::UriThenCurrentColor;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    class CanvasSvgPaintAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("653786A8-F3AB-4083-991D-9748AA86BD6E"), version] */
                    MIDL_INTERFACE("653786A8-F3AB-4083-991D-9748AA86BD6E")
                    ICanvasSvgPaintAttribute : public IInspectable
                    {
                    public:
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_PaintType(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PaintType(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Color(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Color(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Id(
                            /* [in] */HSTRING value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Id(
                            /* [retval, out] */HSTRING * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgPaintAttribute=_uuidof(ICanvasSvgPaintAttribute);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasSvgPathCommand : int
                    {
                        ClosePath,
                        MoveAbsolute,
                        MoveRelative,
                        LineAbsolute,
                        LineRelative,
                        CubicAbsolute,
                        CubicRelative,
                        QuadraticAbsolute,
                        QuadraticRelative,
                        ArcAbsolute,
                        ArcRelative,
                        HorizontalAbsolute,
                        HorizontalRelative,
                        VerticalAbsolute,
                        VerticalRelative,
                        CubicSmoothAbsolute,
                        CubicSmoothRelative,
                        QuadraticSmoothAbsolute,
                        QuadraticSmoothRelative,
                    } CanvasSvgPathCommand;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_ClosePath = CanvasSvgPathCommand::ClosePath;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_MoveAbsolute = CanvasSvgPathCommand::MoveAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_MoveRelative = CanvasSvgPathCommand::MoveRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_LineAbsolute = CanvasSvgPathCommand::LineAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_LineRelative = CanvasSvgPathCommand::LineRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_CubicAbsolute = CanvasSvgPathCommand::CubicAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_CubicRelative = CanvasSvgPathCommand::CubicRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticAbsolute = CanvasSvgPathCommand::QuadraticAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticRelative = CanvasSvgPathCommand::QuadraticRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_ArcAbsolute = CanvasSvgPathCommand::ArcAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_ArcRelative = CanvasSvgPathCommand::ArcRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_HorizontalAbsolute = CanvasSvgPathCommand::HorizontalAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_HorizontalRelative = CanvasSvgPathCommand::HorizontalRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_VerticalAbsolute = CanvasSvgPathCommand::VerticalAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_VerticalRelative = CanvasSvgPathCommand::VerticalRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_CubicSmoothAbsolute = CanvasSvgPathCommand::CubicSmoothAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_CubicSmoothRelative = CanvasSvgPathCommand::CubicSmoothRelative;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticSmoothAbsolute = CanvasSvgPathCommand::QuadraticSmoothAbsolute;
                    const CanvasSvgPathCommand CanvasSvgPathCommand_QuadraticSmoothRelative = CanvasSvgPathCommand::QuadraticSmoothRelative;
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    class CanvasSvgPathAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AB86BD6E"), version] */
                    MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AB86BD6E")
                    ICanvasSvgPathAttribute : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreatePathGeometry(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * outputGeometry
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreatePathGeometryWithFill(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::CanvasFilledRegionDetermination fill,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * * outputGeometry
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Commands(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetCommands(
                            /* [in] */INT32 startIndex,
                            /* [in] */INT32 elementCount,
                            /* [out] */UINT32 * outputValueCount,
                            /* [retval, size_is(, *(outputValueCount)), out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand * * outputValueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SegmentData(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetSegmentData(
                            /* [in] */INT32 startIndex,
                            /* [in] */INT32 elementCount,
                            /* [out] */UINT32 * outputValueCount,
                            /* [retval, size_is(, *(outputValueCount)), out] */float * * outputValueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE RemoveCommandsAtEnd(
                            /* [in] */INT32 commandsCount
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE RemoveSegmentDataAtEnd(
                            /* [in] */INT32 commandsCount
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetCommands(
                            /* [in] */INT32 startIndex,
                            /* [in] */UINT32 commandCount,
                            /* [size_is(commandCount), in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand * commands
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetSegmentData(
                            /* [in] */INT32 startIndex,
                            /* [in] */UINT32 segmentDataCount,
                            /* [size_is(segmentDataCount), in] */float * segmentData
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgPathAttribute=_uuidof(ICanvasSvgPathAttribute);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute";
#endif

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    class CanvasSvgPointsAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AA86BD6F"), version] */
                    MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD6F")
                    ICanvasSvgPointsAttribute : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Points(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */ABI::Windows::Foundation::Numerics::Vector2 * * valueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetPoints(
                            /* [in] */INT32 startIndex,
                            /* [in] */INT32 elementCount,
                            /* [out] */UINT32 * outputValueCount,
                            /* [retval, size_is(, *(outputValueCount)), out] */ABI::Windows::Foundation::Numerics::Vector2 * * outputValueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE RemovePointsAtEnd(
                            /* [in] */INT32 pointCount
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetPoints(
                            /* [in] */INT32 startIndex,
                            /* [in] */UINT32 pointCount,
                            /* [size_is(pointCount), in] */ABI::Windows::Foundation::Numerics::Vector2 * points
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgPointsAttribute=_uuidof(ICanvasSvgPointsAttribute);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute";
#endif

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    class CanvasSvgStrokeDashArrayAttribute;
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AA86BD70"), version] */
                    MIDL_INTERFACE("652786A8-F3AB-4083-991D-9748AA86BD70")
                    ICanvasSvgStrokeDashArrayAttribute : public IInspectable
                    {
                    public:
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE GetDashes(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE GetDashesWithUnits(
                            /* [in] */INT32 startIndex,
                            /* [in] */INT32 elementCount,
                            /* [out] */UINT32 * outputUnitsCount,
                            /* [size_is(, *(outputUnitsCount)), out] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits * * outputUnitsElements,
                            /* [out] */UINT32 * outputValueCount,
                            /* [retval, size_is(, *(outputValueCount)), out] */float * * outputValueElements
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE RemoveDashesAtEnd(
                            /* [in] */INT32 dashCount
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE SetDashes(
                            /* [in] */INT32 startIndex,
                            /* [in] */UINT32 dashCount,
                            /* [size_is(dashCount), in] */float * dashes
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE SetDashesWithUnit(
                            /* [in] */INT32 startIndex,
                            /* [in] */UINT32 dashCount,
                            /* [size_is(dashCount), in] */float * dashes,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits units
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE SetDashesWithUnits(
                            /* [in] */INT32 startIndex,
                            /* [in] */UINT32 dashValueCount,
                            /* [size_is(dashValueCount), in] */float * dashValues,
                            /* [in] */UINT32 unitValueCount,
                            /* [size_is(unitValueCount), in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits * unitValues
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgStrokeDashArrayAttribute=_uuidof(ICanvasSvgStrokeDashArrayAttribute);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute";
#endif








/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("A0E34929-3551-44FE-A670-D9B3FD800516"), version] */
                    MIDL_INTERFACE("A0E34929-3551-44FE-A670-D9B3FD800516")
                    ICanvasSvgDocument : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetXml(
                            /* [retval, out] */HSTRING * xmlString
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SaveAsync(
                            /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                            /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * asyncAction
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Root(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Root(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE FindElementById(
                            /* [in] */HSTRING id,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement * * element
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreatePaintAttributeWithDefaults(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute * * result
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreatePaintAttribute(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPaintType paintType,
                            /* [in] */ABI::Windows::UI::Color color,
                            /* [in] */HSTRING id,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPaintAttribute * * result
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreatePathAttributeWithDefaults(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute * * result
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreatePathAttribute(
                            /* [in] */UINT32 segmentDataCount,
                            /* [size_is(segmentDataCount), in] */float * segmentData,
                            /* [in] */UINT32 commandCount,
                            /* [size_is(commandCount), in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgPathCommand * commands,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPathAttribute * * result
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreatePointsAttributeWithDefaults(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute * * result
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreatePointsAttribute(
                            /* [in] */UINT32 pointCount,
                            /* [size_is(pointCount), in] */ABI::Windows::Foundation::Numerics::Vector2 * points,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgPointsAttribute * * result
                            ) = 0;
                        /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateStrokeDashArrayAttributeWithDefaults(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute * * result
                            ) = 0;
                        /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateStrokeDashArrayAttribute(
                            /* [in] */UINT32 dashValueCount,
                            /* [size_is(dashValueCount), in] */float * dashValues,
                            /* [in] */UINT32 unitValueCount,
                            /* [size_is(unitValueCount), in] */ABI::Microsoft::Graphics::Canvas::Svg::CanvasSvgLengthUnits * unitValues,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgStrokeDashArrayAttribute * * result
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE LoadElementFromXml(
                            /* [in] */HSTRING xmlString,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgNamedElement * * svgElement
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE LoadElementAsync(
                            /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                            /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * * svgElement
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgDocument=_uuidof(ICanvasSvgDocument);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("7740E748-CB9A-453F-A678-8B3B3A7254D3"), version] */
                    MIDL_INTERFACE("7740E748-CB9A-453F-A678-8B3B3A7254D3")
                    ICanvasSvgDocumentStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE LoadFromXml(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */HSTRING xmlString,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument * * svgDocument
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE LoadAsync(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */ABI::Windows::Storage::Streams::IRandomAccessStream * stream,
                            /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * * svgDocument
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE IsSupported(
                            ABI::Microsoft::Graphics::Canvas::ICanvasDevice * device,
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgDocumentStatics=_uuidof(ICanvasSvgDocumentStatics);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentFactory[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Svg {
                    /* [object, exclusiveto, uuid("BAB0F16D-4050-4EF6-8022-8A07E9E74A9D"), version] */
                    MIDL_INTERFACE("BAB0F16D-4050-4EF6-8022-8A07E9E74A9D")
                    ICanvasSvgDocumentFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateEmpty(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument * * canvasSvgDocument
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasSvgDocumentFactory=_uuidof(ICanvasSvgDocumentFactory);
                    
                } /* Svg */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDrawingSession
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDrawingSession
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.ICanvasDrawingSession";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("F60AFD09-E623-4BE0-B750-578AA920B1DB"), version] */
                MIDL_INTERFACE("F60AFD09-E623-4BE0-B750-578AA920B1DB")
                ICanvasDrawingSession : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE Clear(
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE ClearHdr(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector4 color
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE Flush(void) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtOrigin(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffset(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoords(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */float x,
                        /* [in] */float y
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageToRect(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destinationRectangle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRect(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRect(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRect(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect destinationRectangle,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacity(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacity(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacity(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect destinationRectangle,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolation(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect destinationRectangle,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasComposite composite
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasComposite composite
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasImage * image,
                        /* [in] */ABI::Windows::Foundation::Rect destinationRectangle,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasComposite composite
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix4x4 perspective
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix4x4 perspective
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasBitmap * bitmap,
                        /* [in] */ABI::Windows::Foundation::Rect destinationRectangle,
                        /* [in] */ABI::Windows::Foundation::Rect sourceRectangle,
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix4x4 perspective
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrush(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point0,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point1,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrush(
                        /* [in] */float x0,
                        /* [in] */float y0,
                        /* [in] */float x1,
                        /* [in] */float y1,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineWithColor(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point0,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point1,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColor(
                        /* [in] */float x0,
                        /* [in] */float y0,
                        /* [in] */float x1,
                        /* [in] */float y1,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrushAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point0,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point1,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrushAndStrokeWidth(
                        /* [in] */float x0,
                        /* [in] */float y0,
                        /* [in] */float x1,
                        /* [in] */float y1,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineWithColorAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point0,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point1,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColorAndStrokeWidth(
                        /* [in] */float x0,
                        /* [in] */float y0,
                        /* [in] */float x1,
                        /* [in] */float y1,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point0,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point1,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x0,
                        /* [in] */float y0,
                        /* [in] */float x1,
                        /* [in] */float y1,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point0,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point1,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x0,
                        /* [in] */float y0,
                        /* [in] */float x1,
                        /* [in] */float y1,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrush(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColor(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrushAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrushAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColorAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColorAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillRectangleWithBrush(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillRectangleWithColor(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillRectangleWithBrushAndOpacityBrush(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillRectangleAtCoordsWithBrushAndOpacityBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrush(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColor(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrushAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColorAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleWithBrush(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleWithColor(
                        /* [in] */ABI::Windows::Foundation::Rect rect,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillRoundedRectangleAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrush(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColor(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrushAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrushAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColorAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColorAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillEllipseWithBrush(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillEllipseAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillEllipseWithColor(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillEllipseAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radiusX,
                        /* [in] */float radiusY,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrush(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColor(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrushAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrushAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColorAndStrokeWidth(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColorAndStrokeWidth(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillCircleWithBrush(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillCircleAtCoordsWithBrush(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillCircleWithColor(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 centerPoint,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillCircleAtCoordsWithColor(
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float radius,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithColor(
                        /* [in] */HSTRING text,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithColor(
                        /* [in] */HSTRING text,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithBrushAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectWithBrushAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */ABI::Windows::Foundation::Rect rectangle,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithBrushAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectCoordsWithBrushAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointWithColorAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectWithColorAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */ABI::Windows::Foundation::Rect rectangle,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtPointCoordsWithColorAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextAtRectCoordsWithColorAndFormat(
                        /* [in] */HSTRING text,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */float w,
                        /* [in] */float h,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextFormat * format
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrushAndStrokeWidth(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColorAndStrokeWidth(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrushAndStrokeWidth(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColorAndStrokeWidth(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrushAndStrokeWidth(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColorAndStrokeWidth(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::UI::Color color,
                        /* [in] */float strokeWidth,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasStrokeStyle * strokeStyle
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryWithBrushAndOpacityBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithBrushAndOpacityBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryAtCoordsWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithBrushAndOpacityBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE FillGeometryAtOriginWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * geometry,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * geometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 offset,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtCoordsWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtCoordsWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * geometry,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtOriginWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * geometry,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawCachedGeometryAtOriginWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasCachedGeometry * geometry,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout * textLayout,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutAtCoordsWithBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout * textLayout,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout * textLayout,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawTextLayoutAtCoordsWithColor(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextLayout * textLayout,
                        /* [in] */float x,
                        /* [in] */float y,
                        /* [in] */ABI::Windows::UI::Color color
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawInk(
                        /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE DrawInkWithHighContrast(
                        /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes,
                        /* [in] */::boolean highContrast
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGradientMeshAtOrigin(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh * gradientMesh
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGradientMesh(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh * gradientMesh,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGradientMeshAtCoords(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGradientMesh * gradientMesh,
                        /* [in] */float x,
                        /* [in] */float y
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawSvgAtOrigin(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument * svgDocument,
                        /* [in] */ABI::Windows::Foundation::Size viewportSize
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawSvgAtPoint(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument * svgDocument,
                        /* [in] */ABI::Windows::Foundation::Size viewportSize,
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawSvgAtCoords(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Svg::ICanvasSvgDocument * svgDocument,
                        /* [in] */ABI::Windows::Foundation::Size viewportSize,
                        /* [in] */float x,
                        /* [in] */float y
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Antialiasing(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Antialiasing(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAntialiasing value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Blend(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasBlend * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Blend(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasBlend value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TextAntialiasing(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TextAntialiasing(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextAntialiasing value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TextRenderingParameters(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters * * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TextRenderingParameters(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasTextRenderingParameters * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Transform(
                        /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix3x2 * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Transform(
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Units(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasUnits * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Units(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasUnits value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_EffectBufferPrecision(
                        /* [retval, out] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_EffectBufferPrecision(
                        /* [in] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_EffectTileSize(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::BitmapSize * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_EffectTileSize(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::BitmapSize value
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacity(
                        /* [in] */float opacity,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrush(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipRectangle(
                        /* [in] */float opacity,
                        /* [in] */ABI::Windows::Foundation::Rect clipRectangle,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipRectangle(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush,
                        /* [in] */ABI::Windows::Foundation::Rect clipRectangle,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipGeometry(
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * clipGeometry,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipGeometry(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * clipGeometry,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityAndClipGeometryAndTransform(
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * clipGeometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 geometryTransform,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [default_overload, overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithOpacityBrushAndClipGeometryAndTransform(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * clipGeometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 geometryTransform,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateLayerWithAllOptions(
                        /* [in] */float opacity,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * opacityBrush,
                        /* [in] */ABI::Windows::Foundation::Rect clipRectangle,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Geometry::ICanvasGeometry * clipGeometry,
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 geometryTransform,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasLayerOptions options,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasActiveLayer * * layer
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGlyphRun(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                        /* [in] */float fontSize,
                        /* [in] */UINT32 glyphCount,
                        /* [size_is(glyphCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphs,
                        /* [in] */::boolean isSideways,
                        /* [in] */UINT32 bidiLevel,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGlyphRunWithMeasuringMode(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                        /* [in] */float fontSize,
                        /* [in] */UINT32 glyphCount,
                        /* [size_is(glyphCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphs,
                        /* [in] */::boolean isSideways,
                        /* [in] */UINT32 bidiLevel,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE DrawGlyphRunWithMeasuringModeAndDescription(
                        /* [in] */ABI::Windows::Foundation::Numerics::Vector2 point,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::ICanvasFontFace * fontFace,
                        /* [in] */float fontSize,
                        /* [in] */UINT32 glyphCount,
                        /* [size_is(glyphCount), in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasGlyph * glyphs,
                        /* [in] */::boolean isSideways,
                        /* [in] */UINT32 bidiLevel,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Brushes::ICanvasBrush * brush,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::Text::CanvasTextMeasuringMode measuringMode,
                        /* [in] */HSTRING localeName,
                        /* [in] */HSTRING textString,
                        /* [in] */UINT32 clusterMapIndicesCount,
                        /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndices,
                        /* [in] */UINT32 textPosition
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatch(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch * * spriteBatch
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatchWithSortMode(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch * * spriteBatch
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatchWithSortModeAndInterpolation(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch * * spriteBatch
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateSpriteBatchWithSortModeAndInterpolationAndOptions(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteSortMode sortMode,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation interpolation,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSpriteOptions options,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSpriteBatch * * spriteBatch
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasDrawingSession=_uuidof(ICanvasDrawingSession);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasDrawingSession
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasDrawingSession ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.CanvasDrawingSession";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasImageSource;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("8596BEDD-D7F7-4C6B-B1AD-41949035E084"), version] */
                        MIDL_INTERFACE("8596BEDD-D7F7-4C6B-B1AD-41949035E084")
                        ICanvasImageSourceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateWithSize(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                                /* [in] */ABI::Windows::Foundation::Size size,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource * * imageSource
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                                /* [in] */float width,
                                /* [in] */float height,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource * * imageSource
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                                /* [in] */float width,
                                /* [in] */float height,
                                /* [in] */float dpi,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource * * imageSource
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndAlphaMode(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                                /* [in] */float width,
                                /* [in] */float height,
                                /* [in] */float dpi,
                                /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasImageSource * * imageSource
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasImageSourceFactory=_uuidof(ICanvasImageSourceFactory);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("3C35E87A-E881-4F44-B0D1-551413AEC66D"), version] */
                        MIDL_INTERFACE("3C35E87A-E881-4F44-B0D1-551413AEC66D")
                        ICanvasImageSource : public IInspectable
                        {
                        public:
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                                /* [in] */ABI::Windows::UI::Color clearColor,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateDrawingSessionWithUpdateRectangle(
                                /* [in] */ABI::Windows::UI::Color clearColor,
                                /* [in] */ABI::Windows::Foundation::Rect updateRectangle,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Recreate(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                                /* [retval, out] */ABI::Windows::Foundation::Size * size
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SizeInPixels(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::BitmapSize * size
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasImageSource=_uuidof(ICanvasImageSource);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSwapChainRotation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [version] */
                typedef /* [v1_enum] */
                MIDL_ENUM CanvasSwapChainRotation : int
                {
                    None,
                    Rotate90,
                    Rotate180,
                    Rotate270,
                } CanvasSwapChainRotation;
                const CanvasSwapChainRotation CanvasSwapChainRotation_None = CanvasSwapChainRotation::None;
                const CanvasSwapChainRotation CanvasSwapChainRotation_Rotate90 = CanvasSwapChainRotation::Rotate90;
                const CanvasSwapChainRotation CanvasSwapChainRotation_Rotate180 = CanvasSwapChainRotation::Rotate180;
                const CanvasSwapChainRotation CanvasSwapChainRotation_Rotate270 = CanvasSwapChainRotation::Rotate270;
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasSwapChain;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSwapChainFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("133C25CB-ED3C-492B-BFFE-7509B521842B"), version] */
                MIDL_INTERFACE("133C25CB-ED3C-492B-BFFE-7509B521842B")
                ICanvasSwapChainFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateWithSize(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                        /* [in] */ABI::Windows::Foundation::Size size,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * * swapChain
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                        /* [in] */float width,
                        /* [in] */float height,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * * swapChain
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */float width,
                        /* [in] */float height,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * * swapChain
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateWithAllOptions(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */float width,
                        /* [in] */float height,
                        /* [in] */float dpi,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [in] */INT32 bufferCount,
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * * swapChain
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasSwapChainFactory=_uuidof(ICanvasSwapChainFactory);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSwapChainStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainStatics[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("05376D8F-3E8D-4A82-9838-691680D32A52"), version] */
                MIDL_INTERFACE("05376D8F-3E8D-4A82-9838-691680D32A52")
                ICanvasSwapChainStatics : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateForCoreWindowWithDpi(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::UI::Core::ICoreWindow * coreWindow,
                        /* [in] */float dpi,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * * swapChain
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateForCoreWindowWithAllOptions(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [in] */ABI::Windows::UI::Core::ICoreWindow * coreWindow,
                        /* [in] */float width,
                        /* [in] */float height,
                        /* [in] */float dpi,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                        /* [in] */INT32 bufferCount,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * * swapChain
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasSwapChainStatics=_uuidof(ICanvasSwapChainStatics);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSwapChain
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChain[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChain";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("882E3C3A-5725-409C-9E76-F80B3BACF1B4"), version] */
                MIDL_INTERFACE("882E3C3A-5725-409C-9E76-F80B3BACF1B4")
                ICanvasSwapChain : public IInspectable
                {
                public:
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE Present(void) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE PresentWithSyncInterval(
                        /* [in] */INT32 syncInterval
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithSize(
                        /* [in] */ABI::Windows::Foundation::Size newSize
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithWidthAndHeight(
                        /* [in] */float newWidth,
                        /* [in] */float newHeight
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithWidthAndHeightAndDpi(
                        /* [in] */float newWidth,
                        /* [in] */float newHeight,
                        /* [in] */float newDpi
                        ) = 0;
                    /* [overload] */virtual HRESULT STDMETHODCALLTYPE ResizeBuffersWithAllOptions(
                        /* [in] */float newWidth,
                        /* [in] */float newHeight,
                        /* [in] */float newDpi,
                        /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat newFormat,
                        /* [in] */INT32 bufferCount
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                        /* [retval, out] */ABI::Windows::Foundation::Size * size
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SizeInPixels(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::BitmapSize * size
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Format(
                        /* [retval, out] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BufferCount(
                        /* [retval, out] */INT32 * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Rotation(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasSwapChainRotation * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Rotation(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasSwapChainRotation value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceSize(
                        /* [retval, out] */ABI::Windows::Foundation::Size * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceSize(
                        /* [in] */ABI::Windows::Foundation::Size value
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TransformMatrix(
                        /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix3x2 * value
                        ) = 0;
                    /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TransformMatrix(
                        /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 value
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                        /* [in] */ABI::Windows::UI::Color clearColor,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                        ) = 0;
                    virtual HRESULT STDMETHODCALLTYPE WaitForVerticalBlank(void) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasSwapChain=_uuidof(ICanvasSwapChain);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasSwapChain ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasSwapChain[] = L"Microsoft.Graphics.Canvas.CanvasSwapChain";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                class CanvasCommandList;
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasCommandListFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasCommandList
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandListFactory[] = L"Microsoft.Graphics.Canvas.ICanvasCommandListFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("B3D44E68-D931-4B5B-B957-0888980A7D50"), version] */
                MIDL_INTERFACE("B3D44E68-D931-4B5B-B957-0888980A7D50")
                ICanvasCommandListFactory : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE Create(
                        /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasCommandList * * commandList
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasCommandListFactory=_uuidof(ICanvasCommandListFactory);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasCommandList
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasCommandList
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandList[] = L"Microsoft.Graphics.Canvas.ICanvasCommandList";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                /* [object, exclusiveto, uuid("B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B"), version] */
                MIDL_INTERFACE("B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B")
                ICanvasCommandList : public IInspectable
                {
                public:
                    virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                        ) = 0;
                    /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                        /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                        ) = 0;
                    
                };

                MIDL_CONST_ID IID & IID_ICanvasCommandList=_uuidof(ICanvasCommandList);
                
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasCommandList
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasCommandList ** Default Interface **
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasCommandList[] = L"Microsoft.Graphics.Canvas.CanvasCommandList";
#endif






namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    class CanvasPrintDeferral;
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    /* [object, exclusiveto, uuid("A201AF1E-CE4A-401D-A719-2BF004D5C26A"), version] */
                    MIDL_INTERFACE("A201AF1E-CE4A-401D-A719-2BF004D5C26A")
                    ICanvasPrintDocumentFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateWithDevice(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * device,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDocument * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPrintDocumentFactory=_uuidof(ICanvasPrintDocumentFactory);
                    
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *     Windows.Graphics.Printing.IPrintDocumentSource
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    /* [object, exclusiveto, uuid("0A99CDEE-BF11-49D0-AA34-3BA5C32C51A5"), version] */
                    MIDL_INTERFACE("0A99CDEE-BF11-49D0-AA34-3BA5C32C51A5")
                    ICanvasPrintDocument : public IInspectable
                    {
                    public:
                        /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_PrintTaskOptionsChanged(
                            /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * value,
                            /* [retval, out] */EventRegistrationToken * token
                            ) = 0;
                        /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_PrintTaskOptionsChanged(
                            /* [in] */EventRegistrationToken token
                            ) = 0;
                        /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_Preview(
                            /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * value,
                            /* [retval, out] */EventRegistrationToken * token
                            ) = 0;
                        /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_Preview(
                            /* [in] */EventRegistrationToken token
                            ) = 0;
                        /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_Print(
                            /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * value,
                            /* [retval, out] */EventRegistrationToken * token
                            ) = 0;
                        /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_Print(
                            /* [in] */EventRegistrationToken token
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE InvalidatePreview(void) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetPageCount(
                            /* [in] */UINT32 count
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE SetIntermediatePageCount(
                            /* [in] */UINT32 count
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPrintDocument=_uuidof(ICanvasPrintDocument);
                    
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    /* [object, exclusiveto, uuid("F92089BA-6C99-4CAC-B28A-B5DCEC7A310D"), version] */
                    MIDL_INTERFACE("F92089BA-6C99-4CAC-B28A-B5DCEC7A310D")
                    ICanvasPrintTaskOptionsChangedEventArgs : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CurrentPreviewPageNumber(
                            /* [retval, out] */UINT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_NewPreviewPageNumber(
                            /* [in] */UINT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_NewPreviewPageNumber(
                            /* [retval, out] */UINT32 * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PrintTaskOptions(
                            /* [retval, out] */ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPrintTaskOptionsChangedEventArgs=_uuidof(ICanvasPrintTaskOptionsChangedEventArgs);
                    
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    /* [object, exclusiveto, uuid("0A6A80A0-B07D-4DB2-BDEB-0368BB18C0F8"), version] */
                    MIDL_INTERFACE("0A6A80A0-B07D-4DB2-BDEB-0368BB18C0F8")
                    ICanvasPreviewEventArgs : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PageNumber(
                            /* [retval, out] */UINT32 * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PrintTaskOptions(
                            /* [retval, out] */ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DrawingSession(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPreviewEventArgs=_uuidof(ICanvasPreviewEventArgs);
                    
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    /* [object, exclusiveto, uuid("0C6148C4-0216-4561-A817-34C8942AAC8B"), version] */
                    MIDL_INTERFACE("0C6148C4-0216-4561-A817-34C8942AAC8B")
                    ICanvasPrintEventArgs : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PrintTaskOptions(
                            /* [retval, out] */ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Dpi(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Dpi(
                            /* [in] */float value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetDeferral(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Printing::ICanvasPrintDeferral * * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPrintEventArgs=_uuidof(ICanvasPrintEventArgs);
                    
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDeferral[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Printing {
                    /* [object, exclusiveto, uuid("08CA99A2-5801-4EA4-8687-896CBDA69A47"), version] */
                    MIDL_INTERFACE("08CA99A2-5801-4EA4-8687-896CBDA69A47")
                    ICanvasPrintDeferral : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Complete(void) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasPrintDeferral=_uuidof(ICanvasPrintDeferral);
                    
                } /* Printing */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.UI.CanvasTimingInformation
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    /* [version] */
                    typedef 
                    struct CanvasTimingInformation
                    {
                        INT64 UpdateCount;
                        ABI::Windows::Foundation::TimeSpan TotalTime;
                        ABI::Windows::Foundation::TimeSpan ElapsedTime;
                        ::boolean IsRunningSlowly;
                    } CanvasTimingInformation;
                    
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */





/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("766F4867-B22A-464B-89B1-0DA6AB62BE68"), version] */
                        MIDL_INTERFACE("766F4867-B22A-464B-89B1-0DA6AB62BE68")
                        ICanvasAnimatedUpdateEventArgsFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation timingInformation,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedUpdateEventArgs * * updateEventArgs
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasAnimatedUpdateEventArgsFactory=_uuidof(ICanvasAnimatedUpdateEventArgsFactory);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("A96B2B2A-0C6E-4AA8-925B-7137263B4E44"), version] */
                        MIDL_INTERFACE("A96B2B2A-0C6E-4AA8-925B-7137263B4E44")
                        ICanvasAnimatedUpdateEventArgs : public IInspectable
                        {
                        public:
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Timing(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation * value
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasAnimatedUpdateEventArgs=_uuidof(ICanvasAnimatedUpdateEventArgs);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2"), version] */
                        MIDL_INTERFACE("C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2")
                        ICanvasAnimatedDrawEventArgsFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * canvasDrawingSession,
                                /* [in] */ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation timingInformation,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasAnimatedDrawEventArgs * * animatedControlDrawEventArgs
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasAnimatedDrawEventArgsFactory=_uuidof(ICanvasAnimatedDrawEventArgsFactory);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F"), version] */
                        MIDL_INTERFACE("BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F")
                        ICanvasAnimatedDrawEventArgs : public IInspectable
                        {
                        public:
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DrawingSession(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Timing(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::CanvasTimingInformation * value
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasAnimatedDrawEventArgs=_uuidof(ICanvasAnimatedDrawEventArgs);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, uuid("9BD47D0D-D57D-43B7-82CB-489CC566E887"), version] */
                        MIDL_INTERFACE("9BD47D0D-D57D-43B7-82CB-489CC566E887")
                        ICanvasAnimatedControl : public IInspectable
                        {
                        public:
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_CreateResources(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_CreateResources(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_Update(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_Update(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_Draw(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_Draw(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_GameLoopStarting(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_GameLoopStarting(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_GameLoopStopped(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_GameLoopStopped(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ReadyToDraw(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_IsFixedTimeStep(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsFixedTimeStep(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TargetElapsedTime(
                                /* [in] */ABI::Windows::Foundation::TimeSpan value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TargetElapsedTime(
                                /* [retval, out] */ABI::Windows::Foundation::TimeSpan * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Paused(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Paused(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClearColor(
                                /* [in] */ABI::Windows::UI::Color value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClearColor(
                                /* [retval, out] */ABI::Windows::UI::Color * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                                /* [retval, out] */ABI::Windows::Foundation::Size * value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Invalidate(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE ResetElapsedTime(void) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateCoreIndependentInputSource(
                                /* [in] */ABI::Windows::UI::Core::CoreInputDeviceTypes deviceTypes,
                                /* [retval, out] */ABI::Windows::UI::Core::ICoreInputSourceBase * * returnValue
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree(void) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HasGameLoopThreadAccess(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RunOnGameLoopThreadAsync(
                                /* [in] */ABI::Windows::UI::Core::IDispatchedHandler  * agileCallback,
                                /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * asyncAction
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_UseSharedDevice(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_UseSharedDevice(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CustomDevice(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CustomDevice(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DpiScale(
                                /* [retval, out] */float * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DpiScale(
                                /* [in] */float ratio
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasAnimatedControl=_uuidof(ICanvasAnimatedControl);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM CanvasCreateResourcesReason : int
                    {
                        FirstTime,
                        NewDevice,
                        DpiChanged,
                    } CanvasCreateResourcesReason;
                    const CanvasCreateResourcesReason CanvasCreateResourcesReason_FirstTime = CanvasCreateResourcesReason::FirstTime;
                    const CanvasCreateResourcesReason CanvasCreateResourcesReason_NewDevice = CanvasCreateResourcesReason::NewDevice;
                    const CanvasCreateResourcesReason CanvasCreateResourcesReason_DpiChanged = CanvasCreateResourcesReason::DpiChanged;
                    
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    /* [object, exclusiveto, uuid("3A21C766-0781-4389-BBC3-86B1F5022AF1"), version] */
                    MIDL_INTERFACE("3A21C766-0781-4389-BBC3-86B1F5022AF1")
                    ICanvasCreateResourcesEventArgsFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason createResourcesReason,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::ICanvasCreateResourcesEventArgs * * CreateResourcesEventArgs
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasCreateResourcesEventArgsFactory=_uuidof(ICanvasCreateResourcesEventArgsFactory);
                    
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    /* [object, exclusiveto, uuid("EDC52108-F6BA-4A09-9FA3-10C97A24E49A"), version] */
                    MIDL_INTERFACE("EDC52108-F6BA-4A09-9FA3-10C97A24E49A")
                    ICanvasCreateResourcesEventArgs : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Reason(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::CanvasCreateResourcesReason * value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE TrackAsyncAction(
                            /* [in] */ABI::Windows::Foundation::IAsyncAction * action
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE GetTrackedAction(
                            /* [retval, out] */ABI::Windows::Foundation::IAsyncAction * * action
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICanvasCreateResourcesEventArgs=_uuidof(ICanvasCreateResourcesEventArgs);
                    
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs";
#endif





/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44"), version] */
                        MIDL_INTERFACE("7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44")
                        ICanvasDrawEventArgsFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE Create(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * canvasDrawingSession,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasDrawEventArgs * * drawEventArgs
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasDrawEventArgsFactory=_uuidof(ICanvasDrawEventArgsFactory);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("FB86169F-25D4-4551-BD8F-214BEAF0AC24"), version] */
                        MIDL_INTERFACE("FB86169F-25D4-4551-BD8F-214BEAF0AC24")
                        ICanvasDrawEventArgs : public IInspectable
                        {
                        public:
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DrawingSession(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * value
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasDrawEventArgs=_uuidof(ICanvasDrawEventArgs);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("F006E06D-79DB-484F-B898-479CF069C0F5"), version] */
                        MIDL_INTERFACE("F006E06D-79DB-484F-B898-479CF069C0F5")
                        ICanvasControl : public IInspectable
                        {
                        public:
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_CreateResources(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_CreateResources(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ReadyToDraw(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_Draw(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_Draw(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClearColor(
                                /* [in] */ABI::Windows::UI::Color value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClearColor(
                                /* [retval, out] */ABI::Windows::UI::Color * value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Invalidate(void) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                                /* [retval, out] */ABI::Windows::Foundation::Size * size
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree(void) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_UseSharedDevice(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_UseSharedDevice(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CustomDevice(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CustomDevice(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DpiScale(
                                /* [retval, out] */float * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DpiScale(
                                /* [in] */float ratio
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasControl=_uuidof(ICanvasControl);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        class CanvasSwapChainPanel;
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("DBDCCB96-147E-4A82-AF3A-C91C7800DAA7"), version] */
                        MIDL_INTERFACE("DBDCCB96-147E-4A82-AF3A-C91C7800DAA7")
                        ICanvasSwapChainPanel : public IInspectable
                        {
                        public:
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SwapChain(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SwapChain(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * * value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree(void) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasSwapChainPanel=_uuidof(ICanvasSwapChainPanel);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel";
#endif





/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("2FE755A1-307A-4623-9250-29590485BDB6"), version] */
                        MIDL_INTERFACE("2FE755A1-307A-4623-9250-29590485BDB6")
                        ICanvasVirtualImageSourceFactory : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateWithSize(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                                /* [in] */ABI::Windows::Foundation::Size size,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource * * imageSource
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeight(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreatorWithDpi * resourceCreator,
                                /* [in] */float width,
                                /* [in] */float height,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource * * imageSource
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpi(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                                /* [in] */float width,
                                /* [in] */float height,
                                /* [in] */float dpi,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource * * imageSource
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateWithWidthAndHeightAndDpiAndAlphaMode(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                                /* [in] */float width,
                                /* [in] */float height,
                                /* [in] */float dpi,
                                /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode alphaMode,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::UI::Xaml::ICanvasVirtualImageSource * * imageSource
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasVirtualImageSourceFactory=_uuidof(ICanvasVirtualImageSourceFactory);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE"), version] */
                        MIDL_INTERFACE("DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE")
                        ICanvasVirtualImageSource : public IInspectable
                        {
                        public:
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                                /* [retval, out] */ABI::Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource * * value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                                /* [in] */ABI::Windows::UI::Color clearColor,
                                /* [in] */ABI::Windows::Foundation::Rect updateRectangle,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE SuspendDrawingSession(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * drawingSession
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE ResumeDrawingSession(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * drawingSession
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE Invalidate(void) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE InvalidateRegion(
                                /* [in] */ABI::Windows::Foundation::Rect region
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RaiseRegionsInvalidatedIfAny(void) = 0;
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_RegionsInvalidated(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_RegionsInvalidated(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE ResizeWithSize(
                                /* [in] */ABI::Windows::Foundation::Size size
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE ResizeWithWidthAndHeight(
                                /* [in] */float width,
                                /* [in] */float height
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE ResizeWithWidthAndHeightAndDpi(
                                /* [in] */float width,
                                /* [in] */float height,
                                /* [in] */float dpi
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Recreate(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                                /* [retval, out] */ABI::Windows::Foundation::Size * size
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SizeInPixels(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::BitmapSize * size
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasVirtualImageSource=_uuidof(ICanvasVirtualImageSource);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, uuid("3A21A204-F52F-4E7A-9B3F-94669819D981"), exclusiveto, version] */
                        MIDL_INTERFACE("3A21A204-F52F-4E7A-9B3F-94669819D981")
                        ICanvasRegionsInvalidatedEventArgs : public IInspectable
                        {
                        public:
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InvalidatedRegions(
                                /* [out] */UINT32 * count,
                                /* [retval, size_is(, *(count)), out] */ABI::Windows::Foundation::Rect * * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_VisibleRegion(
                                /* [retval, out] */ABI::Windows::Foundation::Rect * value
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasRegionsInvalidatedEventArgs=_uuidof(ICanvasRegionsInvalidatedEventArgs);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Xaml {
                        /* [object, exclusiveto, uuid("3C2B5177-7C61-41D2-95AE-FCFC92FD617A"), version] */
                        MIDL_INTERFACE("3C2B5177-7C61-41D2-95AE-FCFC92FD617A")
                        ICanvasVirtualControl : public IInspectable
                        {
                        public:
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_CreateResources(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_CreateResources(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ReadyToDraw(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [eventadd] */virtual HRESULT STDMETHODCALLTYPE add_RegionsInvalidated(
                                /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * value,
                                /* [retval, out] */EventRegistrationToken * token
                                ) = 0;
                            /* [eventremove] */virtual HRESULT STDMETHODCALLTYPE remove_RegionsInvalidated(
                                /* [in] */EventRegistrationToken token
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClearColor(
                                /* [in] */ABI::Windows::UI::Color value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClearColor(
                                /* [retval, out] */ABI::Windows::UI::Color * value
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                                /* [in] */ABI::Windows::Foundation::Rect updateRectangle,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE SuspendDrawingSession(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * drawingSession
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE ResumeDrawingSession(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * drawingSession
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE Invalidate(void) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE InvalidateRegion(
                                /* [in] */ABI::Windows::Foundation::Rect region
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                                /* [retval, out] */ABI::Windows::Foundation::Size * size
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE RemoveFromVisualTree(void) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_UseSharedDevice(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_UseSharedDevice(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ForceSoftwareRenderer(
                                /* [retval, out] */::boolean * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ForceSoftwareRenderer(
                                /* [in] */::boolean value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CustomDevice(
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CustomDevice(
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * value
                                ) = 0;
                            /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DpiScale(
                                /* [retval, out] */float * value
                                ) = 0;
                            /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DpiScale(
                                /* [in] */float ratio
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasVirtualControl=_uuidof(ICanvasVirtualControl);
                        
                    } /* Xaml */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics[] = L"Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace UI {
                    namespace Composition {
                        /* [object, exclusiveto, uuid("162DEB43-1CF5-46F8-A0AF-356B23158F92"), version] */
                        MIDL_INTERFACE("162DEB43-1CF5-46F8-A0AF-356B23158F92")
                        ICanvasCompositionStatics : public IInspectable
                        {
                        public:
                            virtual HRESULT STDMETHODCALLTYPE CreateCompositionGraphicsDevice(
                                /* [in] */ABI::Windows::UI::Composition::ICompositor * compositor,
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * canvasDevice,
                                /* [retval, out] */ABI::Windows::UI::Composition::ICompositionGraphicsDevice * * graphicsDevice
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE CreateCompositionSurfaceForSwapChain(
                                /* [in] */ABI::Windows::UI::Composition::ICompositor * compositor,
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasSwapChain * swapChain,
                                /* [retval, out] */ABI::Windows::UI::Composition::ICompositionSurface * * compositionSurface
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE GetCanvasDevice(
                                /* [in] */ABI::Windows::UI::Composition::ICompositionGraphicsDevice * graphicsDevice,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * canvasDevice
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE SetCanvasDevice(
                                /* [in] */ABI::Windows::UI::Composition::ICompositionGraphicsDevice * graphicsDevice,
                                /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * canvasDevice
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateDrawingSession(
                                /* [in] */ABI::Windows::UI::Composition::ICompositionDrawingSurface * drawingSurface,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateDrawingSessionWithUpdateRect(
                                /* [in] */ABI::Windows::UI::Composition::ICompositionDrawingSurface * drawingSurface,
                                /* [in] */ABI::Windows::Foundation::Rect updateRect,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                                ) = 0;
                            /* [overload] */virtual HRESULT STDMETHODCALLTYPE CreateDrawingSessionWithUpdateRectAndDpi(
                                /* [in] */ABI::Windows::UI::Composition::ICompositionDrawingSurface * drawingSurface,
                                /* [in] */ABI::Windows::Foundation::Rect updateRectInPixels,
                                /* [in] */float dpi,
                                /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDrawingSession * * drawingSession
                                ) = 0;
                            virtual HRESULT STDMETHODCALLTYPE Resize(
                                /* [in] */ABI::Windows::UI::Composition::ICompositionDrawingSurface * drawingSurface,
                                /* [in] */ABI::Windows::Foundation::Size sizeInPixels
                                ) = 0;
                            
                        };

                        MIDL_CONST_ID IID & IID_ICanvasCompositionStatics=_uuidof(ICanvasCompositionStatics);
                        
                    } /* Composition */
                } /* UI */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition
 *
 * RuntimeClass contains static methods.
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition[] = L"Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class PixelShaderEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM SamplerCoordinateMapping : int
                    {
                        Unknown,
                        OneToOne,
                        Offset,
                    } SamplerCoordinateMapping;
                    const SamplerCoordinateMapping SamplerCoordinateMapping_Unknown = SamplerCoordinateMapping::Unknown;
                    const SamplerCoordinateMapping SamplerCoordinateMapping_OneToOne = SamplerCoordinateMapping::OneToOne;
                    const SamplerCoordinateMapping SamplerCoordinateMapping_Offset = SamplerCoordinateMapping::Offset;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PixelShaderEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("FC8C3C31-FA96-45E2-8B72-1741C65CEE8E"), version] */
                    MIDL_INTERFACE("FC8C3C31-FA96-45E2-8B72-1741C65CEE8E")
                    IPixelShaderEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Properties(
                            /* [retval, out] */__FIMap_2_HSTRING_IInspectable * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source1(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source2(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source3(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source4(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source5(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source6(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source7(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source8(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source1(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source2(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source3(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source4(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source5(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source6(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source7(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source8(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source1Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source2Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source3Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source4Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source5Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source6Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source7Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source8Mapping(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source1Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source2Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source3Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source4Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source5Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source6Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source7Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source8Mapping(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::SamplerCoordinateMapping value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source1BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source2BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source3BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source4BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source5BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source6BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source7BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source8BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source1BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source2BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source3BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source4BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source5BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source6BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source7BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source8BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MaxSamplerOffset(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_MaxSamplerOffset(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source1Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source2Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source3Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source4Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source5Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source6Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source7Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source8Interpolation(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source1Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source2Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source3Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source4Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source5Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source6Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source7Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source8Interpolation(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE IsSupported(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * device,
                            /* [retval, out] */::boolean * result
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IPixelShaderEffect=_uuidof(IPixelShaderEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PixelShaderEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory[] = L"Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("9D1727E5-489D-4ABC-B129-5361E3534AF4"), version] */
                    MIDL_INTERFACE("9D1727E5-489D-4ABC-B129-5361E3534AF4")
                    IPixelShaderEffectFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */UINT32 shaderCodeCount,
                            /* [size_is(shaderCodeCount), in] */BYTE * shaderCode,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IPixelShaderEffect * * effect
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IPixelShaderEffectFactory=_uuidof(IPixelShaderEffectFactory);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PixelShaderEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect ** Default Interface **
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect[] = L"Microsoft.Graphics.Canvas.Effects.PixelShaderEffect";
#endif



namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ColorManagementProfile;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM ColorManagementProfileType : int
                    {
                        Icc = 0,
                        Simple = 1,
                        Extended = 2,
                    } ColorManagementProfileType;
                    const ColorManagementProfileType ColorManagementProfileType_Icc = ColorManagementProfileType::Icc;
                    const ColorManagementProfileType ColorManagementProfileType_Simple = ColorManagementProfileType::Simple;
                    const ColorManagementProfileType ColorManagementProfileType_Extended = ColorManagementProfileType::Extended;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementGamma
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM ColorManagementGamma : int
                    {
                        G22 = 0,
                        G10 = 1,
                        G2084 = 2,
                    } ColorManagementGamma;
                    const ColorManagementGamma ColorManagementGamma_G22 = ColorManagementGamma::G22;
                    const ColorManagementGamma ColorManagementGamma_G10 = ColorManagementGamma::G10;
                    const ColorManagementGamma ColorManagementGamma_G2084 = ColorManagementGamma::G2084;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef 
                    struct ColorManagementSimpleProfile
                    {
                        ABI::Windows::Foundation::Numerics::Vector2 RedPrimary;
                        ABI::Windows::Foundation::Numerics::Vector2 GreenPrimary;
                        ABI::Windows::Foundation::Numerics::Vector2 BluePrimary;
                        ABI::Windows::Foundation::Numerics::Vector2 WhitePointXZ;
                        ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementGamma Gamma;
                    } ColorManagementSimpleProfile;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM ExtendedColorSpace : int
                    {
                        FullG22P709 = 0,
                        FullG10P709 = 1,
                        StudioG22P709 = 2,
                        StudioG22P2020 = 3,
                        FullG2084P2020 = 12,
                        StudioG2084P2020 = 14,
                        FullG22P2020 = 17,
                        Custom = -1,
                    } ExtendedColorSpace;
                    const ExtendedColorSpace ExtendedColorSpace_FullG22P709 = ExtendedColorSpace::FullG22P709;
                    const ExtendedColorSpace ExtendedColorSpace_FullG10P709 = ExtendedColorSpace::FullG10P709;
                    const ExtendedColorSpace ExtendedColorSpace_StudioG22P709 = ExtendedColorSpace::StudioG22P709;
                    const ExtendedColorSpace ExtendedColorSpace_StudioG22P2020 = ExtendedColorSpace::StudioG22P2020;
                    const ExtendedColorSpace ExtendedColorSpace_FullG2084P2020 = ExtendedColorSpace::FullG2084P2020;
                    const ExtendedColorSpace ExtendedColorSpace_StudioG2084P2020 = ExtendedColorSpace::StudioG2084P2020;
                    const ExtendedColorSpace ExtendedColorSpace_FullG22P2020 = ExtendedColorSpace::FullG22P2020;
                    const ExtendedColorSpace ExtendedColorSpace_Custom = ExtendedColorSpace::Custom;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfile
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfile";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("5123A56B-B199-47AB-AEBE-D308044423FE"), version] */
                    MIDL_INTERFACE("5123A56B-B199-47AB-AEBE-D308044423FE")
                    IColorManagementProfile : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ColorSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IccProfile(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Type(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SimpleProfile(
                            /* [retval, out] */__FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ExtendedColorSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IColorManagementProfile=_uuidof(IColorManagementProfile);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("7A0F1C98-94C6-4621-9877-C51A17823EDF"), version] */
                    MIDL_INTERFACE("7A0F1C98-94C6-4621-9877-C51A17823EDF")
                    IColorManagementProfileFactory : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE Create(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasColorSpace colorSpace,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * * result
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IColorManagementProfileFactory=_uuidof(IColorManagementProfileFactory);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("94EEF610-03BD-4E82-9479-62A616BE75F1"), version] */
                    MIDL_INTERFACE("94EEF610-03BD-4E82-9479-62A616BE75F1")
                    IColorManagementProfileStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateCustom(
                            /* [in] */UINT32 iccProfileCount,
                            /* [size_is(iccProfileCount), in] */BYTE * iccProfile,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * * result
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateSimple(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementSimpleProfile simpleProfile,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * * result
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateExtended(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::ExtendedColorSpace colorSpace,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * * result
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE IsSupported(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementProfileType type,
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * device,
                            /* [retval, out] */::boolean * result
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IColorManagementProfileStatics=_uuidof(IColorManagementProfileStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorManagementProfile ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile[] = L"Microsoft.Graphics.Canvas.Effects.ColorManagementProfile";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class EffectTransferTable3D;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3D[] = L"Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("7AF06B86-2C45-49C8-8F44-E15A6D4FA44E"), version] */
                    MIDL_INTERFACE("7AF06B86-2C45-49C8-8F44-E15A6D4FA44E")
                    IEffectTransferTable3D : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Device(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::ICanvasDevice * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IEffectTransferTable3D=_uuidof(IEffectTransferTable3D);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics[] = L"Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("3CB83559-216A-4BCA-9BB6-E233C5AD2C48"), version] */
                    MIDL_INTERFACE("3CB83559-216A-4BCA-9BB6-E233C5AD2C48")
                    IEffectTransferTable3DStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE CreateFromColors(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 colorCount,
                            /* [size_is(colorCount), in] */ABI::Windows::UI::Color * colors,
                            /* [in] */INT32 sizeB,
                            /* [in] */INT32 sizeG,
                            /* [in] */INT32 sizeR,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D * * result
                            ) = 0;
                        virtual HRESULT STDMETHODCALLTYPE CreateFromBytes(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::ICanvasResourceCreator * resourceCreator,
                            /* [in] */UINT32 byteCount,
                            /* [size_is(byteCount), in] */BYTE * bytes,
                            /* [in] */INT32 sizeB,
                            /* [in] */INT32 sizeG,
                            /* [in] */INT32 sizeR,
                            /* [in] */ABI::Windows::Graphics::DirectX::DirectXPixelFormat format,
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D * * result
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IEffectTransferTable3DStatics=_uuidof(IEffectTransferTable3DStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D[] = L"Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class AlphaMaskEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect[] = L"Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("9BA6607E-75C9-5388-892F-DD3440564D98"), version] */
                    MIDL_INTERFACE("9BA6607E-75C9-5388-892F-DD3440564D98")
                    IAlphaMaskEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMask(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaMask(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IAlphaMaskEffect=_uuidof(IAlphaMaskEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("CC31105C-0377-5708-8484-1AD8EE3E554B"), version] */
                    MIDL_INTERFACE("CC31105C-0377-5708-8484-1AD8EE3E554B")
                    IAlphaMaskEffectStatics : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsSupported(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IAlphaMaskEffectStatics=_uuidof(IAlphaMaskEffectStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect[] = L"Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ArithmeticCompositeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("BEEB682B-D64C-5C8B-A1FB-332162ED099C"), version] */
                    MIDL_INTERFACE("BEEB682B-D64C-5C8B-A1FB-332162ED099C")
                    IArithmeticCompositeEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MultiplyAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_MultiplyAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source1Amount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source1Amount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source2Amount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source2Amount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Offset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Offset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source1(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source1(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source2(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source2(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IArithmeticCompositeEffect=_uuidof(IArithmeticCompositeEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class AtlasEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IAtlasEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.AtlasEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.IAtlasEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD"), version] */
                    MIDL_INTERFACE("F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD")
                    IAtlasEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceRectangle(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceRectangle(
                            /* [in] */ABI::Windows::Foundation::Rect value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PaddingRectangle(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_PaddingRectangle(
                            /* [in] */ABI::Windows::Foundation::Rect value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IAtlasEffect=_uuidof(IAtlasEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.AtlasEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IAtlasEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_AtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.AtlasEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.BlendEffectMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM BlendEffectMode : int
                    {
                        Multiply = 0,
                        Screen = 1,
                        Darken = 2,
                        Lighten = 3,
                        Dissolve = 4,
                        ColorBurn = 5,
                        LinearBurn = 6,
                        DarkerColor = 7,
                        LighterColor = 8,
                        ColorDodge = 9,
                        LinearDodge = 10,
                        Overlay = 11,
                        SoftLight = 12,
                        HardLight = 13,
                        VividLight = 14,
                        LinearLight = 15,
                        PinLight = 16,
                        HardMix = 17,
                        Difference = 18,
                        Exclusion = 19,
                        Hue = 20,
                        Saturation = 21,
                        Color = 22,
                        Luminosity = 23,
                        Subtract = 24,
                        Division = 25,
                    } BlendEffectMode;
                    const BlendEffectMode BlendEffectMode_Multiply = BlendEffectMode::Multiply;
                    const BlendEffectMode BlendEffectMode_Screen = BlendEffectMode::Screen;
                    const BlendEffectMode BlendEffectMode_Darken = BlendEffectMode::Darken;
                    const BlendEffectMode BlendEffectMode_Lighten = BlendEffectMode::Lighten;
                    const BlendEffectMode BlendEffectMode_Dissolve = BlendEffectMode::Dissolve;
                    const BlendEffectMode BlendEffectMode_ColorBurn = BlendEffectMode::ColorBurn;
                    const BlendEffectMode BlendEffectMode_LinearBurn = BlendEffectMode::LinearBurn;
                    const BlendEffectMode BlendEffectMode_DarkerColor = BlendEffectMode::DarkerColor;
                    const BlendEffectMode BlendEffectMode_LighterColor = BlendEffectMode::LighterColor;
                    const BlendEffectMode BlendEffectMode_ColorDodge = BlendEffectMode::ColorDodge;
                    const BlendEffectMode BlendEffectMode_LinearDodge = BlendEffectMode::LinearDodge;
                    const BlendEffectMode BlendEffectMode_Overlay = BlendEffectMode::Overlay;
                    const BlendEffectMode BlendEffectMode_SoftLight = BlendEffectMode::SoftLight;
                    const BlendEffectMode BlendEffectMode_HardLight = BlendEffectMode::HardLight;
                    const BlendEffectMode BlendEffectMode_VividLight = BlendEffectMode::VividLight;
                    const BlendEffectMode BlendEffectMode_LinearLight = BlendEffectMode::LinearLight;
                    const BlendEffectMode BlendEffectMode_PinLight = BlendEffectMode::PinLight;
                    const BlendEffectMode BlendEffectMode_HardMix = BlendEffectMode::HardMix;
                    const BlendEffectMode BlendEffectMode_Difference = BlendEffectMode::Difference;
                    const BlendEffectMode BlendEffectMode_Exclusion = BlendEffectMode::Exclusion;
                    const BlendEffectMode BlendEffectMode_Hue = BlendEffectMode::Hue;
                    const BlendEffectMode BlendEffectMode_Saturation = BlendEffectMode::Saturation;
                    const BlendEffectMode BlendEffectMode_Color = BlendEffectMode::Color;
                    const BlendEffectMode BlendEffectMode_Luminosity = BlendEffectMode::Luminosity;
                    const BlendEffectMode BlendEffectMode_Subtract = BlendEffectMode::Subtract;
                    const BlendEffectMode BlendEffectMode_Division = BlendEffectMode::Division;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class BlendEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IBlendEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.BlendEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBlendEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("5673248E-7266-5E49-B2AB-2589D5D875C3"), version] */
                    MIDL_INTERFACE("5673248E-7266-5E49-B2AB-2589D5D875C3")
                    IBlendEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Mode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::BlendEffectMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Mode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::BlendEffectMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Background(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Background(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Foreground(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Foreground(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IBlendEffect=_uuidof(IBlendEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.BlendEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IBlendEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.BlendEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class BorderEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IBorderEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.BorderEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBorderEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("31602441-15DB-5B4A-98DD-BA4247548B41"), version] */
                    MIDL_INTERFACE("31602441-15DB-5B4A-98DD-BA4247548B41")
                    IBorderEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ExtendX(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ExtendX(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ExtendY(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ExtendY(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasEdgeBehavior value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IBorderEffect=_uuidof(IBorderEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.BorderEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IBorderEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.BorderEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class BrightnessEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IBrightnessEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.BrightnessEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBrightnessEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("BECED347-025F-5727-8F7D-498D67DF557E"), version] */
                    MIDL_INTERFACE("BECED347-025F-5727-8F7D-498D67DF557E")
                    IBrightnessEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_WhitePoint(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_WhitePoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlackPoint(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlackPoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IBrightnessEffect=_uuidof(IBrightnessEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.BrightnessEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IBrightnessEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.BrightnessEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ChromaKeyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("F14B9464-1871-5EAA-9DB6-C0901140E9D3"), version] */
                    MIDL_INTERFACE("F14B9464-1871-5EAA-9DB6-C0901140E9D3")
                    IChromaKeyEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Color(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Color(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Tolerance(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Tolerance(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InvertAlpha(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InvertAlpha(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Feather(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Feather(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IChromaKeyEffect=_uuidof(IChromaKeyEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect[] = L"Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM ColorManagementEffectQuality : int
                    {
                        Proof = 0,
                        Normal = 1,
                        Best = 2,
                    } ColorManagementEffectQuality;
                    const ColorManagementEffectQuality ColorManagementEffectQuality_Proof = ColorManagementEffectQuality::Proof;
                    const ColorManagementEffectQuality ColorManagementEffectQuality_Normal = ColorManagementEffectQuality::Normal;
                    const ColorManagementEffectQuality ColorManagementEffectQuality_Best = ColorManagementEffectQuality::Best;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ColorManagementEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("6E8BBE37-E1E4-5AD0-B98D-940E3213A54E"), version] */
                    MIDL_INTERFACE("6E8BBE37-E1E4-5AD0-B98D-940E3213A54E")
                    IColorManagementEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceColorProfile(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceColorProfile(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceRenderingIntent(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceRenderingIntent(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OutputColorProfile(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OutputColorProfile(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::IColorManagementProfile * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OutputRenderingIntent(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OutputRenderingIntent(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementRenderingIntent value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Quality(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Quality(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::ColorManagementEffectQuality value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IColorManagementEffect=_uuidof(IColorManagementEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("31C7AF98-F2D4-55FC-B129-A70736E6DA05"), version] */
                    MIDL_INTERFACE("31C7AF98-F2D4-55FC-B129-A70736E6DA05")
                    IColorManagementEffectStatics : public IInspectable
                    {
                    public:
                        virtual HRESULT STDMETHODCALLTYPE IsBestQualitySupported(
                            ABI::Microsoft::Graphics::Canvas::ICanvasDevice * device,
                            /* [retval, out] */::boolean * result
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IColorManagementEffectStatics=_uuidof(IColorManagementEffectStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorManagementEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorManagementEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorManagementEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ColorMatrixEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("E6AE54C4-883D-588E-B451-E9EBE3830437"), version] */
                    MIDL_INTERFACE("E6AE54C4-883D-588E-B451-E9EBE3830437")
                    IColorMatrixEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ColorMatrix(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::Matrix5x4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ColorMatrix(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::Matrix5x4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IColorMatrixEffect=_uuidof(IColorMatrixEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ColorSourceEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorSourceEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorSourceEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorSourceEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("25F942C7-7FEE-518A-BA7B-22A0060AF7F6"), version] */
                    MIDL_INTERFACE("25F942C7-7FEE-518A-BA7B-22A0060AF7F6")
                    IColorSourceEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Color(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Color(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IColorSourceEffect=_uuidof(IColorSourceEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorSourceEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorSourceEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorSourceEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class CompositeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICompositeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CompositeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICompositeEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("F8808C48-CDC7-5DB4-807C-B9344FF71984"), version] */
                    MIDL_INTERFACE("F8808C48-CDC7-5DB4-807C-B9344FF71984")
                    ICompositeEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Mode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasComposite * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Mode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasComposite value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Sources(
                            /* [retval, out] */__FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICompositeEffect=_uuidof(ICompositeEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.CompositeEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ICompositeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.CompositeEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ContrastEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IContrastEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ContrastEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IContrastEffect[] = L"Microsoft.Graphics.Canvas.Effects.IContrastEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("DA8A2B9F-594E-560A-9EAA-1F912408FE79"), version] */
                    MIDL_INTERFACE("DA8A2B9F-594E-560A-9EAA-1F912408FE79")
                    IContrastEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Contrast(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Contrast(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampSource(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampSource(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IContrastEffect=_uuidof(IContrastEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ContrastEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IContrastEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ContrastEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ContrastEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ContrastEffect[] = L"Microsoft.Graphics.Canvas.Effects.ContrastEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ConvolveMatrixEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("82961257-A78D-5440-8026-AF57D4A76A9E"), version] */
                    MIDL_INTERFACE("82961257-A78D-5440-8026-AF57D4A76A9E")
                    IConvolveMatrixEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_KernelScale(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_KernelScale(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_KernelWidth(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_KernelWidth(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_KernelHeight(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_KernelHeight(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_KernelMatrix(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_KernelMatrix(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Divisor(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Divisor(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Offset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Offset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_KernelOffset(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_KernelOffset(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_PreserveAlpha(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_PreserveAlpha(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IConvolveMatrixEffect=_uuidof(IConvolveMatrixEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class CropEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICropEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CropEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICropEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICropEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE"), version] */
                    MIDL_INTERFACE("D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE")
                    ICropEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceRectangle(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceRectangle(
                            /* [in] */ABI::Windows::Foundation::Rect value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICropEffect=_uuidof(ICropEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.CropEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ICropEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CropEffect[] = L"Microsoft.Graphics.Canvas.Effects.CropEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class CrossFadeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CrossFadeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("BE161A9F-43D2-5613-8600-D51E3D7CE288"), version] */
                    MIDL_INTERFACE("BE161A9F-43D2-5613-8600-D51E3D7CE288")
                    ICrossFadeEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CrossFade(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CrossFade(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source2(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source2(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source1(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source1(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICrossFadeEffect=_uuidof(ICrossFadeEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CrossFadeEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("A3B67330-6284-5EF6-99E8-B4B05D2B8BFC"), version] */
                    MIDL_INTERFACE("A3B67330-6284-5EF6-99E8-B4B05D2B8BFC")
                    ICrossFadeEffectStatics : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsSupported(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ICrossFadeEffectStatics=_uuidof(ICrossFadeEffectStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.CrossFadeEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect[] = L"Microsoft.Graphics.Canvas.Effects.CrossFadeEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class DirectionalBlurEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("5D155C4B-0882-506A-A8E1-12E1EAD17F0A"), version] */
                    MIDL_INTERFACE("5D155C4B-0882-506A-A8E1-12E1EAD17F0A")
                    IDirectionalBlurEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlurAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlurAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Angle(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Angle(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Optimization(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Optimization(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IDirectionalBlurEffect=_uuidof(IDirectionalBlurEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class DiscreteTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("7F1F54F9-21B5-5B91-9506-832C536FDDFA"), version] */
                    MIDL_INTERFACE("7F1F54F9-21B5-5B91-9506-832C536FDDFA")
                    IDiscreteTransferEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IDiscreteTransferEffect=_uuidof(IDiscreteTransferEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class DisplacementMapEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("45F57C50-D4D9-5AF1-8A6B-50378F3498A2"), version] */
                    MIDL_INTERFACE("45F57C50-D4D9-5AF1-8A6B-50378F3498A2")
                    IDisplacementMapEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Amount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Amount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_XChannelSelect(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_XChannelSelect(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_YChannelSelect(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_YChannelSelect(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectChannelSelect value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Displacement(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Displacement(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IDisplacementMapEffect=_uuidof(IDisplacementMapEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class DistantDiffuseEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("D501B10B-B445-50F4-8B8F-CDECFCDD1321"), version] */
                    MIDL_INTERFACE("D501B10B-B445-50F4-8B8F-CDECFCDD1321")
                    IDistantDiffuseEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Azimuth(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Azimuth(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Elevation(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Elevation(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DiffuseAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DiffuseAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapScale(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapScale(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColor(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColor(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IDistantDiffuseEffect=_uuidof(IDistantDiffuseEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class DistantSpecularEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("A7A828DF-3072-545F-8D75-86C100F03231"), version] */
                    MIDL_INTERFACE("A7A828DF-3072-545F-8D75-86C100F03231")
                    IDistantSpecularEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Azimuth(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Azimuth(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Elevation(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Elevation(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SpecularExponent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SpecularExponent(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SpecularAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SpecularAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapScale(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapScale(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColor(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColor(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IDistantSpecularEffect=_uuidof(IDistantSpecularEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class DpiCompensationEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("636597CD-F94A-55B6-9CF0-694A53D638EA"), version] */
                    MIDL_INTERFACE("636597CD-F94A-55B6-9CF0-694A53D638EA")
                    IDpiCompensationEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceDpi(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceDpi(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IDpiCompensationEffect=_uuidof(IDpiCompensationEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM EdgeDetectionEffectMode : int
                    {
                        Sobel = 0,
                        Prewitt = 1,
                    } EdgeDetectionEffectMode;
                    const EdgeDetectionEffectMode EdgeDetectionEffectMode_Sobel = EdgeDetectionEffectMode::Sobel;
                    const EdgeDetectionEffectMode EdgeDetectionEffectMode_Prewitt = EdgeDetectionEffectMode::Prewitt;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class EdgeDetectionEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect[] = L"Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("69F6CF3A-F38F-5A88-974A-29390B957E5C"), version] */
                    MIDL_INTERFACE("69F6CF3A-F38F-5A88-974A-29390B957E5C")
                    IEdgeDetectionEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Amount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Amount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlurAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlurAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Mode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Mode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EdgeDetectionEffectMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OverlayEdges(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OverlayEdges(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IEdgeDetectionEffect=_uuidof(IEdgeDetectionEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect[] = L"Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class EmbossEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEmbossEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EmbossEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEmbossEffect[] = L"Microsoft.Graphics.Canvas.Effects.IEmbossEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("617BFF35-481C-5596-ABA5-00A162349D7B"), version] */
                    MIDL_INTERFACE("617BFF35-481C-5596-ABA5-00A162349D7B")
                    IEmbossEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Amount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Amount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Angle(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Angle(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IEmbossEffect=_uuidof(IEmbossEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.EmbossEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IEmbossEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EmbossEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EmbossEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EmbossEffect[] = L"Microsoft.Graphics.Canvas.Effects.EmbossEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ExposureEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IExposureEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ExposureEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IExposureEffect[] = L"Microsoft.Graphics.Canvas.Effects.IExposureEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("B9E20A03-2232-5FD3-B408-15784B79DBB0"), version] */
                    MIDL_INTERFACE("B9E20A03-2232-5FD3-B408-15784B79DBB0")
                    IExposureEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Exposure(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Exposure(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IExposureEffect=_uuidof(IExposureEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ExposureEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IExposureEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ExposureEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ExposureEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ExposureEffect[] = L"Microsoft.Graphics.Canvas.Effects.ExposureEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class GammaTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.GammaTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("B4576B6B-6C3E-534A-8576-D46DF4FCE93D"), version] */
                    MIDL_INTERFACE("B4576B6B-6C3E-534A-8576-D46DF4FCE93D")
                    IGammaTransferEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedAmplitude(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedAmplitude(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedExponent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedExponent(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenAmplitude(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenAmplitude(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenExponent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenExponent(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueAmplitude(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueAmplitude(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueExponent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueExponent(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaAmplitude(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaAmplitude(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaExponent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaExponent(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IGammaTransferEffect=_uuidof(IGammaTransferEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.GammaTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.GammaTransferEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class GaussianBlurEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("A82EC394-6734-5830-9123-2C82B27DD3C0"), version] */
                    MIDL_INTERFACE("A82EC394-6734-5830-9123-2C82B27DD3C0")
                    IGaussianBlurEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlurAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlurAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Optimization(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Optimization(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IGaussianBlurEffect=_uuidof(IGaussianBlurEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class GrayscaleEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.GrayscaleEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("78E13B83-0638-53F8-B0B3-5B0B320A9AD2"), version] */
                    MIDL_INTERFACE("78E13B83-0638-53F8-B0B3-5B0B320A9AD2")
                    IGrayscaleEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IGrayscaleEffect=_uuidof(IGrayscaleEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.GrayscaleEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.GrayscaleEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.HdrToneMapEffectDisplayMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM HdrToneMapEffectDisplayMode : int
                    {
                        Sdr = 0,
                        Hdr = 1,
                    } HdrToneMapEffectDisplayMode;
                    const HdrToneMapEffectDisplayMode HdrToneMapEffectDisplayMode_Sdr = HdrToneMapEffectDisplayMode::Sdr;
                    const HdrToneMapEffectDisplayMode HdrToneMapEffectDisplayMode_Hdr = HdrToneMapEffectDisplayMode::Hdr;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class HdrToneMapEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("2004FAAC-663E-5DF4-B4CD-A5AFBFD9341F"), version] */
                    MIDL_INTERFACE("2004FAAC-663E-5DF4-B4CD-A5AFBFD9341F")
                    IHdrToneMapEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InputMaxLuminance(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InputMaxLuminance(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OutputMaxLuminance(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OutputMaxLuminance(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DisplayMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::HdrToneMapEffectDisplayMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DisplayMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::HdrToneMapEffectDisplayMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IHdrToneMapEffect=_uuidof(IHdrToneMapEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("0181F02F-0A7E-55E1-8D2D-42AB99739B27"), version] */
                    MIDL_INTERFACE("0181F02F-0A7E-55E1-8D2D-42AB99739B27")
                    IHdrToneMapEffectStatics : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsSupported(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IHdrToneMapEffectStatics=_uuidof(IHdrToneMapEffectStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class HighlightsAndShadowsEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("7F90BE14-267E-5088-BC36-2E0AAD869B52"), version] */
                    MIDL_INTERFACE("7F90BE14-267E-5088-BC36-2E0AAD869B52")
                    IHighlightsAndShadowsEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Highlights(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Highlights(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Shadows(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Shadows(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Clarity(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Clarity(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MaskBlurAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_MaskBlurAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceIsLinearGamma(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceIsLinearGamma(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IHighlightsAndShadowsEffect=_uuidof(IHighlightsAndShadowsEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect[] = L"Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class HueRotationEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHueRotationEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HueRotationEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHueRotationEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("C172EBF2-E35F-58AE-AD2C-561ECEAF2694"), version] */
                    MIDL_INTERFACE("C172EBF2-E35F-58AE-AD2C-561ECEAF2694")
                    IHueRotationEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Angle(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Angle(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IHueRotationEffect=_uuidof(IHueRotationEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HueRotationEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHueRotationEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.HueRotationEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class HueToRgbEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HueToRgbEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("1E97C12C-B743-53D0-88C4-8435272B0A3D"), version] */
                    MIDL_INTERFACE("1E97C12C-B743-53D0-88C4-8435272B0A3D")
                    IHueToRgbEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceColorSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceColorSpace(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IHueToRgbEffect=_uuidof(IHueToRgbEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HueToRgbEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect[] = L"Microsoft.Graphics.Canvas.Effects.HueToRgbEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class InvertEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IInvertEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.InvertEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IInvertEffect[] = L"Microsoft.Graphics.Canvas.Effects.IInvertEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("D4ADCDFC-0F60-524D-936A-7F2736AD33D8"), version] */
                    MIDL_INTERFACE("D4ADCDFC-0F60-524D-936A-7F2736AD33D8")
                    IInvertEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IInvertEffect=_uuidof(IInvertEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.InvertEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IInvertEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_InvertEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_InvertEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_InvertEffect[] = L"Microsoft.Graphics.Canvas.Effects.InvertEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class LinearTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.LinearTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("43D27AD0-8937-5FDB-876A-4E91CB47540C"), version] */
                    MIDL_INTERFACE("43D27AD0-8937-5FDB-876A-4E91CB47540C")
                    ILinearTransferEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedSlope(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedSlope(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenSlope(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenSlope(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueSlope(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueSlope(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaOffset(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaOffset(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaSlope(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaSlope(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ILinearTransferEffect=_uuidof(ILinearTransferEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.LinearTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.LinearTransferEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class LuminanceToAlphaEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("22364900-AC51-5BD3-8BD2-D626FC9A65F9"), version] */
                    MIDL_INTERFACE("22364900-AC51-5BD3-8BD2-D626FC9A65F9")
                    ILuminanceToAlphaEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ILuminanceToAlphaEffect=_uuidof(ILuminanceToAlphaEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM MorphologyEffectMode : int
                    {
                        Erode = 0,
                        Dilate = 1,
                    } MorphologyEffectMode;
                    const MorphologyEffectMode MorphologyEffectMode_Erode = MorphologyEffectMode::Erode;
                    const MorphologyEffectMode MorphologyEffectMode_Dilate = MorphologyEffectMode::Dilate;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class MorphologyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IMorphologyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.MorphologyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IMorphologyEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("FF065FDB-62C8-5808-921E-49EFA43A3D34"), version] */
                    MIDL_INTERFACE("FF065FDB-62C8-5808-921E-49EFA43A3D34")
                    IMorphologyEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Mode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Mode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::MorphologyEffectMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Width(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Width(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Height(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Height(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IMorphologyEffect=_uuidof(IMorphologyEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.MorphologyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IMorphologyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_MorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.MorphologyEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class OpacityEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IOpacityEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.OpacityEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityEffect[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("94B6AD75-C540-51B8-A9D1-544174ADC68D"), version] */
                    MIDL_INTERFACE("94B6AD75-C540-51B8-A9D1-544174ADC68D")
                    IOpacityEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Opacity(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Opacity(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IOpacityEffect=_uuidof(IOpacityEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.OpacityEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("91A7CDE3-B9B7-5437-8878-FB2E14100E6D"), version] */
                    MIDL_INTERFACE("91A7CDE3-B9B7-5437-8878-FB2E14100E6D")
                    IOpacityEffectStatics : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsSupported(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IOpacityEffectStatics=_uuidof(IOpacityEffectStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.OpacityEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IOpacityEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_OpacityEffect[] = L"Microsoft.Graphics.Canvas.Effects.OpacityEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class OpacityMetadataEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("099F3299-9B0A-5ED3-B044-4A6FC96F8362"), version] */
                    MIDL_INTERFACE("099F3299-9B0A-5ED3-B044-4A6FC96F8362")
                    IOpacityMetadataEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OpaqueRectangle(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OpaqueRectangle(
                            /* [in] */ABI::Windows::Foundation::Rect value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IOpacityMetadataEffect=_uuidof(IOpacityMetadataEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class PointDiffuseEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("6CCE09EC-F847-5661-AF4B-531DD3DD7D6E"), version] */
                    MIDL_INTERFACE("6CCE09EC-F847-5661-AF4B-531DD3DD7D6E")
                    IPointDiffuseEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightPosition(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector3 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightPosition(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector3 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DiffuseAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DiffuseAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapScale(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapScale(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColor(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColor(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IPointDiffuseEffect=_uuidof(IPointDiffuseEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class PointSpecularEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PointSpecularEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("EC8AFE9B-8501-5286-A43C-1AFFF7420AD6"), version] */
                    MIDL_INTERFACE("EC8AFE9B-8501-5286-A43C-1AFFF7420AD6")
                    IPointSpecularEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightPosition(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector3 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightPosition(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector3 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SpecularExponent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SpecularExponent(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SpecularAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SpecularAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapScale(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapScale(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColor(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColor(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IPointSpecularEffect=_uuidof(IPointSpecularEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PointSpecularEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointSpecularEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class PosterizeEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPosterizeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PosterizeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPosterizeEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("2F631A3B-C89A-507C-9756-299B61434FA4"), version] */
                    MIDL_INTERFACE("2F631A3B-C89A-507C-9756-299B61434FA4")
                    IPosterizeEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedValueCount(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedValueCount(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenValueCount(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenValueCount(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueValueCount(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueValueCount(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IPosterizeEffect=_uuidof(IPosterizeEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PosterizeEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPosterizeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PosterizeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PosterizeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PosterizeEffect[] = L"Microsoft.Graphics.Canvas.Effects.PosterizeEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class PremultiplyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PremultiplyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D"), version] */
                    MIDL_INTERFACE("D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D")
                    IPremultiplyEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IPremultiplyEffect=_uuidof(IPremultiplyEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PremultiplyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.PremultiplyEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class RgbToHueEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.RgbToHueEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect[] = L"Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("7CAEADC6-9EB3-5895-B876-F485C9574847"), version] */
                    MIDL_INTERFACE("7CAEADC6-9EB3-5895-B876-F485C9574847")
                    IRgbToHueEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OutputColorSpace(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OutputColorSpace(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectHueColorSpace value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IRgbToHueEffect=_uuidof(IRgbToHueEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.RgbToHueEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect[] = L"Microsoft.Graphics.Canvas.Effects.RgbToHueEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class SaturationEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISaturationEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SaturationEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISaturationEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("F85A5ED7-7212-57A6-B357-61038961C58D"), version] */
                    MIDL_INTERFACE("F85A5ED7-7212-57A6-B357-61038961C58D")
                    ISaturationEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Saturation(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Saturation(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ISaturationEffect=_uuidof(ISaturationEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SaturationEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISaturationEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.SaturationEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ScaleEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IScaleEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ScaleEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.IScaleEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("7522AE90-BEC2-512C-BCC0-4D6A97E3ED34"), version] */
                    MIDL_INTERFACE("7522AE90-BEC2-512C-BCC0-4D6A97E3ED34")
                    IScaleEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Scale(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Scale(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_CenterPoint(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_CenterPoint(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Sharpness(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Sharpness(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IScaleEffect=_uuidof(IScaleEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ScaleEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IScaleEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.ScaleEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class SepiaEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISepiaEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SepiaEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISepiaEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISepiaEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("F933471F-A7AF-5521-BE79-B0DA22976CFF"), version] */
                    MIDL_INTERFACE("F933471F-A7AF-5521-BE79-B0DA22976CFF")
                    ISepiaEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Intensity(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Intensity(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ISepiaEffect=_uuidof(ISepiaEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SepiaEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISepiaEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SepiaEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SepiaEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SepiaEffect[] = L"Microsoft.Graphics.Canvas.Effects.SepiaEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class ShadowEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IShadowEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ShadowEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.IShadowEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("3947C621-78DA-5489-9927-BE655F4576E2"), version] */
                    MIDL_INTERFACE("3947C621-78DA-5489-9927-BE655F4576E2")
                    IShadowEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlurAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlurAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ShadowColor(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ShadowColor(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Optimization(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Optimization(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectOptimization value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ShadowColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ShadowColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IShadowEffect=_uuidof(IShadowEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ShadowEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IShadowEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.ShadowEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class SharpenEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISharpenEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SharpenEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISharpenEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISharpenEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("7EFEF0A1-7578-5F62-8364-46145674EF7E"), version] */
                    MIDL_INTERFACE("7EFEF0A1-7578-5F62-8364-46145674EF7E")
                    ISharpenEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Amount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Amount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Threshold(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Threshold(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ISharpenEffect=_uuidof(ISharpenEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SharpenEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISharpenEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SharpenEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SharpenEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SharpenEffect[] = L"Microsoft.Graphics.Canvas.Effects.SharpenEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class SpotDiffuseEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8"), version] */
                    MIDL_INTERFACE("B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8")
                    ISpotDiffuseEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightPosition(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector3 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightPosition(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector3 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightTarget(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector3 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightTarget(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector3 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Focus(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Focus(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LimitingConeAngle(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LimitingConeAngle(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_DiffuseAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_DiffuseAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapScale(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapScale(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColor(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColor(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ISpotDiffuseEffect=_uuidof(ISpotDiffuseEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class SpotSpecularEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("83AE4CD0-80AA-5783-8572-F15E5F85329E"), version] */
                    MIDL_INTERFACE("83AE4CD0-80AA-5783-8572-F15E5F85329E")
                    ISpotSpecularEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightPosition(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector3 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightPosition(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector3 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightTarget(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector3 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightTarget(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector3 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Focus(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Focus(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LimitingConeAngle(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LimitingConeAngle(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SpecularExponent(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SpecularExponent(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SpecularAmount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SpecularAmount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapScale(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapScale(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColor(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColor(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapKernelSize(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapKernelSize(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_HeightMapInterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_HeightMapInterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_LightColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_LightColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ISpotSpecularEffect=_uuidof(ISpotSpecularEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class StraightenEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IStraightenEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.StraightenEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IStraightenEffect[] = L"Microsoft.Graphics.Canvas.Effects.IStraightenEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("965FC262-2EBA-59E6-935F-2389CB5A305A"), version] */
                    MIDL_INTERFACE("965FC262-2EBA-59E6-935F-2389CB5A305A")
                    IStraightenEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Angle(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Angle(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_MaintainSize(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_MaintainSize(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IStraightenEffect=_uuidof(IStraightenEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.StraightenEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IStraightenEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_StraightenEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_StraightenEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_StraightenEffect[] = L"Microsoft.Graphics.Canvas.Effects.StraightenEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class TableTransferEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITableTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TableTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITableTransferEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("BF0B63B6-FE77-5198-A2A1-3FB80C268B8F"), version] */
                    MIDL_INTERFACE("BF0B63B6-FE77-5198-A2A1-3FB80C268B8F")
                    ITableTransferEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_RedDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_RedDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_GreenDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_GreenDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BlueDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BlueDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaTable(
                            /* [out] */UINT32 * valueCount,
                            /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaTable(
                            /* [in] */UINT32 valueCount,
                            /* [size_is(valueCount), in] */float * valueElements
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaDisable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaDisable(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITableTransferEffect=_uuidof(ITableTransferEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TableTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITableTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.TableTransferEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class TableTransfer3DEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("EF09C6E0-9437-53F7-B7B4-B53C79A0BC37"), version] */
                    MIDL_INTERFACE("EF09C6E0-9437-53F7-B7B4-B53C79A0BC37")
                    ITableTransfer3DEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Table(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D * * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Table(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::IEffectTransferTable3D * value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_AlphaMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_AlphaMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasAlphaMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITableTransfer3DEffect=_uuidof(ITableTransfer3DEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class TemperatureAndTintEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("8AE43E02-2619-5D78-8980-4ED569549BD8"), version] */
                    MIDL_INTERFACE("8AE43E02-2619-5D78-8980-4ED569549BD8")
                    ITemperatureAndTintEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Temperature(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Temperature(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Tint(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Tint(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITemperatureAndTintEffect=_uuidof(ITemperatureAndTintEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect[] = L"Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class TileEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITileEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TileEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITileEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITileEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("78A809CB-1154-5AD6-A880-E3A175772815"), version] */
                    MIDL_INTERFACE("78A809CB-1154-5AD6-A880-E3A175772815")
                    ITileEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_SourceRectangle(
                            /* [retval, out] */ABI::Windows::Foundation::Rect * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_SourceRectangle(
                            /* [in] */ABI::Windows::Foundation::Rect value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITileEffect=_uuidof(ITileEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TileEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITileEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TileEffect[] = L"Microsoft.Graphics.Canvas.Effects.TileEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class TintEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITintEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TintEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITintEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITintEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("729A21EA-C61E-5308-9EAE-D638AA1F5B8C"), version] */
                    MIDL_INTERFACE("729A21EA-C61E-5308-9EAE-D638AA1F5B8C")
                    ITintEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Color(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Color(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ClampOutput(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ClampOutput(
                            /* [in] */::boolean value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITintEffect=_uuidof(ITintEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITintEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TintEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITintEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.ITintEffectStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("65E31771-4BAF-5C8C-93F4-3B874E29F68D"), version] */
                    MIDL_INTERFACE("65E31771-4BAF-5C8C-93F4-3B874E29F68D")
                    ITintEffectStatics : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsSupported(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITintEffectStatics=_uuidof(ITintEffectStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TintEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITintEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TintEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TintEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TintEffect[] = L"Microsoft.Graphics.Canvas.Effects.TintEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class Transform2DEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITransform2DEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.Transform2DEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform2DEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("4467D118-33E7-5B1A-87C2-0F1F0497353D"), version] */
                    MIDL_INTERFACE("4467D118-33E7-5B1A-87C2-0F1F0497353D")
                    ITransform2DEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TransformMatrix(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix3x2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TransformMatrix(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix3x2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Sharpness(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Sharpness(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITransform2DEffect=_uuidof(ITransform2DEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.Transform2DEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITransform2DEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform2DEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class Transform3DEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITransform3DEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.Transform3DEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform3DEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10"), version] */
                    MIDL_INTERFACE("3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10")
                    ITransform3DEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InterpolationMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InterpolationMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::CanvasImageInterpolation value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_BorderMode(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_BorderMode(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::EffectBorderMode value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_TransformMatrix(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Matrix4x4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_TransformMatrix(
                            /* [in] */ABI::Windows::Foundation::Numerics::Matrix4x4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITransform3DEffect=_uuidof(ITransform3DEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.Transform3DEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITransform3DEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform3DEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise
 *
 */
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [version] */
                    typedef /* [v1_enum] */
                    MIDL_ENUM TurbulenceEffectNoise : int
                    {
                        FractalSum = 0,
                        Turbulence = 1,
                    } TurbulenceEffectNoise;
                    const TurbulenceEffectNoise TurbulenceEffectNoise_FractalSum = TurbulenceEffectNoise::FractalSum;
                    const TurbulenceEffectNoise TurbulenceEffectNoise_Turbulence = TurbulenceEffectNoise::Turbulence;
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class TurbulenceEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TurbulenceEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("1CB1B33D-20E9-564B-856E-37E9FA1D0016"), version] */
                    MIDL_INTERFACE("1CB1B33D-20E9-564B-856E-37E9FA1D0016")
                    ITurbulenceEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Offset(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Offset(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Size(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Size(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Frequency(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector2 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Frequency(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector2 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Octaves(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Octaves(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Seed(
                            /* [retval, out] */INT32 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Seed(
                            /* [in] */INT32 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Noise(
                            /* [retval, out] */ABI::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Noise(
                            /* [in] */ABI::Microsoft::Graphics::Canvas::Effects::TurbulenceEffectNoise value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Tileable(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Tileable(
                            /* [in] */::boolean value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_ITurbulenceEffect=_uuidof(ITurbulenceEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TurbulenceEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.TurbulenceEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class UnPremultiplyEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("73098BB4-DCF1-5403-AF44-3344D2982D40"), version] */
                    MIDL_INTERFACE("73098BB4-DCF1-5403-AF44-3344D2982D40")
                    IUnPremultiplyEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IUnPremultiplyEffect=_uuidof(IUnPremultiplyEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class VignetteEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IVignetteEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.VignetteEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IVignetteEffect[] = L"Microsoft.Graphics.Canvas.Effects.IVignetteEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("574D0F9F-EEC7-5989-AC53-135868CF5E0C"), version] */
                    MIDL_INTERFACE("574D0F9F-EEC7-5989-AC53-135868CF5E0C")
                    IVignetteEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Color(
                            /* [retval, out] */ABI::Windows::UI::Color * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Color(
                            /* [in] */ABI::Windows::UI::Color value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Amount(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Amount(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Curve(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Curve(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_ColorHdr(
                            /* [retval, out] */ABI::Windows::Foundation::Numerics::Vector4 * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_ColorHdr(
                            /* [in] */ABI::Windows::Foundation::Numerics::Vector4 value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IVignetteEffect=_uuidof(IVignetteEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.VignetteEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IVignetteEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_VignetteEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_VignetteEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_VignetteEffect[] = L"Microsoft.Graphics.Canvas.Effects.VignetteEffect";
#endif


namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    class WhiteLevelAdjustmentEffect;
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffect[] = L"Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("0B0B945C-96F7-56B4-8317-01DE629FC904"), version] */
                    MIDL_INTERFACE("0B0B945C-96F7-56B4-8317-01DE629FC904")
                    IWhiteLevelAdjustmentEffect : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_InputWhiteLevel(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_InputWhiteLevel(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_OutputWhiteLevel(
                            /* [retval, out] */float * value
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_OutputWhiteLevel(
                            /* [in] */float value
                            ) = 0;
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_Source(
                            /* [retval, out] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * * source
                            ) = 0;
                        /* [propput] */virtual HRESULT STDMETHODCALLTYPE put_Source(
                            /* [in] */ABI::Windows::Graphics::Effects::IGraphicsEffectSource * source
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IWhiteLevelAdjustmentEffect=_uuidof(IWhiteLevelAdjustmentEffect);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStatics";
namespace ABI {
    namespace Microsoft {
        namespace Graphics {
            namespace Canvas {
                namespace Effects {
                    /* [object, exclusiveto, uuid("58DACBF8-637A-5DA7-9457-1EEEDF5A191C"), version] */
                    MIDL_INTERFACE("58DACBF8-637A-5DA7-9457-1EEEDF5A191C")
                    IWhiteLevelAdjustmentEffectStatics : public IInspectable
                    {
                    public:
                        /* [propget] */virtual HRESULT STDMETHODCALLTYPE get_IsSupported(
                            /* [retval, out] */::boolean * value
                            ) = 0;
                        
                    };

                    MIDL_CONST_ID IID & IID_IWhiteLevelAdjustmentEffectStatics=_uuidof(IWhiteLevelAdjustmentEffectStatics);
                    
                } /* Effects */
            } /* Canvas */
        } /* Graphics */
    } /* Microsoft */
} /* ABI */

EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect[] = L"Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect";
#endif


#else // !defined(__cplusplus)
/* Forward Declarations */
#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_FWD_DEFINED__

#ifndef ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_FWD_DEFINED__
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_FWD_DEFINED__
typedef interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics;

#endif // ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions


#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * sender,/* [in] */ __RPC__in_opt IInspectable * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable_INTERFACE_DEFINED__


enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;
#if !defined(____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__)
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__

typedef interface __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision;

typedef struct __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * This, /* [retval][out] */ __RPC__out enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision *value);
    END_INTERFACE
} __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl;

interface __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision
{
    CONST_VTBL struct __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision_INTERFACE_DEFINED__


struct __x_ABI_CWindows_CFoundation_CRect;

#if !defined(____FIReference_1_Windows__CFoundation__CRect_INTERFACE_DEFINED__)
#define ____FIReference_1_Windows__CFoundation__CRect_INTERFACE_DEFINED__

typedef interface __FIReference_1_Windows__CFoundation__CRect __FIReference_1_Windows__CFoundation__CRect;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CRect;

typedef struct __FIReference_1_Windows__CFoundation__CRectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReference_1_Windows__CFoundation__CRect * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReference_1_Windows__CFoundation__CRect * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReference_1_Windows__CFoundation__CRect * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReference_1_Windows__CFoundation__CRect * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReference_1_Windows__CFoundation__CRect * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReference_1_Windows__CFoundation__CRect * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReference_1_Windows__CFoundation__CRect * This, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CRect *value);
    END_INTERFACE
} __FIReference_1_Windows__CFoundation__CRectVtbl;

interface __FIReference_1_Windows__CFoundation__CRect
{
    CONST_VTBL struct __FIReference_1_Windows__CFoundation__CRectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReference_1_Windows__CFoundation__CRect_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReference_1_Windows__CFoundation__CRect_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReference_1_Windows__CFoundation__CRect_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIReference_1_Windows__CFoundation__CRect_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReference_1_Windows__CFoundation__CRect_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReference_1_Windows__CFoundation__CRect_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReference_1_Windows__CFoundation__CRect_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIReference_1_Windows__CFoundation__CRect_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

// Forward declare the async operation.
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,/* [in] */ __RPC__in_opt __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *asyncInfo, /* [in] */ AsyncStatus status);
    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap;

typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This, /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap *handler);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This, /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap **handler);
    HRESULT ( STDMETHODCALLTYPE *GetResults )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * This, /* [retval][out] */ __RPC__out __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * *results);
    END_INTERFACE
} __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl;

interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap
{
    CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmapVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

// Forward declare the async operation.
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,/* [in] */ __RPC__in_opt __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap *asyncInfo, /* [in] */ AsyncStatus status);
    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl;

interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap;

typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This, /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap *handler);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This, /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap **handler);
    HRESULT ( STDMETHODCALLTYPE *GetResults )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * This, /* [retval][out] */ __RPC__out __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * *results);
    END_INTERFACE
} __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl;

interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap
{
    CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap_INTERFACE_DEFINED__


#if !defined(____FIIterator_1_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterator_1_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterator_1_HSTRING __FIIterator_1_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_HSTRING;

typedef struct __FIIterator_1_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1_HSTRING * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1_HSTRING * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1_HSTRING * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1_HSTRING * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1_HSTRING * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1_HSTRING * This, /* [retval][out] */ __RPC__out HSTRING *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1_HSTRING * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1_HSTRING * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1_HSTRING * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) HSTRING *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1_HSTRINGVtbl;

interface __FIIterator_1_HSTRING
{
    CONST_VTBL struct __FIIterator_1_HSTRINGVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_HSTRING_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_HSTRING_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_HSTRING_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_HSTRING_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1_HSTRING_INTERFACE_DEFINED__


#if !defined(____FIIterable_1_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterable_1_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterable_1_HSTRING __FIIterable_1_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_HSTRING;

typedef  struct __FIIterable_1_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1_HSTRING * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1_HSTRING * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1_HSTRING * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1_HSTRING * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1_HSTRING * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1_HSTRING * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_HSTRING **first);

    END_INTERFACE
} __FIIterable_1_HSTRINGVtbl;

interface __FIIterable_1_HSTRING
{
    CONST_VTBL struct __FIIterable_1_HSTRINGVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_HSTRING_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1_HSTRING_INTERFACE_DEFINED__


#if !defined(____FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
#define ____FIVectorView_1_HSTRING_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_HSTRING __FIVectorView_1_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_HSTRING;

typedef struct __FIVectorView_1_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1_HSTRING * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1_HSTRING * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1_HSTRING * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1_HSTRING * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1_HSTRING * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1_HSTRING * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out HSTRING *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_HSTRING * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1_HSTRING * This,
            /* [in] */ HSTRING item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1_HSTRING * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) HSTRING *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1_HSTRINGVtbl;

interface __FIVectorView_1_HSTRING
{
    CONST_VTBL struct __FIVectorView_1_HSTRINGVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_HSTRING_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_HSTRING_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_HSTRING_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_HSTRING_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1_HSTRING_INTERFACE_DEFINED__


#if !defined(____FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_HSTRING_HSTRING __FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_HSTRING_HSTRING;

typedef struct __FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__out HSTRING *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__deref_out_opt HSTRING *value);
    END_INTERFACE
} __FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIKeyValuePair_2_HSTRING_HSTRINGVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_HSTRING_HSTRING_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_HSTRING_HSTRING_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING;

typedef struct __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_HSTRING_HSTRING * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_HSTRING_HSTRING * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING;

typedef  struct __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_HSTRING_HSTRING **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__


#if !defined(____FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIMapView_2_HSTRING_HSTRING __FIMapView_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMapView_2_HSTRING_HSTRING;

typedef struct __FIMapView_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This,/* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *Lookup )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This,
        /* [in] */ __RPC__in HSTRING key,
        /* [retval][out] */ __RPC__deref_out_opt HSTRING *value);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__out unsigned int *size);
    HRESULT ( STDMETHODCALLTYPE *HasKey )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This, /* [in] */ __RPC__in HSTRING key, /* [retval][out] */ __RPC__out boolean *found);
    HRESULT ( STDMETHODCALLTYPE *Split )(__RPC__in __FIMapView_2_HSTRING_HSTRING * This,/* [out] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_HSTRING **firstPartition,
        /* [out] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_HSTRING **secondPartition);
    END_INTERFACE
} __FIMapView_2_HSTRING_HSTRINGVtbl;

interface __FIMapView_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIMapView_2_HSTRING_HSTRINGVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIMapView_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIMapView_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIMapView_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIMapView_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIMapView_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIMapView_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIMapView_2_HSTRING_HSTRING_Lookup(This,key,value)	\
    ( (This)->lpVtbl -> Lookup(This,key,value) ) 
#define __FIMapView_2_HSTRING_HSTRING_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 
#define __FIMapView_2_HSTRING_HSTRING_HasKey(This,key,found)	\
    ( (This)->lpVtbl -> HasKey(This,key,found) ) 
#define __FIMapView_2_HSTRING_HSTRING_Split(This,firstPartition,secondPartition)	\
    ( (This)->lpVtbl -> Split(This,firstPartition,secondPartition) ) 
#endif /* COBJMACROS */


#endif // ____FIMapView_2_HSTRING_HSTRING_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING;

typedef struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_HSTRING_HSTRING * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_HSTRING * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_HSTRING_HSTRING * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING;

typedef struct __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_HSTRING_HSTRING * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_HSTRING_HSTRING * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_HSTRING_HSTRING **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This, /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_HSTRING * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_HSTRING_HSTRING * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_HSTRING_HSTRING * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl;

interface __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRINGVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_HSTRING_HSTRING_INTERFACE_DEFINED__



#if !defined(____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__)
#define ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

typedef struct __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [retval][out] */ __RPC__out __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

interface __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
{
    CONST_VTBL struct __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__



#if !defined(____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__)
#define ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

typedef  struct __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **first);

    END_INTERFACE
} __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

interface __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
{
    CONST_VTBL struct __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

typedef struct __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

interface __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
{
    CONST_VTBL struct __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__



#if !defined(____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__)
#define ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__

typedef interface __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace;

typedef struct __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [out] */ __RPC__deref_out_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This, /* [in] */ __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * *value);

    END_INTERFACE
} __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl;

interface __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace
{
    CONST_VTBL struct __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace_INTERFACE_DEFINED__


#ifndef ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
#define ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke;

#endif // ____x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke_FWD_DEFINED__


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke;

typedef struct __FIIterator_1_Windows__CUI__CInput__CInking__CInkStrokeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [retval][out] */ __RPC__out __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CUI_CInput_CInking_CIInkStroke * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1_Windows__CUI__CInput__CInking__CInkStrokeVtbl;

interface __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke
{
    CONST_VTBL struct __FIIterator_1_Windows__CUI__CInput__CInking__CInkStrokeVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke;

typedef  struct __FIIterable_1_Windows__CUI__CInput__CInking__CInkStrokeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CUI__CInput__CInking__CInkStroke **first);

    END_INTERFACE
} __FIIterable_1_Windows__CUI__CInput__CInking__CInkStrokeVtbl;

interface __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke
{
    CONST_VTBL struct __FIIterable_1_Windows__CUI__CInput__CInking__CInkStrokeVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke_INTERFACE_DEFINED__

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000

struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange;


#if !defined(____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * *value);
    END_INTERFACE
} __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
{
    CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

typedef  struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__



struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi;

#if !defined(____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [retval][out] */ __RPC__deref_out_opt struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi *value);
    END_INTERFACE
} __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
{
    CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

typedef  struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__




#if !defined(____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * *value);
    END_INTERFACE
} __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
{
    CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

typedef  struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__



struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript;

#if !defined(____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [retval][out] */ __RPC__deref_out_opt struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript *value);
    END_INTERFACE
} __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
{
    CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

typedef  struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__



struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation;

#if !defined(____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [retval][out] */ __RPC__deref_out_opt struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation *value);
    END_INTERFACE
} __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
{
    CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

typedef  struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__




#if !defined(____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * *value);
    END_INTERFACE
} __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
{
    CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

typedef  struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont;

typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This, /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl;

interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi;

typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This, /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl;

interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi_INTERFACE_DEFINED__



struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint;

#if !defined(____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

typedef struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [retval][out] */ __RPC__deref_out_opt struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint *value);
    END_INTERFACE
} __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

interface __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
{
    CONST_VTBL struct __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

typedef struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

interface __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

typedef  struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

interface __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

typedef struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint;

typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This, /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl;

interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpointVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBreakpoint_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution;

typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This, /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl;

interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript;

typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This, /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl;

interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation;

typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This, /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl;

interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography;

typedef struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This, /* [in] */ __RPC__in __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl;

interface __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

// Forward declare the async operation.
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,/* [in] */ __RPC__in_opt __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement *asyncInfo, /* [in] */ AsyncStatus status);
    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl;

interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement;

typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This, /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement *handler);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This, /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement **handler);
    HRESULT ( STDMETHODCALLTYPE *GetResults )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * This, /* [retval][out] */ __RPC__out __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * *results);
    END_INTERFACE
} __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl;

interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
{
    CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__)
#define ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__

typedef interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

// Forward declare the async operation.
typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

typedef struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,/* [in] */ __RPC__in_opt __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument *asyncInfo, /* [in] */ AsyncStatus status);
    END_INTERFACE
} __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl;

interface __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
{
    CONST_VTBL struct __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_Invoke(This,asyncInfo,status)	\
    ( (This)->lpVtbl -> Invoke(This,asyncInfo,status) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__



#if !defined(____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__)
#define ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__

typedef interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument;

typedef struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This, /* [in] */ __RPC__in_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument *handler);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Completed )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This, /* [retval][out] */ __RPC__deref_out_opt __FIAsyncOperationCompletedHandler_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument **handler);
    HRESULT ( STDMETHODCALLTYPE *GetResults )(__RPC__in __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * This, /* [retval][out] */ __RPC__out __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * *results);
    END_INTERFACE
} __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl;

interface __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
{
    CONST_VTBL struct __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_put_Completed(This,handler)	\
    ( (This)->lpVtbl -> put_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_get_Completed(This,handler)	\
    ( (This)->lpVtbl -> get_Completed(This,handler) ) 
#define __FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_GetResults(This,results)	\
    ( (This)->lpVtbl -> GetResults(This,results) ) 
#endif /* COBJMACROS */


#endif // ____FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * sender,/* [in] */ __RPC__in_opt IInspectable * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs_INTERFACE_DEFINED__




#if !defined(____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__)
#define ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__

typedef interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs;

typedef struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *Invoke )(__RPC__in __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * This,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * sender,/* [in] */ __RPC__in_opt __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * e);
    END_INTERFACE
} __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl;

interface __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
{
    CONST_VTBL struct __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_Invoke(This,sender,e)	\
    ( (This)->lpVtbl -> Invoke(This,sender,e) ) 
#endif /* COBJMACROS */



#endif // ____FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__



#if !defined(____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIKeyValuePair_2_HSTRING_IInspectable __FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ __RPC__out ULONG *iidCount,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Key )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__out HSTRING *key);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__deref_out_opt IInspectable * *value);
    END_INTERFACE
} __FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIKeyValuePair_2_HSTRING_IInspectableVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIKeyValuePair_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIKeyValuePair_2_HSTRING_IInspectable_get_Key(This,key)	\
    ( (This)->lpVtbl -> get_Key(This,key) ) 

#define __FIKeyValuePair_2_HSTRING_IInspectable_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__



#if !defined(____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__out __FIKeyValuePair_2_HSTRING_IInspectable * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_HSTRING_IInspectable * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__



#if !defined(____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef  struct __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1___FIKeyValuePair_2_HSTRING_IInspectable **first);

    END_INTERFACE
} __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__



#if !defined(____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMapView_2_HSTRING_IInspectable __FIMapView_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMapView_2_HSTRING_IInspectable;

typedef struct __FIMapView_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This,/* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *Lookup )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in HSTRING key,
        /* [retval][out] */ __RPC__deref_out_opt IInspectable * *value);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__out unsigned int *size);
    HRESULT ( STDMETHODCALLTYPE *HasKey )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This, /* [in] */ __RPC__in HSTRING key, /* [retval][out] */ __RPC__out boolean *found);
    HRESULT ( STDMETHODCALLTYPE *Split )(__RPC__in __FIMapView_2_HSTRING_IInspectable * This,/* [out] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_IInspectable **firstPartition,
        /* [out] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_IInspectable **secondPartition);
    END_INTERFACE
} __FIMapView_2_HSTRING_IInspectableVtbl;

interface __FIMapView_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIMapView_2_HSTRING_IInspectableVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIMapView_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIMapView_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIMapView_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIMapView_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIMapView_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIMapView_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIMapView_2_HSTRING_IInspectable_Lookup(This,key,value)	\
    ( (This)->lpVtbl -> Lookup(This,key,value) ) 
#define __FIMapView_2_HSTRING_IInspectable_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 
#define __FIMapView_2_HSTRING_IInspectable_HasKey(This,key,found)	\
    ( (This)->lpVtbl -> HasKey(This,key,found) ) 
#define __FIMapView_2_HSTRING_IInspectable_Split(This,firstPartition,secondPartition)	\
    ( (This)->lpVtbl -> Split(This,firstPartition,secondPartition) ) 
#endif /* COBJMACROS */


#endif // ____FIMapView_2_HSTRING_IInspectable_INTERFACE_DEFINED__



#if !defined(____FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIMap_2_HSTRING_IInspectable __FIMap_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIMap_2_HSTRING_IInspectable;

typedef struct __FIMap_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIMap_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIMap_2_HSTRING_IInspectable * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIMap_2_HSTRING_IInspectable * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIMap_2_HSTRING_IInspectable * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIMap_2_HSTRING_IInspectable * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIMap_2_HSTRING_IInspectable * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *Lookup )(__RPC__in __FIMap_2_HSTRING_IInspectable * This,
        /* [in] */ HSTRING key,
        /* [retval][out] */ __RPC__deref_out_opt IInspectable * **value);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )(__RPC__in __FIMap_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__out unsigned int *size);
    HRESULT ( STDMETHODCALLTYPE *HasKey )(__RPC__in __FIMap_2_HSTRING_IInspectable * This, /* [in] */ HSTRING key, /* [retval][out] */ __RPC__out boolean *found);
    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIMap_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__deref_out_opt __FIMapView_2_HSTRING_IInspectable **view);
    HRESULT ( STDMETHODCALLTYPE *Insert )(__RPC__in __FIMap_2_HSTRING_IInspectable * This,
        /* [in] */ HSTRING key,
        /* [in] */ __RPC__in_opt IInspectable * *value,
        /* [retval][out] */ __RPC__out boolean *replaced);
    HRESULT ( STDMETHODCALLTYPE *Remove )(__RPC__in __FIMap_2_HSTRING_IInspectable * This,/* [in] */ HSTRING key);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIMap_2_HSTRING_IInspectable * This);
    END_INTERFACE
} __FIMap_2_HSTRING_IInspectableVtbl;

interface __FIMap_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIMap_2_HSTRING_IInspectableVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIMap_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIMap_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIMap_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIMap_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIMap_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIMap_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIMap_2_HSTRING_IInspectable_Lookup(This,key,value)	\
    ( (This)->lpVtbl -> Lookup(This,key,value) ) 

#define __FIMap_2_HSTRING_IInspectable_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIMap_2_HSTRING_IInspectable_HasKey(This,key,found)	\
    ( (This)->lpVtbl -> HasKey(This,key,found) ) 

#define __FIMap_2_HSTRING_IInspectable_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIMap_2_HSTRING_IInspectable_Insert(This,key,value,replaced)	\
    ( (This)->lpVtbl -> Insert(This,key,value,replaced) ) 

#define __FIMap_2_HSTRING_IInspectable_Remove(This,key)	\
    ( (This)->lpVtbl -> Remove(This,key) ) 

#define __FIMap_2_HSTRING_IInspectable_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 
#endif /* COBJMACROS */



#endif // ____FIMap_2_HSTRING_IInspectable_INTERFACE_DEFINED__



#if !defined(____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __FIKeyValuePair_2_HSTRING_IInspectable * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ __FIKeyValuePair_2_HSTRING_IInspectable * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_HSTRING_IInspectable * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__



#if !defined(____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__)
#define ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__

typedef interface __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable;

typedef struct __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__deref_out_opt __FIKeyValuePair_2_HSTRING_IInspectable * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __FIKeyValuePair_2_HSTRING_IInspectable * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1___FIKeyValuePair_2_HSTRING_IInspectable **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This, /* [in] */ __RPC__in __FIKeyValuePair_2_HSTRING_IInspectable * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __FIKeyValuePair_2_HSTRING_IInspectable * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __FIKeyValuePair_2_HSTRING_IInspectable * *value);

    END_INTERFACE
} __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl;

interface __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable
{
    CONST_VTBL struct __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectableVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1___FIKeyValuePair_2_HSTRING_IInspectable_INTERFACE_DEFINED__


struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4;

#if !defined(____FIReference_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__)
#define ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__

typedef interface __FIReference_1_Windows__CFoundation__CNumerics__CVector4 __FIReference_1_Windows__CFoundation__CNumerics__CVector4;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CNumerics__CVector4;

typedef struct __FIReference_1_Windows__CFoundation__CNumerics__CVector4Vtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CVector4 * This, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 *value);
    END_INTERFACE
} __FIReference_1_Windows__CFoundation__CNumerics__CVector4Vtbl;

interface __FIReference_1_Windows__CFoundation__CNumerics__CVector4
{
    CONST_VTBL struct __FIReference_1_Windows__CFoundation__CNumerics__CVector4Vtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CVector4_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIReference_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__


struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2;

#if !defined(____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__)
#define ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__

typedef interface __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2;

typedef struct __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 *value);
    END_INTERFACE
} __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl;

interface __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2
{
    CONST_VTBL struct __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIReference_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__


struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2;

#if !defined(____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2;

typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2Vtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2 * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CNumerics_CVector2 **value);
    END_INTERFACE
} __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2Vtbl;

interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2
{
    CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2Vtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector2_INTERFACE_DEFINED__


struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3;

#if !defined(____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3;

typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3Vtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3 * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CNumerics_CVector3 **value);
    END_INTERFACE
} __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3Vtbl;

interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3
{
    CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3Vtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector3_INTERFACE_DEFINED__



#if !defined(____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4;

typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4Vtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4 * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CNumerics_CVector4 **value);
    END_INTERFACE
} __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4Vtbl;

interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4
{
    CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4Vtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CVector4_INTERFACE_DEFINED__



#if !defined(____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2;

typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2 * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 **value);
    END_INTERFACE
} __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl;

interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2
{
    CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2Vtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix3x2_INTERFACE_DEFINED__


struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4;

#if !defined(____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4;

typedef struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4Vtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4 * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out struct __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 **value);
    END_INTERFACE
} __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4Vtbl;

interface __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4
{
    CONST_VTBL struct __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4Vtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_Windows__CFoundation__CNumerics__CMatrix4x4_INTERFACE_DEFINED__


#if !defined(____FIReferenceArray_1_float_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_float_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_float __FIReferenceArray_1_float;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_float;

typedef struct __FIReferenceArray_1_floatVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_float * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_float * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_float * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_float * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_float * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_float * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_float * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out float **value);
    END_INTERFACE
} __FIReferenceArray_1_floatVtbl;

interface __FIReferenceArray_1_float
{
    CONST_VTBL struct __FIReferenceArray_1_floatVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_float_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_float_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_float_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_float_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_float_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_float_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_float_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_float_INTERFACE_DEFINED__


#if !defined(____FIReferenceArray_1_int_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_int_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_int __FIReferenceArray_1_int;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_int;

typedef struct __FIReferenceArray_1_intVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_int * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_int * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_int * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_int * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_int * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_int * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_int * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out int **value);
    END_INTERFACE
} __FIReferenceArray_1_intVtbl;

interface __FIReferenceArray_1_int
{
    CONST_VTBL struct __FIReferenceArray_1_intVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_int_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_int_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_int_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_int_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_int_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_int_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_int_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_int_INTERFACE_DEFINED__


#if !defined(____FIReferenceArray_1_boolean_INTERFACE_DEFINED__)
#define ____FIReferenceArray_1_boolean_INTERFACE_DEFINED__

typedef interface __FIReferenceArray_1_boolean __FIReferenceArray_1_boolean;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReferenceArray_1_boolean;

typedef struct __FIReferenceArray_1_booleanVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReferenceArray_1_boolean * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReferenceArray_1_boolean * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReferenceArray_1_boolean * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReferenceArray_1_boolean * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReferenceArray_1_boolean * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReferenceArray_1_boolean * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReferenceArray_1_boolean * This, /*[out]*/ UINT32 *length, /* [retval][out] */ __RPC__out boolean **value);
    END_INTERFACE
} __FIReferenceArray_1_booleanVtbl;

interface __FIReferenceArray_1_boolean
{
    CONST_VTBL struct __FIReferenceArray_1_booleanVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReferenceArray_1_boolean_QueryInterface(This,riid,ppvObject)	\
        ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReferenceArray_1_boolean_AddRef(This)	\
        ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReferenceArray_1_boolean_Release(This)	\
        ( (This)->lpVtbl -> Release(This) ) 

#define __FIReferenceArray_1_boolean_GetIids(This,iidCount,iids)	\
        ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReferenceArray_1_boolean_GetRuntimeClassName(This,className)	\
        ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReferenceArray_1_boolean_GetTrustLevel(This,trustLevel)	\
        ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReferenceArray_1_boolean_get_Value(This,value)	\
        ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */



#endif // ____FIReferenceArray_1_boolean_INTERFACE_DEFINED__


struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile;

#if !defined(____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_INTERFACE_DEFINED__)
#define ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_INTERFACE_DEFINED__

typedef interface __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile;

typedef struct __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(__RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This );
    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This );

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This, 
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);
    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( __RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )(__RPC__in __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * This, /* [retval][out] */ __RPC__out struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile *value);
    END_INTERFACE
} __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVtbl;

interface __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile
{
    CONST_VTBL struct __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 
#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 

#define __FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_get_Value(This,value)	\
    ( (This)->lpVtbl -> get_Value(This,value) ) 
#endif /* COBJMACROS */


#endif // ____FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile_INTERFACE_DEFINED__


#ifndef ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__
typedef interface __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource;

#endif // ____x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource_FWD_DEFINED__


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__)
#define ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

typedef interface __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

typedef struct __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);
    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Current )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [retval][out] */ __RPC__out __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *current);
    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasCurrent )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *MoveNext )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [retval][out] */ __RPC__out boolean *hasCurrent);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    END_INTERFACE
} __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

interface __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
{
    CONST_VTBL struct __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_Current(This,current)	\
    ( (This)->lpVtbl -> get_Current(This,current) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_HasCurrent(This,hasCurrent)	\
    ( (This)->lpVtbl -> get_HasCurrent(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_MoveNext(This,hasCurrent)	\
    ( (This)->lpVtbl -> MoveNext(This,hasCurrent) ) 

#define __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetMany(This,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,capacity,items,actual) ) 

#endif /* COBJMACROS */


#endif // ____FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__)
#define ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

typedef interface __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

typedef  struct __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);

    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
                                           /* [out] */ __RPC__out ULONG *iidCount,
                                           /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *First )(__RPC__in __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [retval][out] */ __RPC__deref_out_opt __FIIterator_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **first);

    END_INTERFACE
} __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

interface __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
{
    CONST_VTBL struct __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
};

#ifdef COBJMACROS

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_First(This,first)	\
    ( (This)->lpVtbl -> First(This,first) ) 

#endif /* COBJMACROS */


#endif // ____FIIterable_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__)
#define ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

typedef interface __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

typedef struct __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ __RPC__in REFIID riid,
        /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);

    ULONG ( STDMETHODCALLTYPE *Release )( __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);

    HRESULT ( STDMETHODCALLTYPE *GetIids )( __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
                                            /* [out] */ __RPC__out ULONG *iidCount,
                                            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )( 
        __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ __RPC__deref_out_opt HSTRING *className);

    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )( 
        __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )( 
                                         __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
                                         /* [in] */ unsigned int index,
                                         /* [retval][out] */ __RPC__out __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *item);

        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [retval][out] */ __RPC__out unsigned int *size);

        HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
                                               __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * item,
            /* [out] */ __RPC__out unsigned int *index,
            /* [retval][out] */ __RPC__out boolean *found);

        HRESULT ( STDMETHODCALLTYPE *GetMany )( 
                                               __RPC__in __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ unsigned int startIndex,
            /* [in] */ unsigned int capacity,
            /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *items,
            /* [retval][out] */ __RPC__out unsigned int *actual);

        END_INTERFACE
} __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

interface __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
{
    CONST_VTBL struct __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#endif /* COBJMACROS */



#endif // ____FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000


#if WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000
#if !defined(____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__)
#define ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

typedef interface __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

//  Declare the parameterized interface IID.
EXTERN_C const IID IID___FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource;

typedef struct __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        __RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
    ULONG ( STDMETHODCALLTYPE *Release )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
    HRESULT ( STDMETHODCALLTYPE *GetIids )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [out] */ __RPC__out ULONG *iidCount,
        /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids);

    HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [out] */ __RPC__deref_out_opt __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *className);
    HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [out] */ __RPC__out TrustLevel *trustLevel);

    HRESULT ( STDMETHODCALLTYPE *GetAt )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ unsigned int index,
        /* [retval][out] */ __RPC__deref_out_opt __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *item);

    /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
        __RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [retval][out] */ __RPC__out unsigned int *size);

    HRESULT ( STDMETHODCALLTYPE *GetView )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [retval][out] */ __RPC__deref_out_opt __FIVectorView_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource **view);

    HRESULT ( STDMETHODCALLTYPE *IndexOf )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ __RPC__in __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * item,
        /* [out] */ __RPC__out unsigned int *index,
        /* [retval][out] */ __RPC__out boolean *found);

    HRESULT ( STDMETHODCALLTYPE *SetAt )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * item);

    HRESULT ( STDMETHODCALLTYPE *InsertAt )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ unsigned int index,
        /* [in] */ __RPC__in __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * item);

    HRESULT ( STDMETHODCALLTYPE *RemoveAt )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [in] */ unsigned int index);
    HRESULT ( STDMETHODCALLTYPE *Append )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This, /* [in] */ __RPC__in __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * item);
    HRESULT ( STDMETHODCALLTYPE *RemoveAtEnd )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
    HRESULT ( STDMETHODCALLTYPE *Clear )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This);
    HRESULT ( STDMETHODCALLTYPE *GetMany )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ unsigned int startIndex,
        /* [in] */ unsigned int capacity,
        /* [size_is][length_is][out] */ __RPC__out_ecount_part(capacity, *actual) __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *items,
        /* [retval][out] */ __RPC__out unsigned int *actual);

    HRESULT ( STDMETHODCALLTYPE *ReplaceAll )(__RPC__in __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * This,
        /* [in] */ unsigned int count,
        /* [size_is][in] */ __RPC__in_ecount_full(count) __x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * *value);

    END_INTERFACE
} __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl;

interface __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource
{
    CONST_VTBL struct __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl *lpVtbl;
};



#ifdef COBJMACROS


#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetIids(This,iidCount,iids)	\
    ( (This)->lpVtbl -> GetIids(This,iidCount,iids) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetRuntimeClassName(This,className)	\
    ( (This)->lpVtbl -> GetRuntimeClassName(This,className) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetTrustLevel(This,trustLevel)	\
    ( (This)->lpVtbl -> GetTrustLevel(This,trustLevel) ) 


#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetAt(This,index,item)	\
    ( (This)->lpVtbl -> GetAt(This,index,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_get_Size(This,size)	\
    ( (This)->lpVtbl -> get_Size(This,size) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetView(This,view)	\
    ( (This)->lpVtbl -> GetView(This,view) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_IndexOf(This,item,index,found)	\
    ( (This)->lpVtbl -> IndexOf(This,item,index,found) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_SetAt(This,index,item)	\
    ( (This)->lpVtbl -> SetAt(This,index,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_InsertAt(This,index,item)	\
    ( (This)->lpVtbl -> InsertAt(This,index,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_RemoveAt(This,index)	\
    ( (This)->lpVtbl -> RemoveAt(This,index) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Append(This,item)	\
    ( (This)->lpVtbl -> Append(This,item) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_RemoveAtEnd(This)	\
    ( (This)->lpVtbl -> RemoveAtEnd(This) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_GetMany(This,startIndex,capacity,items,actual)	\
    ( (This)->lpVtbl -> GetMany(This,startIndex,capacity,items,actual) ) 

#define __FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_ReplaceAll(This,count,value)	\
    ( (This)->lpVtbl -> ReplaceAll(This,count,value) ) 

#endif /* COBJMACROS */



#endif // ____FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource_INTERFACE_DEFINED__

#endif // WINDOWS_FOUNDATION_UNIVERSALAPICONTRACT_VERSION >= 0x10000



#pragma warning (push)
#pragma warning (disable:4668) 
#pragma warning (disable:4001) 
#pragma once 
#pragma warning (pop)
#if defined(__cplusplus)
namespace ABI { namespace Microsoft { namespace Graphics { namespace Canvas { namespace Numerics = ::ABI::Windows::Foundation::Numerics; } } } }
#endif

/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasAlphaMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode
{
    CanvasAlphaMode_Premultiplied = 0,
    CanvasAlphaMode_Straight = 1,
    CanvasAlphaMode_Ignore = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasAntialiasing
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing
{
    CanvasAntialiasing_Antialiased = 0,
    CanvasAntialiasing_Aliased = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasBlend
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend
{
    CanvasBlend_SourceOver = 0,
    CanvasBlend_Copy = 1,
    CanvasBlend_Min = 2,
    CanvasBlend_Add = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasBufferPrecision
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
{
    CanvasBufferPrecision_Precision8UIntNormalized = 0,
    CanvasBufferPrecision_Precision8UIntNormalizedSrgb = 1,
    CanvasBufferPrecision_Precision16UIntNormalized = 2,
    CanvasBufferPrecision_Precision16Float = 3,
    CanvasBufferPrecision_Precision32Float = 4,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasColorSpace
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace
{
    CanvasColorSpace_Custom = 0,
    CanvasColorSpace_Srgb = 1,
    CanvasColorSpace_ScRgb = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasComposite
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite
{
    CanvasComposite_SourceOver = 0,
    CanvasComposite_DestinationOver = 1,
    CanvasComposite_SourceIn = 2,
    CanvasComposite_DestinationIn = 3,
    CanvasComposite_SourceOut = 4,
    CanvasComposite_DestinationOut = 5,
    CanvasComposite_SourceAtop = 6,
    CanvasComposite_DestinationAtop = 7,
    CanvasComposite_Xor = 8,
    CanvasComposite_Add = 9,
    CanvasComposite_Copy = 10,
    CanvasComposite_BoundedCopy = 11,
    CanvasComposite_MaskInvert = 12,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasDebugLevel
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel
{
    CanvasDebugLevel_None = 0,
    CanvasDebugLevel_Error = 1,
    CanvasDebugLevel_Warning = 2,
    CanvasDebugLevel_Information = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasEdgeBehavior
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior
{
    CanvasEdgeBehavior_Clamp = 0,
    CanvasEdgeBehavior_Wrap = 1,
    CanvasEdgeBehavior_Mirror = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasImageInterpolation
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation
{
    CanvasImageInterpolation_NearestNeighbor = 0,
    CanvasImageInterpolation_Linear = 1,
    CanvasImageInterpolation_Cubic = 2,
    CanvasImageInterpolation_MultiSampleLinear = 3,
    CanvasImageInterpolation_Anisotropic = 4,
    CanvasImageInterpolation_HighQualityCubic = 5,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasLayerOptions
 *
 */
/* [flags, version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions
{
    CanvasLayerOptions_None = 0,
    CanvasLayerOptions_InitializeFromBackground = 0x1,
    CanvasLayerOptions_IgnoreAlpha = 0x2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasUnits
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits
{
    CanvasUnits_Dips = 0,
    CanvasUnits_Pixels = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits;



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasArcSize
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize
{
    CanvasArcSize_Small = 0,
    CanvasArcSize_Large = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle
{
    CanvasCapStyle_Flat = 0,
    CanvasCapStyle_Square = 1,
    CanvasCapStyle_Round = 2,
    CanvasCapStyle_Triangle = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle
{
    CanvasDashStyle_Solid = 0,
    CanvasDashStyle_Dash = 1,
    CanvasDashStyle_Dot = 2,
    CanvasDashStyle_DashDot = 3,
    CanvasDashStyle_DashDotDot = 4,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill
{
    CanvasFigureFill_Default = 0,
    CanvasFigureFill_DoesNotAffectFills = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFigureLoop
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop
{
    CanvasFigureLoop_Open = 0,
    CanvasFigureLoop_Closed = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFigureSegmentOptions
 *
 */
/* [flags, version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions
{
    CanvasFigureSegmentOptions_None = 0,
    CanvasFigureSegmentOptions_ForceUnstroked = 0x1,
    CanvasFigureSegmentOptions_ForceRoundLineJoin = 0x2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination
{
    CanvasFilledRegionDetermination_Alternate = 0,
    CanvasFilledRegionDetermination_Winding = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine
{
    CanvasGeometryCombine_Union = 0,
    CanvasGeometryCombine_Intersect = 1,
    CanvasGeometryCombine_Xor = 2,
    CanvasGeometryCombine_Exclude = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation
{
    CanvasGeometryRelation_Disjoint = 0,
    CanvasGeometryRelation_Contained = 1,
    CanvasGeometryRelation_Contains = 2,
    CanvasGeometryRelation_Overlap = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification
{
    CanvasGeometrySimplification_CubicsAndLines = 0,
    CanvasGeometrySimplification_Lines = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin
{
    CanvasLineJoin_Miter = 0,
    CanvasLineJoin_Bevel = 1,
    CanvasLineJoin_Round = 2,
    CanvasLineJoin_MiterOrBevel = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior
{
    CanvasStrokeTransformBehavior_Normal = 0,
    CanvasStrokeTransformBehavior_Fixed = 1,
    CanvasStrokeTransformBehavior_Hairline = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasSweepDirection
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection
{
    CanvasSweepDirection_CounterClockwise = 0,
    CanvasSweepDirection_Clockwise = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection;



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions
 *
 */
/* [flags, version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions
{
    CanvasDrawTextOptions_Default = 0,
    CanvasDrawTextOptions_NoPixelSnap = 0x1,
    CanvasDrawTextOptions_Clip = 0x2,
    CanvasDrawTextOptions_EnableColorFont = 0x4,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing
{
    CanvasTextAntialiasing_Auto = 0,
    CanvasTextAntialiasing_ClearType = 1,
    CanvasTextAntialiasing_Grayscale = 2,
    CanvasTextAntialiasing_Aliased = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;



#define PIXEL_FORMAT(x) ::ABI::Windows::Graphics::DirectX::DirectXPixelFormat_##x

/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectBorderMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode
{
    EffectBorderMode_Soft = 0,
    EffectBorderMode_Hard = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent
{
    ColorManagementRenderingIntent_Perceptual = 0,
    ColorManagementRenderingIntent_RelativeColorimetric = 1,
    ColorManagementRenderingIntent_Saturation = 2,
    ColorManagementRenderingIntent_AbsoluteColorimetric = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectOptimization
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization
{
    EffectOptimization_Speed = 0,
    EffectOptimization_Balanced = 1,
    EffectOptimization_Quality = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectChannelSelect
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect
{
    EffectChannelSelect_Red = 0,
    EffectChannelSelect_Green = 1,
    EffectChannelSelect_Blue = 2,
    EffectChannelSelect_Alpha = 3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace
{
    EffectHueColorSpace_Hsv = 0,
    EffectHueColorSpace_Hsl = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace;





/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasDpiRounding
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding
{
    CanvasDpiRounding_Floor = 0,
    CanvasDpiRounding_Round = 1,
    CanvasDpiRounding_Ceiling = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding;


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreator[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreator";
/* [object, uuid("8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi[] = L"Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi";
/* [object, uuid("1A75B512-E9FA-49E6-A876-38CAE194013E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Dpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
        /* [retval, out] */float * dpi
        );
    HRESULT ( STDMETHODCALLTYPE *ConvertPixelsToDips )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
        /* [in] */INT32 pixels,
        /* [retval, out] */float * dips
        );
    HRESULT ( STDMETHODCALLTYPE *ConvertDipsToPixels )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * This,
        /* [in] */float dips,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding,
        /* [retval, out] */INT32 * pixels
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_get_Dpi(This,dpi) \
    ( (This)->lpVtbl->get_Dpi(This,dpi) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_ConvertPixelsToDips(This,pixels,dips) \
    ( (This)->lpVtbl->ConvertPixelsToDips(This,pixels,dips) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_ConvertDipsToPixels(This,dips,dpiRounding,pixels) \
    ( (This)->lpVtbl->ConvertDipsToPixels(This,dips,dpiRounding,pixels) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDeviceFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDevice
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceFactory[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceFactory";
/* [object, exclusiveto, uuid("E2C2BF21-5418-43B9-A2DA-539E287C790F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateWithForceSoftwareRendererOption )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory * This,
        /* [in] */boolean forceSoftwareRenderer,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * canvasDevice
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_CreateWithForceSoftwareRendererOption(This,forceSoftwareRenderer,canvasDevice) \
    ( (This)->lpVtbl->CreateWithForceSoftwareRendererOption(This,forceSoftwareRenderer,canvasDevice) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDeviceStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDevice
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDeviceStatics[] = L"Microsoft.Graphics.Canvas.ICanvasDeviceStatics";
/* [object, exclusiveto, uuid("9B6E2B27-CD07-421A-8F69-0AE8A787FE8C"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DDevice * direct3DDevice,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * canvasDevice
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetSharedDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * canvasDevice
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetSharedDeviceWithForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
        /* [in] */boolean forceSoftwareRenderer,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * canvasDevice
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DebugLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DebugLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_CreateFromDirect3D11Device(This,direct3DDevice,canvasDevice) \
    ( (This)->lpVtbl->CreateFromDirect3D11Device(This,direct3DDevice,canvasDevice) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetSharedDevice(This,canvasDevice) \
    ( (This)->lpVtbl->GetSharedDevice(This,canvasDevice) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_GetSharedDeviceWithForceSoftwareRenderer(This,forceSoftwareRenderer,canvasDevice) \
    ( (This)->lpVtbl->GetSharedDeviceWithForceSoftwareRenderer(This,forceSoftwareRenderer,canvasDevice) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_put_DebugLevel(This,value) \
    ( (This)->lpVtbl->put_DebugLevel(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_get_DebugLevel(This,value) \
    ( (This)->lpVtbl->get_DebugLevel(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDevice
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDevice
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *     Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDevice[] = L"Microsoft.Graphics.Canvas.ICanvasDevice";
/* [object, exclusiveto, uuid("A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MaximumBitmapSizeInPixels )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [retval, out] */INT32 * value
        );
    HRESULT ( STDMETHODCALLTYPE *IsPixelFormatSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat pixelFormat,
        /* [retval, out] */boolean * value
        );
    HRESULT ( STDMETHODCALLTYPE *IsBufferPrecisionSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MaximumCacheSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [retval, out] */UINT64 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_MaximumCacheSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [in] */UINT64 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LowPriority )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LowPriority )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [in] */boolean value
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_DeviceLost )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CCanvasDevice_IInspectable * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_DeviceLost )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [in] */EventRegistrationToken token
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *IsDeviceLost )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [in] */int hresult,
        /* [retval, out] */boolean * value
        );
    HRESULT ( STDMETHODCALLTYPE *RaiseDeviceLost )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This
        );
    HRESULT ( STDMETHODCALLTYPE *Lock )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * * lock
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *IsDeviceLost2 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [retval, out] */boolean * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetDeviceLostReason )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * This,
        /* [retval, out] */int * hresult
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_ForceSoftwareRenderer(This,value) \
    ( (This)->lpVtbl->get_ForceSoftwareRenderer(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_MaximumBitmapSizeInPixels(This,value) \
    ( (This)->lpVtbl->get_MaximumBitmapSizeInPixels(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsPixelFormatSupported(This,pixelFormat,value) \
    ( (This)->lpVtbl->IsPixelFormatSupported(This,pixelFormat,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsBufferPrecisionSupported(This,bufferPrecision,value) \
    ( (This)->lpVtbl->IsBufferPrecisionSupported(This,bufferPrecision,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_MaximumCacheSize(This,value) \
    ( (This)->lpVtbl->get_MaximumCacheSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_put_MaximumCacheSize(This,value) \
    ( (This)->lpVtbl->put_MaximumCacheSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_get_LowPriority(This,value) \
    ( (This)->lpVtbl->get_LowPriority(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_put_LowPriority(This,value) \
    ( (This)->lpVtbl->put_LowPriority(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_add_DeviceLost(This,value,token) \
    ( (This)->lpVtbl->add_DeviceLost(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_remove_DeviceLost(This,token) \
    ( (This)->lpVtbl->remove_DeviceLost(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsDeviceLost(This,hresult,value) \
    ( (This)->lpVtbl->IsDeviceLost(This,hresult,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_RaiseDeviceLost(This) \
    ( (This)->lpVtbl->RaiseDeviceLost(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_Lock(This,lock) \
    ( (This)->lpVtbl->Lock(This,lock) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_IsDeviceLost2(This,value) \
    ( (This)->lpVtbl->IsDeviceLost2(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_GetDeviceLostReason(This,hresult) \
    ( (This)->lpVtbl->GetDeviceLostReason(This,hresult) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasDevice
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasDevice ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDevice_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDevice[] = L"Microsoft.Graphics.Canvas.CanvasDevice";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasLock
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasLock
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasLock[] = L"Microsoft.Graphics.Canvas.ICanvasLock";
/* [object, exclusiveto, uuid("7A0E8498-FBA9-4FB0-AA8C-6A48B5EE3E4F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLockVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasLock
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasLock ** Default Interface **
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasLock_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasLock_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasLock[] = L"Microsoft.Graphics.Canvas.CanvasLock";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Graphics.Effects.IGraphicsEffect
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICanvasEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICanvasEffect";
/* [object, uuid("0EF96F8C-9B5E-4BF0-A399-AAD8CE53DB55"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CacheOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CacheOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [retval, out] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BufferPrecision )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [in] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * value
        );
    HRESULT ( STDMETHODCALLTYPE *InvalidateSourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */UINT32 sourceIndex,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect invalidRectangle
        );
    HRESULT ( STDMETHODCALLTYPE *GetInvalidRectangles )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CWindows_CFoundation_CRect * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetRequiredSourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect outputRectangle,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * sourceEffect,
        /* [in] */UINT32 sourceIndex,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceBounds,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetRequiredSourceRectangles )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect outputRectangle,
        /* [in] */UINT32 sourceEffectCount,
        /* [size_is(sourceEffectCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect * * sourceEffects,
        /* [in] */UINT32 sourceIndexCount,
        /* [size_is(sourceIndexCount), in] */UINT32 * sourceIndices,
        /* [in] */UINT32 sourceBoundsCount,
        /* [size_is(sourceBoundsCount), in] */__x_ABI_CWindows_CFoundation_CRect * sourceBounds,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CWindows_CFoundation_CRect * * valueElements
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_get_CacheOutput(This,value) \
    ( (This)->lpVtbl->get_CacheOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_put_CacheOutput(This,value) \
    ( (This)->lpVtbl->put_CacheOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_get_BufferPrecision(This,value) \
    ( (This)->lpVtbl->get_BufferPrecision(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_put_BufferPrecision(This,value) \
    ( (This)->lpVtbl->put_BufferPrecision(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_InvalidateSourceRectangle(This,resourceCreator,sourceIndex,invalidRectangle) \
    ( (This)->lpVtbl->InvalidateSourceRectangle(This,resourceCreator,sourceIndex,invalidRectangle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetInvalidRectangles(This,resourceCreator,valueCount,valueElements) \
    ( (This)->lpVtbl->GetInvalidRectangles(This,resourceCreator,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetRequiredSourceRectangle(This,resourceCreator,outputRectangle,sourceEffect,sourceIndex,sourceBounds,value) \
    ( (This)->lpVtbl->GetRequiredSourceRectangle(This,resourceCreator,outputRectangle,sourceEffect,sourceIndex,sourceBounds,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_GetRequiredSourceRectangles(This,resourceCreator,outputRectangle,sourceEffectCount,sourceEffects,sourceIndexCount,sourceIndices,sourceBoundsCount,sourceBounds,valueCount,valueElements) \
    ( (This)->lpVtbl->GetRequiredSourceRectangles(This,resourceCreator,outputRectangle,sourceEffectCount,sourceEffects,sourceIndexCount,sourceIndices,sourceBoundsCount,sourceBounds,valueCount,valueElements) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect_INTERFACE_DEFINED__) */



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.Matrix5x4
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4
{
    float M11;
    float M12;
    float M13;
    float M14;
    float M21;
    float M22;
    float M23;
    float M24;
    float M31;
    float M32;
    float M33;
    float M34;
    float M41;
    float M42;
    float M43;
    float M44;
    float M51;
    float M52;
    float M53;
    float M54;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4;




/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasImage
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Graphics.Effects.IGraphicsEffectSource
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasImage[] = L"Microsoft.Graphics.Canvas.ICanvasImage";
/* [object, uuid("794966D3-6A64-47E9-8DA8-B46AAA24D53B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBoundsWithTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetBounds(This,resourceCreator,bounds) \
    ( (This)->lpVtbl->GetBounds(This,resourceCreator,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_GetBoundsWithTransform(This,resourceCreator,transform,bounds) \
    ( (This)->lpVtbl->GetBoundsWithTransform(This,resourceCreator,transform,bounds) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage_INTERFACE_DEFINED__) */


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasBitmapFileFormat
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat
{
    CanvasBitmapFileFormat_Auto,
    CanvasBitmapFileFormat_Bmp,
    CanvasBitmapFileFormat_Png,
    CanvasBitmapFileFormat_Jpeg,
    CanvasBitmapFileFormat_Tiff,
    CanvasBitmapFileFormat_Gif,
    CanvasBitmapFileFormat_JpegXR,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat;



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasImageStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasImageStatics[] = L"Microsoft.Graphics.Canvas.ICanvasImageStatics";
/* [object, exclusiveto, uuid("C54EEA15-5A14-489A-8FA0-6E84541F922D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SaveAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * action
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SaveWithQualityAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        /* [in] */float quality,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * action
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SaveWithQualityAndBufferPrecisionAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        /* [in] */float quality,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * action
        );
    HRESULT ( STDMETHODCALLTYPE *ComputeHistogram )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect channelSelect,
        /* [in] */INT32 numberOfBins,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *IsHistogramSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * device,
        /* [retval, out] */boolean * result
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_SaveAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,action) \
    ( (This)->lpVtbl->SaveAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,action) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_SaveWithQualityAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,action) \
    ( (This)->lpVtbl->SaveWithQualityAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,action) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_SaveWithQualityAndBufferPrecisionAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,bufferPrecision,action) \
    ( (This)->lpVtbl->SaveWithQualityAndBufferPrecisionAsync(This,image,sourceRectangle,dpi,resourceCreator,stream,fileFormat,quality,bufferPrecision,action) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_ComputeHistogram(This,image,sourceRectangle,resourceCreator,channelSelect,numberOfBins,valueCount,valueElements) \
    ( (This)->lpVtbl->ComputeHistogram(This,image,sourceRectangle,resourceCreator,channelSelect,numberOfBins,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_IsHistogramSupported(This,device,result) \
    ( (This)->lpVtbl->IsHistogramSupported(This,device,result) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImageStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasImage
 *
 * RuntimeClass contains static methods.
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasImage_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasImage_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasImage[] = L"Microsoft.Graphics.Canvas.CanvasImage";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasBrush";
/* [object, uuid("F5D58591-C803-41B4-878E-79D92AB13295"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Opacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Opacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Transform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Transform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Opacity(This,value) \
    ( (This)->lpVtbl->get_Opacity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_put_Opacity(This,value) \
    ( (This)->lpVtbl->put_Opacity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Transform(This,value) \
    ( (This)->lpVtbl->get_Transform(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_put_Transform(This,value) \
    ( (This)->lpVtbl->put_Transform(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush_INTERFACE_DEFINED__) */




/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory";
/* [object, exclusiveto, uuid("8ABF4780-4EDD-4F2B-BF63-2C385115B201"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * * canvasSolidColorBrush
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_Create(This,resourceCreator,color,canvasSolidColorBrush) \
    ( (This)->lpVtbl->Create(This,resourceCreator,color,canvasSolidColorBrush) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics";
/* [object, exclusiveto, uuid("629B7244-5B9E-4EF8-8E09-264714201EE8"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 colorHdr,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * * canvasSolidColorBrush
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_CreateHdr(This,resourceCreator,colorHdr,canvasSolidColorBrush) \
    ( (This)->lpVtbl->CreateHdr(This,resourceCreator,colorHdr,canvasSolidColorBrush) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush";
/* [object, exclusiveto, uuid("8BC30F87-BAD5-4871-88B8-9FE3C63D204A"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_get_Color(This,value) \
    ( (This)->lpVtbl->get_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_put_Color(This,value) \
    ( (This)->lpVtbl->put_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_get_ColorHdr(This,value) \
    ( (This)->lpVtbl->get_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_put_ColorHdr(This,value) \
    ( (This)->lpVtbl->put_ColorHdr(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasSolidColorBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory";
/* [object, exclusiveto, uuid("C40CCB59-1B87-4394-A6A6-ECD278E877D6"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * * canvasImageBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithImage )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * * canvasImageBrush
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_Create(This,resourceCreator,canvasImageBrush) \
    ( (This)->lpVtbl->Create(This,resourceCreator,canvasImageBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_CreateWithImage(This,resourceCreator,image,canvasImageBrush) \
    ( (This)->lpVtbl->CreateWithImage(This,resourceCreator,image,canvasImageBrush) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush";
/* [object, exclusiveto, uuid("5A21C4E7-D450-4942-8BBD-F017097AB763"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Image )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Image )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ExtendX )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ExtendX )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ExtendY )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ExtendY )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [retval, out] */__FIReference_1_Windows__CFoundation__CRect * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [in] */__FIReference_1_Windows__CFoundation__CRect * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_Image(This,value) \
    ( (This)->lpVtbl->get_Image(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_Image(This,value) \
    ( (This)->lpVtbl->put_Image(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_ExtendX(This,value) \
    ( (This)->lpVtbl->get_ExtendX(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_ExtendX(This,value) \
    ( (This)->lpVtbl->put_ExtendX(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_ExtendY(This,value) \
    ( (This)->lpVtbl->get_ExtendY(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_ExtendY(This,value) \
    ( (This)->lpVtbl->put_ExtendY(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_SourceRectangle(This,value) \
    ( (This)->lpVtbl->get_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_SourceRectangle(This,value) \
    ( (This)->lpVtbl->put_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_get_Interpolation(This,value) \
    ( (This)->lpVtbl->get_Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_put_Interpolation(This,value) \
    ( (This)->lpVtbl->put_Interpolation(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasImageBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop
{
    float Position;
    __x_ABI_CWindows_CUI_CColor Color;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr
{
    float Position;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory";
/* [object, exclusiveto, uuid("A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateSimple )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CUI_CColor startColor,
        /* [in] */__x_ABI_CWindows_CUI_CColor endColor,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithStops )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * gradientStops,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndAlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * gradientStops,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndInterpolationOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * gradientStops,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateSimple(This,resourceCreator,startColor,endColor,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateSimple(This,resourceCreator,startColor,endColor,canvasLinearGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasLinearGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasLinearGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics";
/* [object, exclusiveto, uuid("E9DE3392-8FBF-478C-8E6A-D0A0EA753B37"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrSimple )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 startColorHdr,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 endColorHdr,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrWithStops )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * gradientStopsHdr,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndAlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * gradientStopsHdr,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndInterpolationOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * gradientStopsHdr,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateRainbow )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float eldritchness,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * * canvasLinearGradientBrush
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasLinearGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStopsHdr,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStopsHdr,canvasLinearGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,canvasLinearGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStopsHdr,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasLinearGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_CreateRainbow(This,resourceCreator,eldritchness,canvasLinearGradientBrush) \
    ( (This)->lpVtbl->CreateRainbow(This,resourceCreator,eldritchness,canvasLinearGradientBrush) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush";
/* [object, exclusiveto, uuid("A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_StartPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_StartPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_EndPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_EndPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Stops )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_StopsHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_EdgeBehavior )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PreInterpolationSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PostInterpolationSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_StartPoint(This,value) \
    ( (This)->lpVtbl->get_StartPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_put_StartPoint(This,value) \
    ( (This)->lpVtbl->put_StartPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_EndPoint(This,value) \
    ( (This)->lpVtbl->get_EndPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_put_EndPoint(This,value) \
    ( (This)->lpVtbl->put_EndPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_Stops(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_Stops(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_StopsHdr(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_StopsHdr(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_EdgeBehavior(This,value) \
    ( (This)->lpVtbl->get_EdgeBehavior(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_PreInterpolationSpace(This,value) \
    ( (This)->lpVtbl->get_PreInterpolationSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_PostInterpolationSpace(This,value) \
    ( (This)->lpVtbl->get_PostInterpolationSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_BufferPrecision(This,value) \
    ( (This)->lpVtbl->get_BufferPrecision(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasLinearGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory";
/* [object, exclusiveto, uuid("7933A51F-A910-4548-849F-42DDEC466F41"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateSimple )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CUI_CColor startColor,
        /* [in] */__x_ABI_CWindows_CUI_CColor endColor,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithStops )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * gradientStops,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndAlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * gradientStops,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithEdgeBehaviorAndInterpolationOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * gradientStops,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateSimple(This,resourceCreator,startColor,endColor,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateSimple(This,resourceCreator,startColor,endColor,canvasRadialGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics";
/* [object, exclusiveto, uuid("3B0D4DAE-3E21-4818-99B4-779ACAAF18BE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrSimple )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 startColorHdr,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 endColorHdr,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrWithStops )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * gradientStops,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndAlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * gradientStops,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateHdrWithEdgeBehaviorAndInterpolationOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 gradientStopCount,
        /* [size_is(gradientStopCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * gradientStops,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior edgeBehavior,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace preInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace postInterpolationSpace,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision bufferPrecision,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    HRESULT ( STDMETHODCALLTYPE *CreateRainbow )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float eldritchness,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * * canvasRadialGradientBrush
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateHdrSimple(This,resourceCreator,startColorHdr,endColorHdr,canvasRadialGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateHdrWithStops(This,resourceCreator,gradientStopCount,gradientStops,canvasRadialGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateHdrWithEdgeBehaviorAndAlphaMode(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,canvasRadialGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateHdrWithEdgeBehaviorAndInterpolationOptions(This,resourceCreator,gradientStopCount,gradientStops,edgeBehavior,alphaMode,preInterpolationSpace,postInterpolationSpace,bufferPrecision,canvasRadialGradientBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_CreateRainbow(This,resourceCreator,eldritchness,canvasRadialGradientBrush) \
    ( (This)->lpVtbl->CreateRainbow(This,resourceCreator,eldritchness,canvasRadialGradientBrush) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush";
/* [object, exclusiveto, uuid("4D27D756-14A9-4EB7-973F-E6614D4F89E7"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Center )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Center )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OriginOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OriginOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RadiusX )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RadiusX )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RadiusY )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RadiusY )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Stops )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_StopsHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_EdgeBehavior )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PreInterpolationSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PostInterpolationSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BufferPrecision )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_Center(This,value) \
    ( (This)->lpVtbl->get_Center(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_Center(This,value) \
    ( (This)->lpVtbl->put_Center(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_OriginOffset(This,value) \
    ( (This)->lpVtbl->get_OriginOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_OriginOffset(This,value) \
    ( (This)->lpVtbl->put_OriginOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_RadiusX(This,value) \
    ( (This)->lpVtbl->get_RadiusX(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_RadiusX(This,value) \
    ( (This)->lpVtbl->put_RadiusX(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_RadiusY(This,value) \
    ( (This)->lpVtbl->get_RadiusY(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_put_RadiusY(This,value) \
    ( (This)->lpVtbl->put_RadiusY(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_Stops(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_Stops(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_StopsHdr(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_StopsHdr(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_EdgeBehavior(This,value) \
    ( (This)->lpVtbl->get_EdgeBehavior(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_PreInterpolationSpace(This,value) \
    ( (This)->lpVtbl->get_PreInterpolationSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_PostInterpolationSpace(This,value) \
    ( (This)->lpVtbl->get_PostInterpolationSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_BufferPrecision(This,value) \
    ( (This)->lpVtbl->get_BufferPrecision(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Brushes_CanvasRadialGradientBrush[] = L"Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush";
#endif





typedef __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize __x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize;


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasBitmapFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasBitmap
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapFactory[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapFactory";
/* [object, exclusiveto, uuid("F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasBitmap
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasBitmap
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *     Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmap[] = L"Microsoft.Graphics.Canvas.ICanvasBitmap";
/* [object, exclusiveto, uuid("C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Bounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Format )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SaveToFileAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */HSTRING fileName,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * asyncAction
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SaveToFileWithBitmapFileFormatAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */HSTRING fileName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * asyncAction
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SaveToFileWithBitmapFileFormatAndQualityAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */HSTRING fileName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        /* [in] */float quality,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * asyncAction
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SaveToStreamAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * asyncAction
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SaveToStreamWithQualityAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat,
        /* [in] */float quality,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * asyncAction
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPixelBytes )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPixelBytesWithSubrectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */INT32 left,
        /* [in] */INT32 top,
        /* [in] */INT32 width,
        /* [in] */INT32 height,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPixelBytesWithBuffer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIBuffer * buffer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPixelBytesWithBufferAndSubrectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIBuffer * buffer,
        /* [in] */INT32 left,
        /* [in] */INT32 top,
        /* [in] */INT32 width,
        /* [in] */INT32 height
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPixelColors )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CWindows_CUI_CColor * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPixelColorsWithSubrectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */INT32 left,
        /* [in] */INT32 top,
        /* [in] */INT32 width,
        /* [in] */INT32 height,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CWindows_CUI_CColor * * valueElements
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SetPixelBytes )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */BYTE * valueElements
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SetPixelBytesWithSubrectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */BYTE * valueElements,
        /* [in] */INT32 left,
        /* [in] */INT32 top,
        /* [in] */INT32 width,
        /* [in] */INT32 height
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SetPixelBytesWithBuffer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIBuffer * buffer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SetPixelBytesWithBufferAndSubrectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIBuffer * buffer,
        /* [in] */INT32 left,
        /* [in] */INT32 top,
        /* [in] */INT32 width,
        /* [in] */INT32 height
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SetPixelColors )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */__x_ABI_CWindows_CUI_CColor * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SetPixelColorsWithSubrectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */__x_ABI_CWindows_CUI_CColor * valueElements,
        /* [in] */INT32 left,
        /* [in] */INT32 top,
        /* [in] */INT32 width,
        /* [in] */INT32 height
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * otherBitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmapWithDestPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * otherBitmap,
        /* [in] */INT32 destX,
        /* [in] */INT32 destY
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CopyPixelsFromBitmapWithDestPointAndSourceRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * otherBitmap,
        /* [in] */INT32 destX,
        /* [in] */INT32 destY,
        /* [in] */INT32 sourceRectLeft,
        /* [in] */INT32 sourceRectTop,
        /* [in] */INT32 sourceRectWidth,
        /* [in] */INT32 sourceRectHeight
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_SizeInPixels(This,size) \
    ( (This)->lpVtbl->get_SizeInPixels(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Size(This,size) \
    ( (This)->lpVtbl->get_Size(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Bounds(This,bounds) \
    ( (This)->lpVtbl->get_Bounds(This,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_Format(This,value) \
    ( (This)->lpVtbl->get_Format(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileAsync(This,fileName,asyncAction) \
    ( (This)->lpVtbl->SaveToFileAsync(This,fileName,asyncAction) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileWithBitmapFileFormatAsync(This,fileName,fileFormat,asyncAction) \
    ( (This)->lpVtbl->SaveToFileWithBitmapFileFormatAsync(This,fileName,fileFormat,asyncAction) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToFileWithBitmapFileFormatAndQualityAsync(This,fileName,fileFormat,quality,asyncAction) \
    ( (This)->lpVtbl->SaveToFileWithBitmapFileFormatAndQualityAsync(This,fileName,fileFormat,quality,asyncAction) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToStreamAsync(This,stream,fileFormat,asyncAction) \
    ( (This)->lpVtbl->SaveToStreamAsync(This,stream,fileFormat,asyncAction) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SaveToStreamWithQualityAsync(This,stream,fileFormat,quality,asyncAction) \
    ( (This)->lpVtbl->SaveToStreamWithQualityAsync(This,stream,fileFormat,quality,asyncAction) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytes(This,valueCount,valueElements) \
    ( (This)->lpVtbl->GetPixelBytes(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytesWithSubrectangle(This,left,top,width,height,valueCount,valueElements) \
    ( (This)->lpVtbl->GetPixelBytesWithSubrectangle(This,left,top,width,height,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytesWithBuffer(This,buffer) \
    ( (This)->lpVtbl->GetPixelBytesWithBuffer(This,buffer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height) \
    ( (This)->lpVtbl->GetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelColors(This,valueCount,valueElements) \
    ( (This)->lpVtbl->GetPixelColors(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_GetPixelColorsWithSubrectangle(This,left,top,width,height,valueCount,valueElements) \
    ( (This)->lpVtbl->GetPixelColorsWithSubrectangle(This,left,top,width,height,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytes(This,valueCount,valueElements) \
    ( (This)->lpVtbl->SetPixelBytes(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytesWithSubrectangle(This,valueCount,valueElements,left,top,width,height) \
    ( (This)->lpVtbl->SetPixelBytesWithSubrectangle(This,valueCount,valueElements,left,top,width,height) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytesWithBuffer(This,buffer) \
    ( (This)->lpVtbl->SetPixelBytesWithBuffer(This,buffer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height) \
    ( (This)->lpVtbl->SetPixelBytesWithBufferAndSubrectangle(This,buffer,left,top,width,height) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelColors(This,valueCount,valueElements) \
    ( (This)->lpVtbl->SetPixelColors(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_SetPixelColorsWithSubrectangle(This,valueCount,valueElements,left,top,width,height) \
    ( (This)->lpVtbl->SetPixelColorsWithSubrectangle(This,valueCount,valueElements,left,top,width,height) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmap(This,otherBitmap) \
    ( (This)->lpVtbl->CopyPixelsFromBitmap(This,otherBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmapWithDestPoint(This,otherBitmap,destX,destY) \
    ( (This)->lpVtbl->CopyPixelsFromBitmapWithDestPoint(This,otherBitmap,destX,destY) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_CopyPixelsFromBitmapWithDestPointAndSourceRect(This,otherBitmap,destX,destY,sourceRectLeft,sourceRectTop,sourceRectWidth,sourceRectHeight) \
    ( (This)->lpVtbl->CopyPixelsFromBitmapWithDestPointAndSourceRect(This,otherBitmap,destX,destY,sourceRectLeft,sourceRectTop,sourceRectWidth,sourceRectHeight) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasBitmapStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasBitmap
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasBitmapStatics[] = L"Microsoft.Graphics.Canvas.ICanvasBitmapStatics";
/* [object, exclusiveto, uuid("C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Surface )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface * surface,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface * surface,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface * surface,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromBytes )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 byteCount,
        /* [size_is(byteCount), in] */BYTE * bytes,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 byteCount,
        /* [size_is(byteCount), in] */BYTE * bytes,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 byteCount,
        /* [size_is(byteCount), in] */BYTE * bytes,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithBuffer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIBuffer * buffer,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithBufferAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIBuffer * buffer,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromBytesWithBufferAndDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIBuffer * buffer,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromColors )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 colorCount,
        /* [size_is(colorCount), in] */__x_ABI_CWindows_CUI_CColor * colors,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromColorsWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 colorCount,
        /* [size_is(colorCount), in] */__x_ABI_CWindows_CUI_CColor * colors,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromColorsWithDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 colorCount,
        /* [size_is(colorCount), in] */__x_ABI_CWindows_CUI_CColor * colors,
        /* [in] */INT32 widthInPixels,
        /* [in] */INT32 heightInPixels,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    HRESULT ( STDMETHODCALLTYPE *CreateFromSoftwareBitmap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap * sourceBitmap,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstring )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING fileName,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstringWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING fileName,
        /* [in] */float dpi,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromHstringWithDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING fileName,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUri )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CIUriRuntimeClass * uri,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CIUriRuntimeClass * uri,
        /* [in] */float dpi,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CIUriRuntimeClass * uri,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStream )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */float dpi,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasBitmap * * canvasBitmap
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) \
    ( (This)->lpVtbl->CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) \
    ( (This)->lpVtbl->CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) \
    ( (This)->lpVtbl->CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytes(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,bitmap) \
    ( (This)->lpVtbl->CreateFromBytes(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithDpi(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,bitmap) \
    ( (This)->lpVtbl->CreateFromBytesWithDpi(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithDpiAndAlpha(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,alpha,bitmap) \
    ( (This)->lpVtbl->CreateFromBytesWithDpiAndAlpha(This,resourceCreator,byteCount,bytes,widthInPixels,heightInPixels,format,dpi,alpha,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithBuffer(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,bitmap) \
    ( (This)->lpVtbl->CreateFromBytesWithBuffer(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithBufferAndDpi(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,bitmap) \
    ( (This)->lpVtbl->CreateFromBytesWithBufferAndDpi(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromBytesWithBufferAndDpiAndAlpha(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,alpha,bitmap) \
    ( (This)->lpVtbl->CreateFromBytesWithBufferAndDpiAndAlpha(This,resourceCreator,buffer,widthInPixels,heightInPixels,format,dpi,alpha,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColors(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,bitmap) \
    ( (This)->lpVtbl->CreateFromColors(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColorsWithDpi(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,bitmap) \
    ( (This)->lpVtbl->CreateFromColorsWithDpi(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromColorsWithDpiAndAlpha(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,alpha,bitmap) \
    ( (This)->lpVtbl->CreateFromColorsWithDpiAndAlpha(This,resourceCreator,colorCount,colors,widthInPixels,heightInPixels,dpi,alpha,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_CreateFromSoftwareBitmap(This,resourceCreator,sourceBitmap,bitmap) \
    ( (This)->lpVtbl->CreateFromSoftwareBitmap(This,resourceCreator,sourceBitmap,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstring(This,resourceCreator,fileName,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromHstring(This,resourceCreator,fileName,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstringWithDpi(This,resourceCreator,fileName,dpi,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromHstringWithDpi(This,resourceCreator,fileName,dpi,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromHstringWithDpiAndAlpha(This,resourceCreator,fileName,dpi,alpha,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromHstringWithDpiAndAlpha(This,resourceCreator,fileName,dpi,alpha,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUri(This,resourceCreator,uri,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromUri(This,resourceCreator,uri,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUriWithDpi(This,resourceCreator,uri,dpi,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromUriWithDpi(This,resourceCreator,uri,dpi,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromUriWithDpiAndAlpha(This,resourceCreator,uri,dpi,alpha,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromUriWithDpiAndAlpha(This,resourceCreator,uri,dpi,alpha,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStream(This,resourceCreator,stream,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromStream(This,resourceCreator,stream,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStreamWithDpi(This,resourceCreator,stream,dpi,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromStreamWithDpi(This,resourceCreator,stream,dpi,canvasBitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_LoadAsyncFromStreamWithDpiAndAlpha(This,resourceCreator,stream,dpi,alpha,canvasBitmap) \
    ( (This)->lpVtbl->LoadAsyncFromStreamWithDpiAndAlpha(This,resourceCreator,stream,dpi,alpha,canvasBitmap) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasBitmap
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasBitmap ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasBitmap_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasBitmap[] = L"Microsoft.Graphics.Canvas.CanvasBitmap";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory";
/* [object, exclusiveto, uuid("620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateWithSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize size,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * * renderTarget
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * * renderTarget
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * * renderTarget
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndFormatAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * * renderTarget
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithSize(This,resourceCreator,size,renderTarget) \
    ( (This)->lpVtbl->CreateWithSize(This,resourceCreator,size,renderTarget) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,renderTarget) \
    ( (This)->lpVtbl->CreateWithWidthAndHeight(This,resourceCreator,width,height,renderTarget) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,renderTarget) \
    ( (This)->lpVtbl->CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,renderTarget) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(This,resourceCreator,width,height,dpi,format,alpha,renderTarget) \
    ( (This)->lpVtbl->CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(This,resourceCreator,width,height,dpi,format,alpha,renderTarget) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics";
/* [object, exclusiveto, uuid("C7D1FE37-DD57-45D7-BCC1-15625A21E8D5"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11Surface )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface * surface,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface * surface,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * * bitmap
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFromDirect3D11SurfaceWithDpiAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface * surface,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * * bitmap
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) \
    ( (This)->lpVtbl->CreateFromDirect3D11Surface(This,resourceCreator,surface,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) \
    ( (This)->lpVtbl->CreateFromDirect3D11SurfaceWithDpi(This,resourceCreator,surface,dpi,bitmap) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) \
    ( (This)->lpVtbl->CreateFromDirect3D11SurfaceWithDpiAndAlpha(This,resourceCreator,surface,dpi,alpha,bitmap) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasRenderTarget
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.ICanvasRenderTarget";
/* [object, exclusiveto, uuid("2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTargetVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_CreateDrawingSession(This,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSession(This,drawingSession) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasRenderTarget
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasRenderTarget ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasRenderTarget_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasRenderTarget[] = L"Microsoft.Graphics.Canvas.CanvasRenderTarget";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasVirtualBitmapOptions
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions
{
    CanvasVirtualBitmapOptions_None,
    CanvasVirtualBitmapOptions_ReleaseSource,
    CanvasVirtualBitmapOptions_CacheOnDemand,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions;


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasVirtualBitmap
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics[] = L"Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics";
/* [object, exclusiveto, uuid("B2F1F8E9-0770-4DD4-956D-78D911390957"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromFileName )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING fileName,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromFileNameWithOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING fileName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromFileNameWithOptionsAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING fileName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUri )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CIUriRuntimeClass * uri,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CIUriRuntimeClass * uri,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromUriWithOptionsAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CIUriRuntimeClass * uri,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStream )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *LoadAsyncFromStreamWithOptionsAndAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions options,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CCanvasVirtualBitmap * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromFileName(This,resourceCreator,fileName,value) \
    ( (This)->lpVtbl->LoadAsyncFromFileName(This,resourceCreator,fileName,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromFileNameWithOptions(This,resourceCreator,fileName,options,value) \
    ( (This)->lpVtbl->LoadAsyncFromFileNameWithOptions(This,resourceCreator,fileName,options,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromFileNameWithOptionsAndAlpha(This,resourceCreator,fileName,options,alpha,value) \
    ( (This)->lpVtbl->LoadAsyncFromFileNameWithOptionsAndAlpha(This,resourceCreator,fileName,options,alpha,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromUri(This,resourceCreator,uri,value) \
    ( (This)->lpVtbl->LoadAsyncFromUri(This,resourceCreator,uri,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromUriWithOptions(This,resourceCreator,uri,options,value) \
    ( (This)->lpVtbl->LoadAsyncFromUriWithOptions(This,resourceCreator,uri,options,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromUriWithOptionsAndAlpha(This,resourceCreator,uri,options,alpha,value) \
    ( (This)->lpVtbl->LoadAsyncFromUriWithOptionsAndAlpha(This,resourceCreator,uri,options,alpha,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromStream(This,resourceCreator,stream,value) \
    ( (This)->lpVtbl->LoadAsyncFromStream(This,resourceCreator,stream,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromStreamWithOptions(This,resourceCreator,stream,options,value) \
    ( (This)->lpVtbl->LoadAsyncFromStreamWithOptions(This,resourceCreator,stream,options,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_LoadAsyncFromStreamWithOptionsAndAlpha(This,resourceCreator,stream,options,alpha,value) \
    ( (This)->lpVtbl->LoadAsyncFromStreamWithOptionsAndAlpha(This,resourceCreator,stream,options,alpha,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasVirtualBitmap
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasVirtualBitmap
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasVirtualBitmap[] = L"Microsoft.Graphics.Canvas.ICanvasVirtualBitmap";
/* [object, exclusiveto, uuid("707D8BB0-05F9-484C-9EE2-179E0681C8A7"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsCachedOnDemand )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Bounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmapVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_IsCachedOnDemand(This,value) \
    ( (This)->lpVtbl->get_IsCachedOnDemand(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_SizeInPixels(This,value) \
    ( (This)->lpVtbl->get_SizeInPixels(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_Size(This,value) \
    ( (This)->lpVtbl->get_Size(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_get_Bounds(This,value) \
    ( (This)->lpVtbl->get_Bounds(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasVirtualBitmap
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasVirtualBitmap ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasVirtualBitmap_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasVirtualBitmap_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasVirtualBitmap[] = L"Microsoft.Graphics.Canvas.CanvasVirtualBitmap";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle";
/* [object, exclusiveto, uuid("FD3E1CD2-6019-40A1-B315-267EEF6C2AEB"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_StartCap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_StartCap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_EndCap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_EndCap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DashCap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DashCap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineJoin )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LineJoin )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MiterLimit )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_MiterLimit )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DashStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DashStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DashOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DashOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CustomDashStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CustomDashStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TransformBehavior )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TransformBehavior )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_StartCap(This,value) \
    ( (This)->lpVtbl->get_StartCap(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_StartCap(This,value) \
    ( (This)->lpVtbl->put_StartCap(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_EndCap(This,value) \
    ( (This)->lpVtbl->get_EndCap(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_EndCap(This,value) \
    ( (This)->lpVtbl->put_EndCap(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashCap(This,value) \
    ( (This)->lpVtbl->get_DashCap(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashCap(This,value) \
    ( (This)->lpVtbl->put_DashCap(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_LineJoin(This,value) \
    ( (This)->lpVtbl->get_LineJoin(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_LineJoin(This,value) \
    ( (This)->lpVtbl->put_LineJoin(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_MiterLimit(This,value) \
    ( (This)->lpVtbl->get_MiterLimit(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_MiterLimit(This,value) \
    ( (This)->lpVtbl->put_MiterLimit(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashStyle(This,value) \
    ( (This)->lpVtbl->get_DashStyle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashStyle(This,value) \
    ( (This)->lpVtbl->put_DashStyle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_DashOffset(This,value) \
    ( (This)->lpVtbl->get_DashOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_DashOffset(This,value) \
    ( (This)->lpVtbl->put_DashOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_CustomDashStyle(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_CustomDashStyle(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_CustomDashStyle(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_CustomDashStyle(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_get_TransformBehavior(This,value) \
    ( (This)->lpVtbl->get_TransformBehavior(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_put_TransformBehavior(This,value) \
    ( (This)->lpVtbl->put_TransformBehavior(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition
{
    CanvasLineBreakCondition_Neutral,
    CanvasLineBreakCondition_CanBreak,
    CanvasLineBreakCondition_CannotBreak,
    CanvasLineBreakCondition_MustBreak,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextInlineObject[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject";
/* [object, uuid("7A89EE99-CE2A-47FA-9DD2-0A6825F6053F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Draw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * textRenderer,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */boolean isSideways,
        /* [in] */boolean isRightToLeft,
        /* [in] */IInspectable * brush
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Baseline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SupportsSideways )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DrawBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BreakBefore )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BreakAfter )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_Draw(This,textRenderer,point,isSideways,isRightToLeft,brush) \
    ( (This)->lpVtbl->Draw(This,textRenderer,point,isSideways,isRightToLeft,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_Size(This,value) \
    ( (This)->lpVtbl->get_Size(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_Baseline(This,value) \
    ( (This)->lpVtbl->get_Baseline(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_SupportsSideways(This,value) \
    ( (This)->lpVtbl->get_SupportsSideways(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_DrawBounds(This,bounds) \
    ( (This)->lpVtbl->get_DrawBounds(This,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_BreakBefore(This,value) \
    ( (This)->lpVtbl->get_BreakBefore(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_get_BreakAfter(This,value) \
    ( (This)->lpVtbl->get_BreakAfter(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject_INTERFACE_DEFINED__) */




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextDirection
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection
{
    CanvasTextDirection_LeftToRightThenTopToBottom,
    CanvasTextDirection_RightToLeftThenTopToBottom,
    CanvasTextDirection_LeftToRightThenBottomToTop,
    CanvasTextDirection_RightToLeftThenBottomToTop,
    CanvasTextDirection_TopToBottomThenLeftToRight,
    CanvasTextDirection_BottomToTopThenLeftToRight,
    CanvasTextDirection_TopToBottomThenRightToLeft,
    CanvasTextDirection_BottomToTopThenRightToLeft,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment
{
    CanvasHorizontalAlignment_Left,
    CanvasHorizontalAlignment_Right,
    CanvasHorizontalAlignment_Center,
    CanvasHorizontalAlignment_Justified,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment
{
    CanvasVerticalAlignment_Top,
    CanvasVerticalAlignment_Bottom,
    CanvasVerticalAlignment_Center,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity
{
    CanvasTextTrimmingGranularity_None,
    CanvasTextTrimmingGranularity_Character,
    CanvasTextTrimmingGranularity_Word,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasWordWrapping
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping
{
    CanvasWordWrapping_Wrap,
    CanvasWordWrapping_NoWrap,
    CanvasWordWrapping_EmergencyBreak,
    CanvasWordWrapping_WholeWord,
    CanvasWordWrapping_Character,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode
{
    CanvasLineSpacingMode_Default,
    CanvasLineSpacingMode_Uniform,
    CanvasLineSpacingMode_Proportional,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment
{
    CanvasOpticalAlignment_Default,
    CanvasOpticalAlignment_NoSideBearings,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation
{
    CanvasVerticalGlyphOrientation_Default,
    CanvasVerticalGlyphOrientation_Stacked,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign
{
    CanvasTrimmingSign_None,
    CanvasTrimmingSign_Ellipsis,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextFormat
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextFormat
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormat";
/* [object, exclusiveto, uuid("AF61BFDC-EABB-4D38-BA1B-AFB340612D33"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Direction )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Direction )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FontFamily )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */HSTRING * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_FontFamily )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */HSTRING value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FontSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_FontSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FontStretch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStretch * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_FontStretch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontStretch value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FontStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStyle * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_FontStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontStyle value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FontWeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontWeight * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_FontWeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontWeight value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IncrementalTabStop )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_IncrementalTabStop )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineSpacingBaseline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LineSpacingBaseline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LocaleName )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */HSTRING * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LocaleName )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */HSTRING value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingGranularity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingGranularity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiter )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */HSTRING * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiter )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */HSTRING value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiterCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiterCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_WordWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_WordWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Options )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Options )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_VerticalGlyphOrientation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_VerticalGlyphOrientation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OpticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OpticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LastLineWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LastLineWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineSpacingMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LineSpacingMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CustomTrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CustomTrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_Direction(This,value) \
    ( (This)->lpVtbl->get_Direction(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_Direction(This,value) \
    ( (This)->lpVtbl->put_Direction(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontFamily(This,value) \
    ( (This)->lpVtbl->get_FontFamily(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontFamily(This,value) \
    ( (This)->lpVtbl->put_FontFamily(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontSize(This,value) \
    ( (This)->lpVtbl->get_FontSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontSize(This,value) \
    ( (This)->lpVtbl->put_FontSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontStretch(This,value) \
    ( (This)->lpVtbl->get_FontStretch(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontStretch(This,value) \
    ( (This)->lpVtbl->put_FontStretch(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontStyle(This,value) \
    ( (This)->lpVtbl->get_FontStyle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontStyle(This,value) \
    ( (This)->lpVtbl->put_FontStyle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_FontWeight(This,value) \
    ( (This)->lpVtbl->get_FontWeight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_FontWeight(This,value) \
    ( (This)->lpVtbl->put_FontWeight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_IncrementalTabStop(This,value) \
    ( (This)->lpVtbl->get_IncrementalTabStop(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_IncrementalTabStop(This,value) \
    ( (This)->lpVtbl->put_IncrementalTabStop(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacing(This,value) \
    ( (This)->lpVtbl->get_LineSpacing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacing(This,value) \
    ( (This)->lpVtbl->put_LineSpacing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacingBaseline(This,value) \
    ( (This)->lpVtbl->get_LineSpacingBaseline(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacingBaseline(This,value) \
    ( (This)->lpVtbl->put_LineSpacingBaseline(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LocaleName(This,value) \
    ( (This)->lpVtbl->get_LocaleName(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LocaleName(This,value) \
    ( (This)->lpVtbl->put_LocaleName(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_VerticalAlignment(This,value) \
    ( (This)->lpVtbl->get_VerticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_VerticalAlignment(This,value) \
    ( (This)->lpVtbl->put_VerticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_HorizontalAlignment(This,value) \
    ( (This)->lpVtbl->get_HorizontalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_HorizontalAlignment(This,value) \
    ( (This)->lpVtbl->put_HorizontalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingGranularity(This,value) \
    ( (This)->lpVtbl->get_TrimmingGranularity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingGranularity(This,value) \
    ( (This)->lpVtbl->put_TrimmingGranularity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingDelimiter(This,value) \
    ( (This)->lpVtbl->get_TrimmingDelimiter(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingDelimiter(This,value) \
    ( (This)->lpVtbl->put_TrimmingDelimiter(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingDelimiterCount(This,value) \
    ( (This)->lpVtbl->get_TrimmingDelimiterCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingDelimiterCount(This,value) \
    ( (This)->lpVtbl->put_TrimmingDelimiterCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_WordWrapping(This,value) \
    ( (This)->lpVtbl->get_WordWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_WordWrapping(This,value) \
    ( (This)->lpVtbl->put_WordWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_Options(This,value) \
    ( (This)->lpVtbl->get_Options(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_Options(This,value) \
    ( (This)->lpVtbl->put_Options(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_VerticalGlyphOrientation(This,value) \
    ( (This)->lpVtbl->get_VerticalGlyphOrientation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_VerticalGlyphOrientation(This,value) \
    ( (This)->lpVtbl->put_VerticalGlyphOrientation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_OpticalAlignment(This,value) \
    ( (This)->lpVtbl->get_OpticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_OpticalAlignment(This,value) \
    ( (This)->lpVtbl->put_OpticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LastLineWrapping(This,value) \
    ( (This)->lpVtbl->get_LastLineWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LastLineWrapping(This,value) \
    ( (This)->lpVtbl->put_LastLineWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_LineSpacingMode(This,value) \
    ( (This)->lpVtbl->get_LineSpacingMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_LineSpacingMode(This,value) \
    ( (This)->lpVtbl->put_LineSpacingMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_TrimmingSign(This,value) \
    ( (This)->lpVtbl->get_TrimmingSign(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_TrimmingSign(This,value) \
    ( (This)->lpVtbl->put_TrimmingSign(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_get_CustomTrimmingSign(This,value) \
    ( (This)->lpVtbl->get_CustomTrimmingSign(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_put_CustomTrimmingSign(This,value) \
    ( (This)->lpVtbl->put_CustomTrimmingSign(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextFormat
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics";
/* [object, exclusiveto, uuid("8A927515-33FC-4C92-A6AA-94A8F29C140B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *GetSystemFontFamilies )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */HSTRING * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetSystemFontFamiliesFromLocaleList )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics * This,
        /* [in] */__FIVectorView_1_HSTRING * localeList,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */HSTRING * * valueElements
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetSystemFontFamilies(This,valueCount,valueElements) \
    ( (This)->lpVtbl->GetSystemFontFamilies(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_GetSystemFontFamiliesFromLocaleList(This,localeList,valueCount,valueElements) \
    ( (This)->lpVtbl->GetSystemFontFamiliesFromLocaleList(This,localeList,valueCount,valueElements) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextFormat
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextFormat ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextFormat_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextFormat[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextFormat";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName
{
    CanvasTypographyFeatureName_None = 0,
    CanvasTypographyFeatureName_Default = 1953261156,
    CanvasTypographyFeatureName_VerticalWriting = 1953654134,
    CanvasTypographyFeatureName_VerticalAlternatesAndRotation = 846492278,
    CanvasTypographyFeatureName_AlternativeFractions = 1668441697,
    CanvasTypographyFeatureName_PetiteCapitalsFromCapitals = 1668297315,
    CanvasTypographyFeatureName_SmallCapitalsFromCapitals = 1668493923,
    CanvasTypographyFeatureName_ContextualAlternates = 1953259875,
    CanvasTypographyFeatureName_CaseSensitiveForms = 1702060387,
    CanvasTypographyFeatureName_GlyphCompositionDecomposition = 1886217059,
    CanvasTypographyFeatureName_ContextualLigatures = 1734962275,
    CanvasTypographyFeatureName_CapitalSpacing = 1886613603,
    CanvasTypographyFeatureName_ContextualSwash = 1752658787,
    CanvasTypographyFeatureName_CursivePositioning = 1936880995,
    CanvasTypographyFeatureName_DiscretionaryLigatures = 1734962276,
    CanvasTypographyFeatureName_ExpertForms = 1953527909,
    CanvasTypographyFeatureName_Fractions = 1667330662,
    CanvasTypographyFeatureName_FullWidth = 1684633446,
    CanvasTypographyFeatureName_HalfForms = 1718378856,
    CanvasTypographyFeatureName_HalantForms = 1852596584,
    CanvasTypographyFeatureName_AlternateHalfWidth = 1953259880,
    CanvasTypographyFeatureName_HistoricalForms = 1953720680,
    CanvasTypographyFeatureName_HorizontalKanaAlternates = 1634626408,
    CanvasTypographyFeatureName_HistoricalLigatures = 1734962280,
    CanvasTypographyFeatureName_HalfWidth = 1684633448,
    CanvasTypographyFeatureName_HojoKanjiForms = 1869246312,
    CanvasTypographyFeatureName_Jis04Forms = 875589738,
    CanvasTypographyFeatureName_Jis78Forms = 943157354,
    CanvasTypographyFeatureName_Jis83Forms = 859336810,
    CanvasTypographyFeatureName_Jis90Forms = 809070698,
    CanvasTypographyFeatureName_Kerning = 1852990827,
    CanvasTypographyFeatureName_StandardLigatures = 1634167148,
    CanvasTypographyFeatureName_LiningFigures = 1836412524,
    CanvasTypographyFeatureName_LocalizedForms = 1818455916,
    CanvasTypographyFeatureName_MarkPositioning = 1802658157,
    CanvasTypographyFeatureName_MathematicalGreek = 1802659693,
    CanvasTypographyFeatureName_MarkToMarkPositioning = 1802333037,
    CanvasTypographyFeatureName_AlternateAnnotationForms = 1953259886,
    CanvasTypographyFeatureName_NlcKanjiForms = 1801677934,
    CanvasTypographyFeatureName_OldStyleFigures = 1836412527,
    CanvasTypographyFeatureName_Ordinals = 1852076655,
    CanvasTypographyFeatureName_ProportionalAlternateWidth = 1953259888,
    CanvasTypographyFeatureName_PetiteCapitals = 1885430640,
    CanvasTypographyFeatureName_ProportionalFigures = 1836412528,
    CanvasTypographyFeatureName_ProportionalWidths = 1684633456,
    CanvasTypographyFeatureName_QuarterWidths = 1684633457,
    CanvasTypographyFeatureName_RequiredLigatures = 1734962290,
    CanvasTypographyFeatureName_RubyNotationForms = 2036495730,
    CanvasTypographyFeatureName_StylisticAlternates = 1953259891,
    CanvasTypographyFeatureName_ScientificInferiors = 1718511987,
    CanvasTypographyFeatureName_SmallCapitals = 1885564275,
    CanvasTypographyFeatureName_SimplifiedForms = 1819307379,
    CanvasTypographyFeatureName_StylisticSet1 = 825258867,
    CanvasTypographyFeatureName_StylisticSet2 = 842036083,
    CanvasTypographyFeatureName_StylisticSet3 = 858813299,
    CanvasTypographyFeatureName_StylisticSet4 = 875590515,
    CanvasTypographyFeatureName_StylisticSet5 = 892367731,
    CanvasTypographyFeatureName_StylisticSet6 = 909144947,
    CanvasTypographyFeatureName_StylisticSet7 = 925922163,
    CanvasTypographyFeatureName_StylisticSet8 = 942699379,
    CanvasTypographyFeatureName_StylisticSet9 = 959476595,
    CanvasTypographyFeatureName_StylisticSet10 = 808547187,
    CanvasTypographyFeatureName_StylisticSet11 = 825324403,
    CanvasTypographyFeatureName_StylisticSet12 = 842101619,
    CanvasTypographyFeatureName_StylisticSet13 = 858878835,
    CanvasTypographyFeatureName_StylisticSet14 = 875656051,
    CanvasTypographyFeatureName_StylisticSet15 = 892433267,
    CanvasTypographyFeatureName_StylisticSet16 = 909210483,
    CanvasTypographyFeatureName_StylisticSet17 = 925987699,
    CanvasTypographyFeatureName_StylisticSet18 = 942764915,
    CanvasTypographyFeatureName_StylisticSet19 = 959542131,
    CanvasTypographyFeatureName_StylisticSet20 = 808612723,
    CanvasTypographyFeatureName_Subscript = 1935832435,
    CanvasTypographyFeatureName_Superscript = 1936749939,
    CanvasTypographyFeatureName_Swash = 1752397683,
    CanvasTypographyFeatureName_Titling = 1819568500,
    CanvasTypographyFeatureName_TraditionalNameForms = 1835101812,
    CanvasTypographyFeatureName_TabularFigures = 1836412532,
    CanvasTypographyFeatureName_TraditionalForms = 1684107892,
    CanvasTypographyFeatureName_ThirdWidths = 1684633460,
    CanvasTypographyFeatureName_Unicase = 1667853941,
    CanvasTypographyFeatureName_SlashedZero = 1869768058,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature
{
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName Name;
    UINT32 Parameter;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTypography
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTypography
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTypography[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTypography";
/* [object, exclusiveto, uuid("F15BC312-447F-44ED-8BEC-7E40F4A4DFC8"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypographyVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *AddFeature )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature feature
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *AddFeatureWithNameAndParameter )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName name,
        /* [in] */UINT32 parameter
        );
    HRESULT ( STDMETHODCALLTYPE *GetFeatures )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * This,
        /* [out] */UINT32 * featureCount,
        /* [retval, size_is(, *(featureCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature * * features
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypographyVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypographyVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_AddFeature(This,feature) \
    ( (This)->lpVtbl->AddFeature(This,feature) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_AddFeatureWithNameAndParameter(This,name,parameter) \
    ( (This)->lpVtbl->AddFeatureWithNameAndParameter(This,name,parameter) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_GetFeatures(This,featureCount,features) \
    ( (This)->lpVtbl->GetFeatures(This,featureCount,features) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTypography
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTypography ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTypography_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTypography_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTypography[] = L"Microsoft.Graphics.Canvas.Text.CanvasTypography";
#endif





/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion
{
    int CharacterIndex;
    int CharacterCount;
    __x_ABI_CWindows_CFoundation_CRect LayoutBounds;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasClusterProperties
 *
 */
/* [flags, version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties
{
    CanvasClusterProperties_None = 0,
    CanvasClusterProperties_CanWrapLineAfter = 0x1,
    CanvasClusterProperties_Whitespace = 0x2,
    CanvasClusterProperties_Newline = 0x4,
    CanvasClusterProperties_SoftHyphen = 0x8,
    CanvasClusterProperties_RightToLeft = 0x10,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics
{
    int CharacterCount;
    float Width;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties Properties;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasLineMetrics
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics
{
    int CharacterCount;
    int TrailingWhitespaceCount;
    int TerminalNewlineCount;
    float Height;
    float Baseline;
    boolean IsTrimmed;
    float LeadingWhitespaceBefore;
    float LeadingWhitespaceAfter;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation
{
    CanvasGlyphOrientation_Upright,
    CanvasGlyphOrientation_Clockwise90Degrees,
    CanvasGlyphOrientation_Clockwise180Degrees,
    CanvasGlyphOrientation_Clockwise270Degrees,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayout
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayout";
/* [object, exclusiveto, uuid("BAE63E54-48AE-4446-A2C7-B6EF93806C20"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *GetFormatChangeIndices )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [out] */UINT32 * stopCount,
        /* [retval, size_is(, *(stopCount)), out] */INT32 * * stops
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Direction )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Direction )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DefaultFontFamily )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */HSTRING * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DefaultFontSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DefaultFontStretch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStretch * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DefaultFontStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStyle * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DefaultFontWeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontWeight * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IncrementalTabStop )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_IncrementalTabStop )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineSpacing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LineSpacing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineSpacingBaseline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LineSpacingBaseline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DefaultLocaleName )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */HSTRING * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_VerticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_VerticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HorizontalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HorizontalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingGranularity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingGranularity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiter )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */HSTRING * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiter )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */HSTRING value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingDelimiterCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingDelimiterCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_WordWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_WordWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Options )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Options )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineSpacingMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LineSpacingMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CustomTrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CustomTrimmingSign )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RequestedSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RequestedSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize value
        );
    HRESULT ( STDMETHODCALLTYPE *GetMinimumLineLength )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */float * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * * brush
        );
    HRESULT ( STDMETHODCALLTYPE *GetCustomBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */IInspectable * * brush
        );
    HRESULT ( STDMETHODCALLTYPE *GetFontFamily )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */HSTRING * fontFamily
        );
    HRESULT ( STDMETHODCALLTYPE *GetFontSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */float * fontSize
        );
    HRESULT ( STDMETHODCALLTYPE *GetFontStretch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStretch * fontStretch
        );
    HRESULT ( STDMETHODCALLTYPE *GetFontStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStyle * fontStyle
        );
    HRESULT ( STDMETHODCALLTYPE *GetFontWeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontWeight * fontWeight
        );
    HRESULT ( STDMETHODCALLTYPE *GetLocaleName )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */HSTRING * localeName
        );
    HRESULT ( STDMETHODCALLTYPE *GetStrikethrough )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */boolean * hasStrikethrough
        );
    HRESULT ( STDMETHODCALLTYPE *GetUnderline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */boolean * hasUnderline
        );
    HRESULT ( STDMETHODCALLTYPE *GetInlineObject )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * * inlineObject
        );
    HRESULT ( STDMETHODCALLTYPE *SetColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    HRESULT ( STDMETHODCALLTYPE *SetBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    HRESULT ( STDMETHODCALLTYPE *SetCustomBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */IInspectable * brush
        );
    HRESULT ( STDMETHODCALLTYPE *SetFontFamily )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */HSTRING fontFamily
        );
    HRESULT ( STDMETHODCALLTYPE *SetFontSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */float fontSize
        );
    HRESULT ( STDMETHODCALLTYPE *SetFontStretch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontStretch fontStretch
        );
    HRESULT ( STDMETHODCALLTYPE *SetFontStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontStyle fontStyle
        );
    HRESULT ( STDMETHODCALLTYPE *SetFontWeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontWeight fontWeight
        );
    HRESULT ( STDMETHODCALLTYPE *SetLocaleName )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */HSTRING name
        );
    HRESULT ( STDMETHODCALLTYPE *SetStrikethrough )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */boolean hasStrikethrough
        );
    HRESULT ( STDMETHODCALLTYPE *SetUnderline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */boolean hasUnderline
        );
    HRESULT ( STDMETHODCALLTYPE *SetInlineObject )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * inlineObject
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawToTextRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * textRenderer,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 position
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawToTextRendererWithCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * textRenderer,
        /* [in] */float x,
        /* [in] */float y
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineMetrics )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClusterMetrics )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *SetTypography )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * typography
        );
    HRESULT ( STDMETHODCALLTYPE *GetTypography )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography * * typography
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LayoutBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LayoutBoundsIncludingTrailingWhitespace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */INT32 * lineCount
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MaximumBidiReorderingDepth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */int * depth
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DrawBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *HitTest )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [retval, out] */boolean * isHit
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *HitTestWithCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [retval, out] */boolean * isHit
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *HitTestWithDescription )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion * textLayoutRegion,
        /* [retval, out] */boolean * isHit
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion * textLayoutRegion,
        /* [retval, out] */boolean * isHit
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndTrailingSide )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion * textLayoutRegion,
        /* [out] */boolean * trailingSideOfCharacter,
        /* [retval, out] */boolean * isHit
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *HitTestWithDescriptionAndCoordsAndTrailingSide )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion * textLayoutRegion,
        /* [out] */boolean * trailingSideOfCharacter,
        /* [retval, out] */boolean * isHit
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetCaretPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */boolean trailingSideOfCharacter,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * location
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *GetCaretPositionWithDescription )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */boolean trailingSideOfCharacter,
        /* [out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion * textLayoutRegion,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * location
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *GetCharacterRegions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [out] */UINT32 * hitTestDescriptionCount,
        /* [retval, size_is(, *(hitTestDescriptionCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion * * hitTestDescriptions
        );
    HRESULT ( STDMETHODCALLTYPE *GetPairKerning )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */boolean * hasPairKerning
        );
    HRESULT ( STDMETHODCALLTYPE *SetPairKerning )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */boolean hasPairKerning
        );
    HRESULT ( STDMETHODCALLTYPE *GetLeadingCharacterSpacing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */float * leadingSpacing
        );
    HRESULT ( STDMETHODCALLTYPE *GetTrailingCharacterSpacing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */float * trailingSpacing
        );
    HRESULT ( STDMETHODCALLTYPE *GetMinimumCharacterAdvance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [retval, out] */float * minimumAdvance
        );
    HRESULT ( STDMETHODCALLTYPE *SetCharacterSpacing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */INT32 characterIndex,
        /* [in] */INT32 characterCount,
        /* [in] */float leadingSpacing,
        /* [in] */float trailingSpacing,
        /* [in] */float minimumAdvance
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_VerticalGlyphOrientation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_VerticalGlyphOrientation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OpticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OpticalAlignment )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LastLineWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LastLineWrapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFormatChangeIndices(This,stopCount,stops) \
    ( (This)->lpVtbl->GetFormatChangeIndices(This,stopCount,stops) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Direction(This,value) \
    ( (This)->lpVtbl->get_Direction(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_Direction(This,value) \
    ( (This)->lpVtbl->put_Direction(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontFamily(This,value) \
    ( (This)->lpVtbl->get_DefaultFontFamily(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontSize(This,value) \
    ( (This)->lpVtbl->get_DefaultFontSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontStretch(This,value) \
    ( (This)->lpVtbl->get_DefaultFontStretch(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontStyle(This,value) \
    ( (This)->lpVtbl->get_DefaultFontStyle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultFontWeight(This,value) \
    ( (This)->lpVtbl->get_DefaultFontWeight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_IncrementalTabStop(This,value) \
    ( (This)->lpVtbl->get_IncrementalTabStop(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_IncrementalTabStop(This,value) \
    ( (This)->lpVtbl->put_IncrementalTabStop(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacing(This,value) \
    ( (This)->lpVtbl->get_LineSpacing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacing(This,value) \
    ( (This)->lpVtbl->put_LineSpacing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacingBaseline(This,value) \
    ( (This)->lpVtbl->get_LineSpacingBaseline(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacingBaseline(This,value) \
    ( (This)->lpVtbl->put_LineSpacingBaseline(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DefaultLocaleName(This,value) \
    ( (This)->lpVtbl->get_DefaultLocaleName(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_VerticalAlignment(This,value) \
    ( (This)->lpVtbl->get_VerticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_VerticalAlignment(This,value) \
    ( (This)->lpVtbl->put_VerticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_HorizontalAlignment(This,value) \
    ( (This)->lpVtbl->get_HorizontalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_HorizontalAlignment(This,value) \
    ( (This)->lpVtbl->put_HorizontalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingGranularity(This,value) \
    ( (This)->lpVtbl->get_TrimmingGranularity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingGranularity(This,value) \
    ( (This)->lpVtbl->put_TrimmingGranularity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingDelimiter(This,value) \
    ( (This)->lpVtbl->get_TrimmingDelimiter(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingDelimiter(This,value) \
    ( (This)->lpVtbl->put_TrimmingDelimiter(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingDelimiterCount(This,value) \
    ( (This)->lpVtbl->get_TrimmingDelimiterCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingDelimiterCount(This,value) \
    ( (This)->lpVtbl->put_TrimmingDelimiterCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_WordWrapping(This,value) \
    ( (This)->lpVtbl->get_WordWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_WordWrapping(This,value) \
    ( (This)->lpVtbl->put_WordWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Options(This,value) \
    ( (This)->lpVtbl->get_Options(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_Options(This,value) \
    ( (This)->lpVtbl->put_Options(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineSpacingMode(This,value) \
    ( (This)->lpVtbl->get_LineSpacingMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LineSpacingMode(This,value) \
    ( (This)->lpVtbl->put_LineSpacingMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_TrimmingSign(This,value) \
    ( (This)->lpVtbl->get_TrimmingSign(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_TrimmingSign(This,value) \
    ( (This)->lpVtbl->put_TrimmingSign(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_CustomTrimmingSign(This,value) \
    ( (This)->lpVtbl->get_CustomTrimmingSign(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_CustomTrimmingSign(This,value) \
    ( (This)->lpVtbl->put_CustomTrimmingSign(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_RequestedSize(This,value) \
    ( (This)->lpVtbl->get_RequestedSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_RequestedSize(This,value) \
    ( (This)->lpVtbl->put_RequestedSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetMinimumLineLength(This,value) \
    ( (This)->lpVtbl->GetMinimumLineLength(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetBrush(This,characterIndex,brush) \
    ( (This)->lpVtbl->GetBrush(This,characterIndex,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCustomBrush(This,characterIndex,brush) \
    ( (This)->lpVtbl->GetCustomBrush(This,characterIndex,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontFamily(This,characterIndex,fontFamily) \
    ( (This)->lpVtbl->GetFontFamily(This,characterIndex,fontFamily) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontSize(This,characterIndex,fontSize) \
    ( (This)->lpVtbl->GetFontSize(This,characterIndex,fontSize) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontStretch(This,characterIndex,fontStretch) \
    ( (This)->lpVtbl->GetFontStretch(This,characterIndex,fontStretch) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontStyle(This,characterIndex,fontStyle) \
    ( (This)->lpVtbl->GetFontStyle(This,characterIndex,fontStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetFontWeight(This,characterIndex,fontWeight) \
    ( (This)->lpVtbl->GetFontWeight(This,characterIndex,fontWeight) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetLocaleName(This,characterIndex,localeName) \
    ( (This)->lpVtbl->GetLocaleName(This,characterIndex,localeName) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetStrikethrough(This,characterIndex,hasStrikethrough) \
    ( (This)->lpVtbl->GetStrikethrough(This,characterIndex,hasStrikethrough) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetUnderline(This,characterIndex,hasUnderline) \
    ( (This)->lpVtbl->GetUnderline(This,characterIndex,hasUnderline) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetInlineObject(This,characterIndex,inlineObject) \
    ( (This)->lpVtbl->GetInlineObject(This,characterIndex,inlineObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetColor(This,characterIndex,characterCount,color) \
    ( (This)->lpVtbl->SetColor(This,characterIndex,characterCount,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetBrush(This,characterIndex,characterCount,brush) \
    ( (This)->lpVtbl->SetBrush(This,characterIndex,characterCount,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetCustomBrush(This,characterIndex,characterCount,brush) \
    ( (This)->lpVtbl->SetCustomBrush(This,characterIndex,characterCount,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontFamily(This,characterIndex,characterCount,fontFamily) \
    ( (This)->lpVtbl->SetFontFamily(This,characterIndex,characterCount,fontFamily) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontSize(This,characterIndex,characterCount,fontSize) \
    ( (This)->lpVtbl->SetFontSize(This,characterIndex,characterCount,fontSize) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontStretch(This,characterIndex,characterCount,fontStretch) \
    ( (This)->lpVtbl->SetFontStretch(This,characterIndex,characterCount,fontStretch) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontStyle(This,characterIndex,characterCount,fontStyle) \
    ( (This)->lpVtbl->SetFontStyle(This,characterIndex,characterCount,fontStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetFontWeight(This,characterIndex,characterCount,fontWeight) \
    ( (This)->lpVtbl->SetFontWeight(This,characterIndex,characterCount,fontWeight) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetLocaleName(This,characterIndex,characterCount,name) \
    ( (This)->lpVtbl->SetLocaleName(This,characterIndex,characterCount,name) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetStrikethrough(This,characterIndex,characterCount,hasStrikethrough) \
    ( (This)->lpVtbl->SetStrikethrough(This,characterIndex,characterCount,hasStrikethrough) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetUnderline(This,characterIndex,characterCount,hasUnderline) \
    ( (This)->lpVtbl->SetUnderline(This,characterIndex,characterCount,hasUnderline) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetInlineObject(This,characterIndex,characterCount,inlineObject) \
    ( (This)->lpVtbl->SetInlineObject(This,characterIndex,characterCount,inlineObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_DrawToTextRenderer(This,textRenderer,position) \
    ( (This)->lpVtbl->DrawToTextRenderer(This,textRenderer,position) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_DrawToTextRendererWithCoords(This,textRenderer,x,y) \
    ( (This)->lpVtbl->DrawToTextRendererWithCoords(This,textRenderer,x,y) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineMetrics(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_LineMetrics(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_ClusterMetrics(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_ClusterMetrics(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetTypography(This,characterIndex,characterCount,typography) \
    ( (This)->lpVtbl->SetTypography(This,characterIndex,characterCount,typography) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTypography(This,characterIndex,typography) \
    ( (This)->lpVtbl->GetTypography(This,characterIndex,typography) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LayoutBounds(This,bounds) \
    ( (This)->lpVtbl->get_LayoutBounds(This,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LayoutBoundsIncludingTrailingWhitespace(This,bounds) \
    ( (This)->lpVtbl->get_LayoutBoundsIncludingTrailingWhitespace(This,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LineCount(This,lineCount) \
    ( (This)->lpVtbl->get_LineCount(This,lineCount) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_MaximumBidiReorderingDepth(This,depth) \
    ( (This)->lpVtbl->get_MaximumBidiReorderingDepth(This,depth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_DrawBounds(This,bounds) \
    ( (This)->lpVtbl->get_DrawBounds(This,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTest(This,point,isHit) \
    ( (This)->lpVtbl->HitTest(This,point,isHit) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithCoords(This,x,y,isHit) \
    ( (This)->lpVtbl->HitTestWithCoords(This,x,y,isHit) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescription(This,point,textLayoutRegion,isHit) \
    ( (This)->lpVtbl->HitTestWithDescription(This,point,textLayoutRegion,isHit) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndCoords(This,x,y,textLayoutRegion,isHit) \
    ( (This)->lpVtbl->HitTestWithDescriptionAndCoords(This,x,y,textLayoutRegion,isHit) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndTrailingSide(This,point,textLayoutRegion,trailingSideOfCharacter,isHit) \
    ( (This)->lpVtbl->HitTestWithDescriptionAndTrailingSide(This,point,textLayoutRegion,trailingSideOfCharacter,isHit) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_HitTestWithDescriptionAndCoordsAndTrailingSide(This,x,y,textLayoutRegion,trailingSideOfCharacter,isHit) \
    ( (This)->lpVtbl->HitTestWithDescriptionAndCoordsAndTrailingSide(This,x,y,textLayoutRegion,trailingSideOfCharacter,isHit) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCaretPosition(This,characterIndex,trailingSideOfCharacter,location) \
    ( (This)->lpVtbl->GetCaretPosition(This,characterIndex,trailingSideOfCharacter,location) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCaretPositionWithDescription(This,characterIndex,trailingSideOfCharacter,textLayoutRegion,location) \
    ( (This)->lpVtbl->GetCaretPositionWithDescription(This,characterIndex,trailingSideOfCharacter,textLayoutRegion,location) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetCharacterRegions(This,characterIndex,characterCount,hitTestDescriptionCount,hitTestDescriptions) \
    ( (This)->lpVtbl->GetCharacterRegions(This,characterIndex,characterCount,hitTestDescriptionCount,hitTestDescriptions) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetPairKerning(This,characterIndex,hasPairKerning) \
    ( (This)->lpVtbl->GetPairKerning(This,characterIndex,hasPairKerning) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetPairKerning(This,characterIndex,characterCount,hasPairKerning) \
    ( (This)->lpVtbl->SetPairKerning(This,characterIndex,characterCount,hasPairKerning) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetLeadingCharacterSpacing(This,characterIndex,leadingSpacing) \
    ( (This)->lpVtbl->GetLeadingCharacterSpacing(This,characterIndex,leadingSpacing) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetTrailingCharacterSpacing(This,characterIndex,trailingSpacing) \
    ( (This)->lpVtbl->GetTrailingCharacterSpacing(This,characterIndex,trailingSpacing) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_GetMinimumCharacterAdvance(This,characterIndex,minimumAdvance) \
    ( (This)->lpVtbl->GetMinimumCharacterAdvance(This,characterIndex,minimumAdvance) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_SetCharacterSpacing(This,characterIndex,characterCount,leadingSpacing,trailingSpacing,minimumAdvance) \
    ( (This)->lpVtbl->SetCharacterSpacing(This,characterIndex,characterCount,leadingSpacing,trailingSpacing,minimumAdvance) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_VerticalGlyphOrientation(This,value) \
    ( (This)->lpVtbl->get_VerticalGlyphOrientation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_VerticalGlyphOrientation(This,value) \
    ( (This)->lpVtbl->put_VerticalGlyphOrientation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_OpticalAlignment(This,value) \
    ( (This)->lpVtbl->get_OpticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_OpticalAlignment(This,value) \
    ( (This)->lpVtbl->put_OpticalAlignment(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_LastLineWrapping(This,value) \
    ( (This)->lpVtbl->get_LastLineWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_put_LastLineWrapping(This,value) \
    ( (This)->lpVtbl->put_LastLineWrapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory";
/* [object, exclusiveto, uuid("9C1F7179-ACD0-4680-93D5-95A6247E8F6B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING textString,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * textFormat,
        /* [in] */float requestedWidth,
        /* [in] */float requestedHeight,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * * canvasTextLayout
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_Create(This,resourceCreator,textString,textFormat,requestedWidth,requestedHeight,canvasTextLayout) \
    ( (This)->lpVtbl->Create(This,resourceCreator,textString,textFormat,requestedWidth,requestedHeight,canvasTextLayout) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics";
/* [object, exclusiveto, uuid("7F2B8FFD-6935-4F60-B409-6394A19C5EBC"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *GetGlyphOrientationTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation,
        /* [in] */boolean isSideways,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 position,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 * transform
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_GetGlyphOrientationTransform(This,glyphOrientation,isSideways,position,transform) \
    ( (This)->lpVtbl->GetGlyphOrientationTransform(This,glyphOrientation,isSideways,position,transform) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextLayout
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextLayout ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextLayout_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextLayout[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextLayout";
#endif





/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder";
/* [object, exclusiveto, uuid("BCF5822F-8127-4E5C-96B8-29983B915541"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *BeginFigureWithFigureFill )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 startPoint,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *BeginFigure )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 startPoint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *BeginFigureAtCoordsWithFigureFill )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */float startX,
        /* [in] */float startY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *BeginFigureAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */float startX,
        /* [in] */float startY
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *AddArcToPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */float rotationAngle,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection sweepDirection,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize arcSize
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *AddArcAroundEllipse )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */float startAngle,
        /* [in] */float sweepAngle
        );
    HRESULT ( STDMETHODCALLTYPE *AddCubicBezier )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint1,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint2,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *AddLine )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *AddLineWithCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */float x,
        /* [in] */float y
        );
    HRESULT ( STDMETHODCALLTYPE *AddQuadraticBezier )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint
        );
    HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDetermination )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination
        );
    HRESULT ( STDMETHODCALLTYPE *SetSegmentOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions figureSegmentOptions
        );
    HRESULT ( STDMETHODCALLTYPE *EndFigure )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop figureLoop
        );
    HRESULT ( STDMETHODCALLTYPE *AddGeometry )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureWithFigureFill(This,startPoint,figureFill) \
    ( (This)->lpVtbl->BeginFigureWithFigureFill(This,startPoint,figureFill) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigure(This,startPoint) \
    ( (This)->lpVtbl->BeginFigure(This,startPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureAtCoordsWithFigureFill(This,startX,startY,figureFill) \
    ( (This)->lpVtbl->BeginFigureAtCoordsWithFigureFill(This,startX,startY,figureFill) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_BeginFigureAtCoords(This,startX,startY) \
    ( (This)->lpVtbl->BeginFigureAtCoords(This,startX,startY) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddArcToPoint(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) \
    ( (This)->lpVtbl->AddArcToPoint(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddArcAroundEllipse(This,centerPoint,radiusX,radiusY,startAngle,sweepAngle) \
    ( (This)->lpVtbl->AddArcAroundEllipse(This,centerPoint,radiusX,radiusY,startAngle,sweepAngle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) \
    ( (This)->lpVtbl->AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddLine(This,endPoint) \
    ( (This)->lpVtbl->AddLine(This,endPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddLineWithCoords(This,x,y) \
    ( (This)->lpVtbl->AddLineWithCoords(This,x,y) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddQuadraticBezier(This,controlPoint,endPoint) \
    ( (This)->lpVtbl->AddQuadraticBezier(This,controlPoint,endPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_SetFilledRegionDetermination(This,filledRegionDetermination) \
    ( (This)->lpVtbl->SetFilledRegionDetermination(This,filledRegionDetermination) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_SetSegmentOptions(This,figureSegmentOptions) \
    ( (This)->lpVtbl->SetSegmentOptions(This,figureSegmentOptions) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_EndFigure(This,figureLoop) \
    ( (This)->lpVtbl->EndFigure(This,figureLoop) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_AddGeometry(This,geometry) \
    ( (This)->lpVtbl->AddGeometry(This,geometry) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilderFactory[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory";
/* [object, exclusiveto, uuid("AC2BEE14-EFD1-4343-8E53-BA62153D8966"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * * canvasPathBuilder
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_Create(This,resourceCreator,canvasPathBuilder) \
    ( (This)->lpVtbl->Create(This,resourceCreator,canvasPathBuilder) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilderFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasPathBuilder[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasActiveLayer
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasActiveLayer
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.ICanvasActiveLayer";
/* [object, exclusiveto, uuid("49ECFC58-5E1C-4EE3-8088-542F94E93C60"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasActiveLayer
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasActiveLayer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasActiveLayer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasActiveLayer[] = L"Microsoft.Graphics.Canvas.CanvasActiveLayer";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge
{
    CanvasGradientMeshPatchEdge_Aliased = 0,
    CanvasGradientMeshPatchEdge_Antialiased = 1,
    CanvasGradientMeshPatchEdge_AliasedAndInflated = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch
{
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point00;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point01;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point02;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point03;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point10;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point11;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point12;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point13;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point20;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point21;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point22;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point23;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point30;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point31;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point32;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Point33;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color00;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color03;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color30;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector4 Color33;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge00To03;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge03To33;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge33To30;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge30To00;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMesh[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh";
/* [object, exclusiveto, uuid("6BFC2BF1-0A7A-449C-A7EF-6706321B0C1A"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Patches )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBoundsWithTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_get_Patches(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_Patches(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetBounds(This,resourceCreator,bounds) \
    ( (This)->lpVtbl->GetBounds(This,resourceCreator,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_GetBoundsWithTransform(This,resourceCreator,transform,bounds) \
    ( (This)->lpVtbl->GetBoundsWithTransform(This,resourceCreator,transform,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshFactory[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory";
/* [object, exclusiveto, uuid("4756492D-251E-421D-834D-87EC260D5E4D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 patchCount,
        /* [size_is(patchCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch * patchElements,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * * canvasGradientMesh
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_Create(This,resourceCreator,patchCount,patchElements,canvasGradientMesh) \
    ( (This)->lpVtbl->Create(This,resourceCreator,patchCount,patchElements,canvasGradientMesh) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics";
/* [object, exclusiveto, uuid("44027640-3EAB-4199-AA3B-644890D0123D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateCoonsPatch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
        /* [in] */UINT32 pointCount,
        /* [size_is(pointCount), in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * points,
        /* [in] */UINT32 colorCount,
        /* [size_is(colorCount), in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * colors,
        /* [in] */UINT32 edgeCount,
        /* [size_is(edgeCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge * edges,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch * gradientMeshPatch
        );
    HRESULT ( STDMETHODCALLTYPE *CreateTensorPatch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics * This,
        /* [in] */UINT32 pointCount,
        /* [size_is(pointCount), in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * points,
        /* [in] */UINT32 colorCount,
        /* [size_is(colorCount), in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * colors,
        /* [in] */UINT32 edgeCount,
        /* [size_is(edgeCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge * edges,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch * gradientMeshPatch
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_CreateCoonsPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch) \
    ( (This)->lpVtbl->CreateCoonsPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_CreateTensorPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch) \
    ( (This)->lpVtbl->CreateTensorPatch(This,pointCount,points,colorCount,colors,edgeCount,edges,gradientMeshPatch) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasGradientMesh[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode
{
    CanvasTextRenderingMode_Default,
    CanvasTextRenderingMode_Aliased,
    CanvasTextRenderingMode_GdiClassic,
    CanvasTextRenderingMode_GdiNatural,
    CanvasTextRenderingMode_Natural,
    CanvasTextRenderingMode_NaturalSymmetric,
    CanvasTextRenderingMode_Outline,
    CanvasTextRenderingMode_NaturalSymmetricDownsampled,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextGridFit
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit
{
    CanvasTextGridFit_Default,
    CanvasTextGridFit_Disable,
    CanvasTextGridFit_Enable,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParameters[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters";
/* [object, exclusiveto, uuid("B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RenderingMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GridFit )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_get_RenderingMode(This,value) \
    ( (This)->lpVtbl->get_RenderingMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_get_GridFit(This,value) \
    ( (This)->lpVtbl->get_GridFit(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParametersFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory";
/* [object, exclusiveto, uuid("D240AC25-4D23-4964-9D9A-DB2FC8AF185D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode textRenderingMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit gridFit,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * * textRenderingParameters
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_Create(This,textRenderingMode,gridFit,textRenderingParameters) \
    ( (This)->lpVtbl->Create(This,textRenderingMode,gridFit,textRenderingParameters) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextRenderingParameters[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode
{
    CanvasTextMeasuringMode_Natural,
    CanvasTextMeasuringMode_GdiClassic,
    CanvasTextMeasuringMode_GdiNatural,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType
{
    CanvasFontFileFormatType_Cff,
    CanvasFontFileFormatType_TrueType,
    CanvasFontFileFormatType_TrueTypeCollection,
    CanvasFontFileFormatType_Type1,
    CanvasFontFileFormatType_Vector,
    CanvasFontFileFormatType_Bitmap,
    CanvasFontFileFormatType_Unknown,
    CanvasFontFileFormatType_RawCff,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontSimulations
 *
 */
/* [flags, version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations
{
    CanvasFontSimulations_None = 0,
    CanvasFontSimulations_Bold = 0x1,
    CanvasFontSimulations_Oblique = 0x2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontInformation
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation
{
    CanvasFontInformation_None,
    CanvasFontInformation_CopyrightNotice,
    CanvasFontInformation_VersionStrings,
    CanvasFontInformation_Trademark,
    CanvasFontInformation_Manufacturer,
    CanvasFontInformation_Designer,
    CanvasFontInformation_DesignerUrl,
    CanvasFontInformation_Description,
    CanvasFontInformation_FontVendorUrl,
    CanvasFontInformation_LicenseDescription,
    CanvasFontInformation_LicenseInfoUrl,
    CanvasFontInformation_Win32FamilyNames,
    CanvasFontInformation_Win32SubfamilyNames,
    CanvasFontInformation_PreferredFamilyNames,
    CanvasFontInformation_PreferredSubfamilyNames,
    CanvasFontInformation_SampleText,
    CanvasFontInformation_FullName,
    CanvasFontInformation_PostscriptName,
    CanvasFontInformation_PostscriptCidName,
    CanvasFontInformation_WwsFamilyName,
    CanvasFontInformation_DesignScriptLanguageTag,
    CanvasFontInformation_SupportedScriptLanguageTag,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange
{
    UINT32 First;
    UINT32 Last;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyph
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph
{
    int Index;
    float Advance;
    float AdvanceOffset;
    float AscenderOffset;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics
{
    float LeftSideBearing;
    float AdvanceWidth;
    float RightSideBearing;
    float TopSideBearing;
    float AdvanceHeight;
    float BottomSideBearing;
    float VerticalOrigin;
    __x_ABI_CWindows_CFoundation_CRect DrawBounds;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasScriptShape
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape
{
    CanvasScriptShape_Default,
    CanvasScriptShape_NoVisual,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript
{
    INT32 ScriptIdentifier;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape Shape;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontFace
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontFace
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontFace[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontFace";
/* [object, exclusiveto, uuid("5199D129-4EF9-4DEE-B74C-4DC910201A7F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *GetRecommendedRenderingMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */float fontSize,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * renderingParameters,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode * renderingMode
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetRecommendedRenderingModeWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */float fontSize,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * renderingParameters,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */boolean isSideways,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing outlineThreshold,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode * renderingMode
        );
    HRESULT ( STDMETHODCALLTYPE *GetRecommendedGridFit )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */float fontSize,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * renderingParameters,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */boolean isSideways,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing outlineThreshold,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit * gridFit
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GlyphBox )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SubscriptPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SubscriptSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SuperscriptPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SuperscriptSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HasTypographicMetrics )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Ascent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Descent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LineGap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CapHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LowercaseLetterHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_UnderlinePosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_UnderlineThickness )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_StrikethroughPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_StrikethroughThickness )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CaretSlopeRise )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CaretSlopeRun )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CaretOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */float * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_UnicodeRanges )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsMonospaced )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */boolean * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetVerticalGlyphVariants )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */UINT32 inputCount,
        /* [size_is(inputCount), in] */int * inputElements,
        /* [out] */UINT32 * outputCount,
        /* [retval, size_is(, *(outputCount)), out] */int * * outputElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HasVerticalGlyphVariants )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FileFormatType )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Simulations )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsSymbolFont )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GlyphCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */UINT32 * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetGlyphIndices )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */UINT32 inputCount,
        /* [size_is(inputCount), in] */UINT32 * inputElements,
        /* [out] */UINT32 * outputCount,
        /* [retval, size_is(, *(outputCount)), out] */int * * outputElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetGlyphMetrics )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */UINT32 inputCount,
        /* [size_is(inputCount), in] */int * inputElements,
        /* [in] */boolean isSideways,
        /* [out] */UINT32 * outputCount,
        /* [retval, size_is(, *(outputCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics * * outputElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetGdiCompatibleGlyphMetrics )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */float fontSize,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */boolean useGdiNatural,
        /* [in] */UINT32 inputCount,
        /* [size_is(inputCount), in] */int * inputElements,
        /* [in] */boolean isSideways,
        /* [out] */UINT32 * outputCount,
        /* [retval, size_is(, *(outputCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics * * outputElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Weight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontWeight * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Stretch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStretch * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Style )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CText_CFontStyle * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FamilyNames )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FaceNames )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
        );
    HRESULT ( STDMETHODCALLTYPE *GetInformationalStrings )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation fontInformation,
        /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
        );
    HRESULT ( STDMETHODCALLTYPE *HasCharacter )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */UINT32 unicodeValue,
        /* [retval, out] */boolean * value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetGlyphRunBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * drawingSession,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */float fontSize,
        /* [in] */UINT32 glyphCount,
        /* [size_is(glyphCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphs,
        /* [in] */boolean isSideways,
        /* [in] */UINT32 bidiLevel,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetGlyphRunBoundsWithMeasuringMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * drawingSession,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */float fontSize,
        /* [in] */UINT32 glyphCount,
        /* [size_is(glyphCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphs,
        /* [in] */boolean isSideways,
        /* [in] */UINT32 bidiLevel,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Panose )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetSupportedTypographicFeatureNames )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetSupportedTypographicFeatureNamesWithLocale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [in] */HSTRING locale,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetTypographicFeatureGlyphSupport )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName typographicFeatureName,
        /* [in] */UINT32 glyphsCount,
        /* [size_is(glyphsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphsElements,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */boolean * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetTypographicFeatureGlyphSupportWithLocale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName typographicFeatureName,
        /* [in] */UINT32 glyphsCount,
        /* [size_is(glyphsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphsElements,
        /* [in] */HSTRING locale,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */boolean * * valueElements
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRecommendedRenderingMode(This,fontSize,dpi,measuringMode,renderingParameters,renderingMode) \
    ( (This)->lpVtbl->GetRecommendedRenderingMode(This,fontSize,dpi,measuringMode,renderingParameters,renderingMode) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRecommendedRenderingModeWithAllOptions(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,renderingMode) \
    ( (This)->lpVtbl->GetRecommendedRenderingModeWithAllOptions(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,renderingMode) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetRecommendedGridFit(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,gridFit) \
    ( (This)->lpVtbl->GetRecommendedGridFit(This,fontSize,dpi,measuringMode,renderingParameters,transform,isSideways,outlineThreshold,gridFit) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_GlyphBox(This,value) \
    ( (This)->lpVtbl->get_GlyphBox(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SubscriptPosition(This,value) \
    ( (This)->lpVtbl->get_SubscriptPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SubscriptSize(This,value) \
    ( (This)->lpVtbl->get_SubscriptSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SuperscriptPosition(This,value) \
    ( (This)->lpVtbl->get_SuperscriptPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_SuperscriptSize(This,value) \
    ( (This)->lpVtbl->get_SuperscriptSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_HasTypographicMetrics(This,value) \
    ( (This)->lpVtbl->get_HasTypographicMetrics(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Ascent(This,value) \
    ( (This)->lpVtbl->get_Ascent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Descent(This,value) \
    ( (This)->lpVtbl->get_Descent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_LineGap(This,value) \
    ( (This)->lpVtbl->get_LineGap(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CapHeight(This,value) \
    ( (This)->lpVtbl->get_CapHeight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_LowercaseLetterHeight(This,value) \
    ( (This)->lpVtbl->get_LowercaseLetterHeight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_UnderlinePosition(This,value) \
    ( (This)->lpVtbl->get_UnderlinePosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_UnderlineThickness(This,value) \
    ( (This)->lpVtbl->get_UnderlineThickness(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_StrikethroughPosition(This,value) \
    ( (This)->lpVtbl->get_StrikethroughPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_StrikethroughThickness(This,value) \
    ( (This)->lpVtbl->get_StrikethroughThickness(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CaretSlopeRise(This,value) \
    ( (This)->lpVtbl->get_CaretSlopeRise(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CaretSlopeRun(This,value) \
    ( (This)->lpVtbl->get_CaretSlopeRun(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_CaretOffset(This,value) \
    ( (This)->lpVtbl->get_CaretOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_UnicodeRanges(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_UnicodeRanges(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_IsMonospaced(This,value) \
    ( (This)->lpVtbl->get_IsMonospaced(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetVerticalGlyphVariants(This,inputCount,inputElements,outputCount,outputElements) \
    ( (This)->lpVtbl->GetVerticalGlyphVariants(This,inputCount,inputElements,outputCount,outputElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_HasVerticalGlyphVariants(This,value) \
    ( (This)->lpVtbl->get_HasVerticalGlyphVariants(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_FileFormatType(This,value) \
    ( (This)->lpVtbl->get_FileFormatType(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Simulations(This,value) \
    ( (This)->lpVtbl->get_Simulations(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_IsSymbolFont(This,value) \
    ( (This)->lpVtbl->get_IsSymbolFont(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_GlyphCount(This,value) \
    ( (This)->lpVtbl->get_GlyphCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphIndices(This,inputCount,inputElements,outputCount,outputElements) \
    ( (This)->lpVtbl->GetGlyphIndices(This,inputCount,inputElements,outputCount,outputElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphMetrics(This,inputCount,inputElements,isSideways,outputCount,outputElements) \
    ( (This)->lpVtbl->GetGlyphMetrics(This,inputCount,inputElements,isSideways,outputCount,outputElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGdiCompatibleGlyphMetrics(This,fontSize,dpi,transform,useGdiNatural,inputCount,inputElements,isSideways,outputCount,outputElements) \
    ( (This)->lpVtbl->GetGdiCompatibleGlyphMetrics(This,fontSize,dpi,transform,useGdiNatural,inputCount,inputElements,isSideways,outputCount,outputElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Weight(This,value) \
    ( (This)->lpVtbl->get_Weight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Stretch(This,value) \
    ( (This)->lpVtbl->get_Stretch(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Style(This,value) \
    ( (This)->lpVtbl->get_Style(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_FamilyNames(This,values) \
    ( (This)->lpVtbl->get_FamilyNames(This,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_FaceNames(This,values) \
    ( (This)->lpVtbl->get_FaceNames(This,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetInformationalStrings(This,fontInformation,values) \
    ( (This)->lpVtbl->GetInformationalStrings(This,fontInformation,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_HasCharacter(This,unicodeValue,value) \
    ( (This)->lpVtbl->HasCharacter(This,unicodeValue,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphRunBounds(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,bounds) \
    ( (This)->lpVtbl->GetGlyphRunBounds(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetGlyphRunBoundsWithMeasuringMode(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,bounds) \
    ( (This)->lpVtbl->GetGlyphRunBoundsWithMeasuringMode(This,drawingSession,point,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_get_Panose(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_Panose(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetSupportedTypographicFeatureNames(This,script,valueCount,valueElements) \
    ( (This)->lpVtbl->GetSupportedTypographicFeatureNames(This,script,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetSupportedTypographicFeatureNamesWithLocale(This,script,locale,valueCount,valueElements) \
    ( (This)->lpVtbl->GetSupportedTypographicFeatureNamesWithLocale(This,script,locale,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetTypographicFeatureGlyphSupport(This,script,typographicFeatureName,glyphsCount,glyphsElements,valueCount,valueElements) \
    ( (This)->lpVtbl->GetTypographicFeatureGlyphSupport(This,script,typographicFeatureName,glyphsCount,glyphsElements,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_GetTypographicFeatureGlyphSupportWithLocale(This,script,typographicFeatureName,glyphsCount,glyphsElements,locale,valueCount,valueElements) \
    ( (This)->lpVtbl->GetTypographicFeatureGlyphSupportWithLocale(This,script,typographicFeatureName,glyphsCount,glyphsElements,locale,valueCount,valueElements) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasFontFace
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasFontFace ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontFace_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontFace_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasFontFace[] = L"Microsoft.Graphics.Canvas.Text.CanvasFontFace";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextRenderer[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer";
/* [object, uuid("9AAEECE5-8D09-4A64-B322-AF030421B2E4"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *DrawGlyphRun )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */UINT32 glyphCount,
        /* [size_is(glyphCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphs,
        /* [in] */boolean isSideways,
        /* [in] */UINT32 bidiLevel,
        /* [in] */IInspectable * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        /* [in] */HSTRING localeName,
        /* [in] */HSTRING textString,
        /* [in] */UINT32 clusterMapIndicesCount,
        /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndices,
        /* [in] */UINT32 characterIndex,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation
        );
    HRESULT ( STDMETHODCALLTYPE *DrawStrikethrough )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */float strikethroughWidth,
        /* [in] */float strikethroughThickness,
        /* [in] */float strikethroughOffset,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
        /* [in] */IInspectable * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode textMeasuringMode,
        /* [in] */HSTRING localeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation
        );
    HRESULT ( STDMETHODCALLTYPE *DrawUnderline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */float underlineWidth,
        /* [in] */float underlineThickness,
        /* [in] */float underlineOffset,
        /* [in] */float runHeight,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
        /* [in] */IInspectable * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode textMeasuringMode,
        /* [in] */HSTRING localeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation
        );
    HRESULT ( STDMETHODCALLTYPE *DrawInlineObject )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject * inlineObject,
        /* [in] */boolean isSideways,
        /* [in] */boolean isRightToLeft,
        /* [in] */IInspectable * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PixelSnappingDisabled )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
        /* [retval, out] */boolean * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Transform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Dpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer * This,
        /* [retval, out] */float * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,characterIndex,glyphOrientation) \
    ( (This)->lpVtbl->DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,characterIndex,glyphOrientation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawStrikethrough(This,point,strikethroughWidth,strikethroughThickness,strikethroughOffset,textDirection,brush,textMeasuringMode,localeName,glyphOrientation) \
    ( (This)->lpVtbl->DrawStrikethrough(This,point,strikethroughWidth,strikethroughThickness,strikethroughOffset,textDirection,brush,textMeasuringMode,localeName,glyphOrientation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawUnderline(This,point,underlineWidth,underlineThickness,underlineOffset,runHeight,textDirection,brush,textMeasuringMode,localeName,glyphOrientation) \
    ( (This)->lpVtbl->DrawUnderline(This,point,underlineWidth,underlineThickness,underlineOffset,runHeight,textDirection,brush,textMeasuringMode,localeName,glyphOrientation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_DrawInlineObject(This,point,inlineObject,isSideways,isRightToLeft,brush,glyphOrientation) \
    ( (This)->lpVtbl->DrawInlineObject(This,point,inlineObject,isSideways,isRightToLeft,brush,glyphOrientation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_get_PixelSnappingDisabled(This,value) \
    ( (This)->lpVtbl->get_PixelSnappingDisabled(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_get_Transform(This,value) \
    ( (This)->lpVtbl->get_Transform(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_get_Dpi(This,value) \
    ( (This)->lpVtbl->get_Dpi(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer_INTERFACE_DEFINED__) */




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices
{
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Vertex1;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Vertex2;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 Vertex3;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasPathReceiver[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver";
/* [object, uuid("70E65373-7FB3-4645-8B6D-F616D1B9A9D7"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *BeginFigure )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 startPoint,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill figureFill
        );
    HRESULT ( STDMETHODCALLTYPE *AddArc )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */float rotationAngle,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection sweepDirection,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize arcSize
        );
    HRESULT ( STDMETHODCALLTYPE *AddCubicBezier )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint1,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint2,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint
        );
    HRESULT ( STDMETHODCALLTYPE *AddLine )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint
        );
    HRESULT ( STDMETHODCALLTYPE *AddQuadraticBezier )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 controlPoint,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 endPoint
        );
    HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDetermination )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination
        );
    HRESULT ( STDMETHODCALLTYPE *SetSegmentOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions figureSegmentOptions
        );
    HRESULT ( STDMETHODCALLTYPE *EndFigure )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop figureLoop
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiverVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_BeginFigure(This,startPoint,figureFill) \
    ( (This)->lpVtbl->BeginFigure(This,startPoint,figureFill) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddArc(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) \
    ( (This)->lpVtbl->AddArc(This,endPoint,radiusX,radiusY,rotationAngle,sweepDirection,arcSize) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) \
    ( (This)->lpVtbl->AddCubicBezier(This,controlPoint1,controlPoint2,endPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddLine(This,endPoint) \
    ( (This)->lpVtbl->AddLine(This,endPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_AddQuadraticBezier(This,controlPoint,endPoint) \
    ( (This)->lpVtbl->AddQuadraticBezier(This,controlPoint,endPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_SetFilledRegionDetermination(This,filledRegionDetermination) \
    ( (This)->lpVtbl->SetFilledRegionDetermination(This,filledRegionDetermination) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_SetSegmentOptions(This,figureSegmentOptions) \
    ( (This)->lpVtbl->SetSegmentOptions(This,figureSegmentOptions) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_EndFigure(This,figureLoop) \
    ( (This)->lpVtbl->EndFigure(This,figureLoop) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGeometry
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry";
/* [object, exclusiveto, uuid("74EA89FA-C87C-4D0D-9057-2743B8DB67EE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CombineWith )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * otherGeometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 otherGeometryTransform,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine combine,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CombineWithUsingFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * otherGeometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 otherGeometryTransform,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine combine,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *Stroke )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float strokeWidth,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *StrokeWithStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *StrokeWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *Outline )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *OutlineWithTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *Simplify )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification simplification,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SimplifyWithTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification simplification,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    HRESULT ( STDMETHODCALLTYPE *Transform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CompareWith )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * otherGeometry,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation * relation
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CompareWithUsingTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * otherGeometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 otherGeometryTransform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation * relation
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ComputeArea )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [retval, out] */float * area
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputeAreaWithTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */float * area
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ComputePathLength )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [retval, out] */float * length
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputePathLengthWithTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */float * length
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ComputePointOnPath )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float distance,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * point
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputePointOnPathWithTangent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float distance,
        /* [out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * tangent,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * point
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float length,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * tangent,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * point
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillContainsPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [retval, out] */boolean * containsPoint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillContainsPointWithTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */boolean * containsPoint
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ComputeBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputeBoundsWithTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBounds )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float strokeWidth,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBoundsWithStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputeStrokeBoundsWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * bounds
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *StrokeContainsPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */float strokeWidth,
        /* [retval, out] */boolean * containsPoint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *StrokeContainsPointWithStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [retval, out] */boolean * containsPoint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *StrokeContainsPointWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */boolean * containsPoint
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *Tessellate )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [out] */UINT32 * trianglesCount,
        /* [retval, size_is(, *(trianglesCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices * * triangles
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *TessellateWithTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [out] */UINT32 * trianglesCount,
        /* [retval, size_is(, *(trianglesCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices * * triangles
        );
    HRESULT ( STDMETHODCALLTYPE *SendPathTo )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver * streamReader
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CombineWith(This,otherGeometry,otherGeometryTransform,combine,geometry) \
    ( (This)->lpVtbl->CombineWith(This,otherGeometry,otherGeometryTransform,combine,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CombineWithUsingFlatteningTolerance(This,otherGeometry,otherGeometryTransform,combine,flatteningTolerance,geometry) \
    ( (This)->lpVtbl->CombineWithUsingFlatteningTolerance(This,otherGeometry,otherGeometryTransform,combine,flatteningTolerance,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Stroke(This,strokeWidth,geometry) \
    ( (This)->lpVtbl->Stroke(This,strokeWidth,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeWithStrokeStyle(This,strokeWidth,strokeStyle,geometry) \
    ( (This)->lpVtbl->StrokeWithStrokeStyle(This,strokeWidth,strokeStyle,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,geometry) \
    ( (This)->lpVtbl->StrokeWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Outline(This,geometry) \
    ( (This)->lpVtbl->Outline(This,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_OutlineWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,geometry) \
    ( (This)->lpVtbl->OutlineWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Simplify(This,simplification,geometry) \
    ( (This)->lpVtbl->Simplify(This,simplification,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_SimplifyWithTransformAndFlatteningTolerance(This,simplification,transform,flatteningTolerance,geometry) \
    ( (This)->lpVtbl->SimplifyWithTransformAndFlatteningTolerance(This,simplification,transform,flatteningTolerance,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Transform(This,transform,geometry) \
    ( (This)->lpVtbl->Transform(This,transform,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CompareWith(This,otherGeometry,relation) \
    ( (This)->lpVtbl->CompareWith(This,otherGeometry,relation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_CompareWithUsingTransformAndFlatteningTolerance(This,otherGeometry,otherGeometryTransform,flatteningTolerance,relation) \
    ( (This)->lpVtbl->CompareWithUsingTransformAndFlatteningTolerance(This,otherGeometry,otherGeometryTransform,flatteningTolerance,relation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeArea(This,area) \
    ( (This)->lpVtbl->ComputeArea(This,area) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeAreaWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,area) \
    ( (This)->lpVtbl->ComputeAreaWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,area) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePathLength(This,length) \
    ( (This)->lpVtbl->ComputePathLength(This,length) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePathLengthWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,length) \
    ( (This)->lpVtbl->ComputePathLengthWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,length) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPath(This,distance,point) \
    ( (This)->lpVtbl->ComputePointOnPath(This,distance,point) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPathWithTangent(This,distance,tangent,point) \
    ( (This)->lpVtbl->ComputePointOnPathWithTangent(This,distance,tangent,point) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(This,length,transform,flatteningTolerance,tangent,point) \
    ( (This)->lpVtbl->ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(This,length,transform,flatteningTolerance,tangent,point) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FillContainsPoint(This,point,containsPoint) \
    ( (This)->lpVtbl->FillContainsPoint(This,point,containsPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_FillContainsPointWithTransformAndFlatteningTolerance(This,point,transform,flatteningTolerance,containsPoint) \
    ( (This)->lpVtbl->FillContainsPointWithTransformAndFlatteningTolerance(This,point,transform,flatteningTolerance,containsPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeBounds(This,bounds) \
    ( (This)->lpVtbl->ComputeBounds(This,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeBoundsWithTransform(This,transform,bounds) \
    ( (This)->lpVtbl->ComputeBoundsWithTransform(This,transform,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBounds(This,strokeWidth,bounds) \
    ( (This)->lpVtbl->ComputeStrokeBounds(This,strokeWidth,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBoundsWithStrokeStyle(This,strokeWidth,strokeStyle,bounds) \
    ( (This)->lpVtbl->ComputeStrokeBoundsWithStrokeStyle(This,strokeWidth,strokeStyle,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_ComputeStrokeBoundsWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,bounds) \
    ( (This)->lpVtbl->ComputeStrokeBoundsWithAllOptions(This,strokeWidth,strokeStyle,transform,flatteningTolerance,bounds) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPoint(This,point,strokeWidth,containsPoint) \
    ( (This)->lpVtbl->StrokeContainsPoint(This,point,strokeWidth,containsPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPointWithStrokeStyle(This,point,strokeWidth,strokeStyle,containsPoint) \
    ( (This)->lpVtbl->StrokeContainsPointWithStrokeStyle(This,point,strokeWidth,strokeStyle,containsPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_StrokeContainsPointWithAllOptions(This,point,strokeWidth,strokeStyle,transform,flatteningTolerance,containsPoint) \
    ( (This)->lpVtbl->StrokeContainsPointWithAllOptions(This,point,strokeWidth,strokeStyle,transform,flatteningTolerance,containsPoint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_Tessellate(This,trianglesCount,triangles) \
    ( (This)->lpVtbl->Tessellate(This,trianglesCount,triangles) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_TessellateWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,trianglesCount,triangles) \
    ( (This)->lpVtbl->TessellateWithTransformAndFlatteningTolerance(This,transform,flatteningTolerance,trianglesCount,triangles) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_SendPathTo(This,streamReader) \
    ( (This)->lpVtbl->SendPathTo(This,streamReader) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasGeometry
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics";
/* [object, exclusiveto, uuid("D94E33CF-CD59-46F2-8DF4-55066AABFD56"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateRectangleAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateRoundedRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateRoundedRectangleAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateEllipse )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateEllipseAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateCircle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateCircleAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    HRESULT ( STDMETHODCALLTYPE *CreatePath )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder * pathBuilder,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    HRESULT ( STDMETHODCALLTYPE *CreatePolygon )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 pointCount,
        /* [size_is(pointCount), in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * points,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateGroup )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 geometriesCount,
        /* [size_is(geometriesCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometries,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateGroupWithFilledRegionDetermination )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 geometriesCount,
        /* [size_is(geometriesCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometries,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination filledRegionDetermination,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    HRESULT ( STDMETHODCALLTYPE *CreateText )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * textLayout,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    HRESULT ( STDMETHODCALLTYPE *CreateGlyphRun )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */UINT32 glyphCount,
        /* [size_is(glyphCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphs,
        /* [in] */boolean isSideways,
        /* [in] */UINT32 bidiLevel,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation glyphOrientation,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateInk )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateInkWithTransformAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * geometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ComputeFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */float dpi,
        /* [in] */float maximumZoomFactor,
        /* [retval, out] */float * flatteningTolerance
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ComputeFlatteningToleranceWithTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [in] */float dpi,
        /* [in] */float maximumZoomFactor,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 expectedGeometryTransform,
        /* [retval, out] */float * flatteningTolerance
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DefaultFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics * This,
        /* [retval, out] */float * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRectangle(This,resourceCreator,rect,geometry) \
    ( (This)->lpVtbl->CreateRectangle(This,resourceCreator,rect,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRectangleAtCoords(This,resourceCreator,x,y,w,h,geometry) \
    ( (This)->lpVtbl->CreateRectangleAtCoords(This,resourceCreator,x,y,w,h,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRoundedRectangle(This,resourceCreator,rect,radiusX,radiusY,geometry) \
    ( (This)->lpVtbl->CreateRoundedRectangle(This,resourceCreator,rect,radiusX,radiusY,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateRoundedRectangleAtCoords(This,resourceCreator,x,y,w,h,radiusX,radiusY,geometry) \
    ( (This)->lpVtbl->CreateRoundedRectangleAtCoords(This,resourceCreator,x,y,w,h,radiusX,radiusY,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateEllipse(This,resourceCreator,centerPoint,radiusX,radiusY,geometry) \
    ( (This)->lpVtbl->CreateEllipse(This,resourceCreator,centerPoint,radiusX,radiusY,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateEllipseAtCoords(This,resourceCreator,x,y,radiusX,radiusY,geometry) \
    ( (This)->lpVtbl->CreateEllipseAtCoords(This,resourceCreator,x,y,radiusX,radiusY,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateCircle(This,resourceCreator,centerPoint,radius,geometry) \
    ( (This)->lpVtbl->CreateCircle(This,resourceCreator,centerPoint,radius,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateCircleAtCoords(This,resourceCreator,x,y,radius,geometry) \
    ( (This)->lpVtbl->CreateCircleAtCoords(This,resourceCreator,x,y,radius,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreatePath(This,pathBuilder,geometry) \
    ( (This)->lpVtbl->CreatePath(This,pathBuilder,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreatePolygon(This,resourceCreator,pointCount,points,geometry) \
    ( (This)->lpVtbl->CreatePolygon(This,resourceCreator,pointCount,points,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGroup(This,resourceCreator,geometriesCount,geometries,geometry) \
    ( (This)->lpVtbl->CreateGroup(This,resourceCreator,geometriesCount,geometries,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGroupWithFilledRegionDetermination(This,resourceCreator,geometriesCount,geometries,filledRegionDetermination,geometry) \
    ( (This)->lpVtbl->CreateGroupWithFilledRegionDetermination(This,resourceCreator,geometriesCount,geometries,filledRegionDetermination,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateText(This,textLayout,geometry) \
    ( (This)->lpVtbl->CreateText(This,textLayout,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateGlyphRun(This,resourceCreator,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,glyphOrientation,geometry) \
    ( (This)->lpVtbl->CreateGlyphRun(This,resourceCreator,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,measuringMode,glyphOrientation,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateInk(This,resourceCreator,inkStrokes,geometry) \
    ( (This)->lpVtbl->CreateInk(This,resourceCreator,inkStrokes,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_CreateInkWithTransformAndFlatteningTolerance(This,resourceCreator,inkStrokes,transform,flatteningTolerance,geometry) \
    ( (This)->lpVtbl->CreateInkWithTransformAndFlatteningTolerance(This,resourceCreator,inkStrokes,transform,flatteningTolerance,geometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_ComputeFlatteningTolerance(This,dpi,maximumZoomFactor,flatteningTolerance) \
    ( (This)->lpVtbl->ComputeFlatteningTolerance(This,dpi,maximumZoomFactor,flatteningTolerance) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_ComputeFlatteningToleranceWithTransform(This,dpi,maximumZoomFactor,expectedGeometryTransform,flatteningTolerance) \
    ( (This)->lpVtbl->ComputeFlatteningToleranceWithTransform(This,dpi,maximumZoomFactor,expectedGeometryTransform,flatteningTolerance) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_get_DefaultFlatteningTolerance(This,value) \
    ( (This)->lpVtbl->get_DefaultFlatteningTolerance(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasGeometry
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry ** Default Interface **
 *    Windows.Graphics.IGeometrySource2D
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasGeometry";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry";
/* [object, exclusiveto, uuid("BA6CB114-E1A1-448D-AB7C-8D2B92674119"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometryStatics[] = L"Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics";
/* [object, exclusiveto, uuid("80BA1060-A9D7-41BA-9372-EC3FC1744E5D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateFill )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * * cachedGeometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateFillWithFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * * cachedGeometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateStroke )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float strokeWidth,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * * cachedGeometry
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateStrokeWithStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * * cachedGeometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateStrokeWithStrokeStyleAndFlatteningTolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle,
        /* [in] */float flatteningTolerance,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * * cachedGeometry
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateFill(This,geometry,cachedGeometry) \
    ( (This)->lpVtbl->CreateFill(This,geometry,cachedGeometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateFillWithFlatteningTolerance(This,geometry,flatteningTolerance,cachedGeometry) \
    ( (This)->lpVtbl->CreateFillWithFlatteningTolerance(This,geometry,flatteningTolerance,cachedGeometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStroke(This,geometry,strokeWidth,cachedGeometry) \
    ( (This)->lpVtbl->CreateStroke(This,geometry,strokeWidth,cachedGeometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStrokeWithStrokeStyle(This,geometry,strokeWidth,strokeStyle,cachedGeometry) \
    ( (This)->lpVtbl->CreateStrokeWithStrokeStyle(This,geometry,strokeWidth,strokeStyle,cachedGeometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_CreateStrokeWithStrokeStyleAndFlatteningTolerance(This,geometry,strokeWidth,strokeStyle,flatteningTolerance,cachedGeometry) \
    ( (This)->lpVtbl->CreateStrokeWithStrokeStyleAndFlatteningTolerance(This,geometry,strokeWidth,strokeStyle,flatteningTolerance,cachedGeometry) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Geometry_CanvasCachedGeometry[] = L"Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier
{
    CanvasFontPropertyIdentifier_None,
    CanvasFontPropertyIdentifier_FamilyName,
    CanvasFontPropertyIdentifier_PreferredFamilyName,
    CanvasFontPropertyIdentifier_FaceName,
    CanvasFontPropertyIdentifier_FullName,
    CanvasFontPropertyIdentifier_Win32FamilyName,
    CanvasFontPropertyIdentifier_PostscriptName,
    CanvasFontPropertyIdentifier_DesignScriptLanguageTag,
    CanvasFontPropertyIdentifier_SupportedScriptLanguageTag,
    CanvasFontPropertyIdentifier_SemanticTag,
    CanvasFontPropertyIdentifier_Weight,
    CanvasFontPropertyIdentifier_Stretch,
    CanvasFontPropertyIdentifier_Style,
    CanvasFontPropertyIdentifier_Total,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasFontProperty
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty
{
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier Identifier;
    HSTRING Value;
    HSTRING Locale;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontSet
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSet[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSet";
/* [object, exclusiveto, uuid("0A5BFB92-1F3C-459F-9D7E-A6289DD093C0"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Fonts )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [retval, out] */__FIVectorView_1_Microsoft__CGraphics__CCanvas__CText__CCanvasFontFace * * value
        );
    HRESULT ( STDMETHODCALLTYPE *TryFindFontFace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [out] */int * index,
        /* [retval, out] */boolean * succeeded
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetMatchingFontsFromProperties )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [in] */UINT32 propertyCount,
        /* [size_is(propertyCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty * propertyElements,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * * matchingFonts
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetMatchingFontsFromWwsFamily )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [in] */HSTRING familyName,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontWeight weight,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontStretch stretch,
        /* [in] */__x_ABI_CWindows_CUI_CText_CFontStyle style,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * * matchingFonts
        );
    HRESULT ( STDMETHODCALLTYPE *CountFontsMatchingProperty )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty property,
        /* [retval, out] */UINT32 * count
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *GetPropertyValuesFromIndex )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [in] */UINT32 fontIndex,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier propertyIdentifier,
        /* [retval, out] */__FIMapView_2_HSTRING_HSTRING * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPropertyValuesFromIdentifier )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier propertyIdentifier,
        /* [in] */HSTRING preferredLocaleNames,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetPropertyValues )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier propertyIdentifier,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty * * valueElements
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_get_Fonts(This,value) \
    ( (This)->lpVtbl->get_Fonts(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_TryFindFontFace(This,fontFace,index,succeeded) \
    ( (This)->lpVtbl->TryFindFontFace(This,fontFace,index,succeeded) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetMatchingFontsFromProperties(This,propertyCount,propertyElements,matchingFonts) \
    ( (This)->lpVtbl->GetMatchingFontsFromProperties(This,propertyCount,propertyElements,matchingFonts) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetMatchingFontsFromWwsFamily(This,familyName,weight,stretch,style,matchingFonts) \
    ( (This)->lpVtbl->GetMatchingFontsFromWwsFamily(This,familyName,weight,stretch,style,matchingFonts) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_CountFontsMatchingProperty(This,property,count) \
    ( (This)->lpVtbl->CountFontsMatchingProperty(This,property,count) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetPropertyValuesFromIndex(This,fontIndex,propertyIdentifier,values) \
    ( (This)->lpVtbl->GetPropertyValuesFromIndex(This,fontIndex,propertyIdentifier,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetPropertyValuesFromIdentifier(This,propertyIdentifier,preferredLocaleNames,valueCount,valueElements) \
    ( (This)->lpVtbl->GetPropertyValuesFromIdentifier(This,propertyIdentifier,preferredLocaleNames,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_GetPropertyValues(This,propertyIdentifier,valueCount,valueElements) \
    ( (This)->lpVtbl->GetPropertyValues(This,propertyIdentifier,valueCount,valueElements) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSetFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory";
/* [object, exclusiveto, uuid("3C9C9BDA-70F9-4FF9-AAB2-3B42923286EE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CIUriRuntimeClass * uri,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * * fontSet
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_Create(This,uri,fontSet) \
    ( (This)->lpVtbl->Create(This,uri,fontSet) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasFontSetStatics[] = L"Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics";
/* [object, exclusiveto, uuid("5F4275CE-BCFA-48C5-9E67-FBE9866D4924"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *GetSystemFontSet )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * * fontSet
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_GetSystemFontSet(This,fontSet) \
    ( (This)->lpVtbl->GetSystemFontSet(This,fontSet) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasFontSet
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasFontSet ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontSet_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasFontSet_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasFontSet[] = L"Microsoft.Graphics.Canvas.Text.CanvasFontSet";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod
{
    CanvasNumberSubstitutionMethod_FromCulture,
    CanvasNumberSubstitutionMethod_Contextual,
    CanvasNumberSubstitutionMethod_Disabled,
    CanvasNumberSubstitutionMethod_National,
    CanvasNumberSubstitutionMethod_Traditional,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitution[] = L"Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution";
/* [object, exclusiveto, uuid("C81A67AD-0639-4F8F-878B-D937F8A14293"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory";
/* [object, exclusiveto, uuid("7496A822-C781-4EB0-AAFB-C078E7FA8E24"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod method,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * * canvasNumberSubstitution
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithLocaleAndIgnoreOverrides )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod method,
        /* [in] */HSTRING localeName,
        /* [in] */boolean ignoreEnvironmentOverrides,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * * canvasNumberSubstitution
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_Create(This,method,canvasNumberSubstitution) \
    ( (This)->lpVtbl->Create(This,method,canvasNumberSubstitution) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_CreateWithLocaleAndIgnoreOverrides(This,method,localeName,ignoreEnvironmentOverrides,canvasNumberSubstitution) \
    ( (This)->lpVtbl->CreateWithLocaleAndIgnoreOverrides(This,method,localeName,ignoreEnvironmentOverrides,canvasNumberSubstitution) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution[] = L"Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerOptions[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions";
/* [object, uuid("31F2406A-8C5F-4E12-8BD6-CFBBC7214D02"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptionsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *GetLocaleName )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
        /* [in] */INT32 characterIndex,
        /* [out] */INT32 * characterCount,
        /* [retval, out] */HSTRING * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetNumberSubstitution )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
        /* [in] */INT32 characterIndex,
        /* [out] */INT32 * characterCount,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetVerticalGlyphOrientation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
        /* [in] */INT32 characterIndex,
        /* [out] */INT32 * characterCount,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetBidiLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * This,
        /* [in] */INT32 characterIndex,
        /* [out] */INT32 * characterCount,
        /* [retval, out] */UINT32 * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptionsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptionsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetLocaleName(This,characterIndex,characterCount,value) \
    ( (This)->lpVtbl->GetLocaleName(This,characterIndex,characterCount,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetNumberSubstitution(This,characterIndex,characterCount,value) \
    ( (This)->lpVtbl->GetNumberSubstitution(This,characterIndex,characterCount,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetVerticalGlyphOrientation(This,characterIndex,characterCount,value) \
    ( (This)->lpVtbl->GetVerticalGlyphOrientation(This,characterIndex,characterCount,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_GetBidiLevel(This,characterIndex,characterCount,value) \
    ( (This)->lpVtbl->GetBidiLevel(This,characterIndex,characterCount,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions_INTERFACE_DEFINED__) */



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasScaledFont
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasScaledFont
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasScaledFont[] = L"Microsoft.Graphics.Canvas.Text.ICanvasScaledFont";
/* [object, exclusiveto, uuid("BBC4F8D2-EB2B-45F1-AC2A-CFC1F598BAE3"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFontVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FontFace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ScaleFactor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont * This,
        /* [retval, out] */float * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFontVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFontVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_get_FontFace(This,value) \
    ( (This)->lpVtbl->get_FontFace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_get_ScaleFactor(This,value) \
    ( (This)->lpVtbl->get_ScaleFactor(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasScaledFont
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasScaledFont ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasScaledFont_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasScaledFont_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasScaledFont[] = L"Microsoft.Graphics.Canvas.Text.CanvasScaledFont";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasCharacterRange
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange
{
    INT32 CharacterIndex;
    INT32 CharacterCount;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi
{
    UINT32 ExplicitLevel;
    UINT32 ResolvedLevel;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint
{
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition BreakBefore;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition BreakAfter;
    boolean IsWhitespace;
    boolean IsSoftHyphen;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasScriptProperties
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties
{
    HSTRING IsoScriptCode;
    INT32 IsoScriptNumber;
    INT32 ClusterLookahead;
    HSTRING JustificationCharacter;
    boolean RestrictCaretToClusters;
    boolean UsesWordDividers;
    boolean IsDiscreteWriting;
    boolean IsBlockWriting;
    boolean IsDistributedWithinCluster;
    boolean IsConnectedWriting;
    boolean IsCursiveWriting;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification
{
    CanvasGlyphJustification_None = 0,
    CanvasGlyphJustification_ArabicBlank = 1,
    CanvasGlyphJustification_Character = 2,
    CanvasGlyphJustification_Blank = 4,
    CanvasGlyphJustification_ArabicNormal = 7,
    CanvasGlyphJustification_ArabicKashida = 8,
    CanvasGlyphJustification_ArabicAlef = 9,
    CanvasGlyphJustification_ArabicHa = 10,
    CanvasGlyphJustification_ArabicRa = 11,
    CanvasGlyphJustification_ArabicBa = 12,
    CanvasGlyphJustification_ArabicBara = 13,
    CanvasGlyphJustification_ArabicSeen = 14,
    CanvasGlyphJustification_ArabicSeenM = 15,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping
{
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification Justification;
    boolean IsClusterStart;
    boolean IsDiacritic;
    boolean IsZeroWidthSpace;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation
{
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation GlyphOrientation;
    UINT32 AdjustedBidiLevel;
    boolean IsSideways;
    boolean IsRightToLeft;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity
{
    float ExpansionMinimum;
    float ExpansionMaximum;
    float CompressionMaximum;
    BYTE ExpansionPriority;
    BYTE CompressionPriority;
    boolean AllowResidualExpansion;
    boolean AllowResidualCompression;
    boolean ApplyToLeadingEdge;
    boolean ApplyToTrailingEdge;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer";
/* [object, exclusiveto, uuid("4298F3D1-645B-40E3-B91B-81986D767FC0"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *GetFontsUsingSystemFontSet )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * textFormat,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetFonts )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * textFormat,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet * fontSet,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasScaledFont * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBidi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBidiWithLocale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */HSTRING locale,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBreakpoints )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetBreakpointsWithLocale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */HSTRING locale,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetNumberSubstitutions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetScript )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetScriptWithLocale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */HSTRING locale,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetGlyphOrientations )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * * values
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetGlyphOrientationsWithLocale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */HSTRING locale,
        /* [retval, out] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation * * values
        );
    HRESULT ( STDMETHODCALLTYPE *GetScriptProperties )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript analyzedScript,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties * scriptProperties
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetGlyphs )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange characterRange,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */boolean isSideways,
        /* [in] */boolean isRightToLeft,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *GetGlyphsWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange characterRange,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */boolean isSideways,
        /* [in] */boolean isRightToLeft,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [in] */HSTRING locale,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * numberSubstitution,
        /* [in] */__FIVectorView_1___FIKeyValuePair_2_Microsoft__CGraphics__CCanvas__CText__CCanvasCharacterRange_Microsoft__CGraphics__CCanvas__CText__CCanvasTypography * typographyRanges,
        /* [out] */UINT32 * clusterMapIndicesCount,
        /* [size_is(, *(clusterMapIndicesCount)), out] */int * * clusterMapIndicesElements,
        /* [out] */UINT32 * isShapedAloneGlyphsCount,
        /* [size_is(, *(isShapedAloneGlyphsCount)), out] */boolean * * isShapedAloneGlyphsElements,
        /* [out] */UINT32 * glyphShapingResultsCount,
        /* [size_is(, *(glyphShapingResultsCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping * * glyphShapingResultsElements,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetJustificationOpportunities )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange characterRange,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [in] */UINT32 clusterMapIndicesCount,
        /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndicesElements,
        /* [in] */UINT32 glyphShapingResultsCount,
        /* [size_is(glyphShapingResultsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping * glyphShapingResultsElements,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *ApplyJustificationOpportunities )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */float lineWidth,
        /* [in] */UINT32 justificationOpportunitiesCount,
        /* [size_is(justificationOpportunitiesCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity * justificationOpportunitiesElements,
        /* [in] */UINT32 sourceGlyphsCount,
        /* [size_is(sourceGlyphsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * sourceGlyphsElements,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * * valueElements
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *AddGlyphsAfterJustification )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [in] */UINT32 clusterMapIndicesCount,
        /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndicesElements,
        /* [in] */UINT32 originalGlyphsCount,
        /* [size_is(originalGlyphsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * originalGlyphsElements,
        /* [in] */UINT32 justifiedGlyphsCount,
        /* [size_is(justifiedGlyphsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * justifiedGlyphsElements,
        /* [in] */UINT32 glyphShapingResultsCount,
        /* [size_is(glyphShapingResultsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping * glyphShapingResultsElements,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * * valueElements
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *AddGlyphsAfterJustificationWithClusterMap )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript script,
        /* [in] */UINT32 clusterMapIndicesCount,
        /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndicesElements,
        /* [in] */UINT32 originalGlyphsCount,
        /* [size_is(originalGlyphsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * originalGlyphsElements,
        /* [in] */UINT32 justifiedGlyphsCount,
        /* [size_is(justifiedGlyphsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * justifiedGlyphsElements,
        /* [in] */UINT32 glyphShapingResultsCount,
        /* [size_is(glyphShapingResultsCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping * glyphShapingResultsElements,
        /* [out] */UINT32 * outputClusterMapIndicesCount,
        /* [size_is(, *(outputClusterMapIndicesCount)), out] */int * * outputClusterMapIndicesElements,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * * valueElements
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetFontsUsingSystemFontSet(This,textFormat,values) \
    ( (This)->lpVtbl->GetFontsUsingSystemFontSet(This,textFormat,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetFonts(This,textFormat,fontSet,values) \
    ( (This)->lpVtbl->GetFonts(This,textFormat,fontSet,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBidi(This,values) \
    ( (This)->lpVtbl->GetBidi(This,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBidiWithLocale(This,locale,values) \
    ( (This)->lpVtbl->GetBidiWithLocale(This,locale,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBreakpoints(This,valueCount,valueElements) \
    ( (This)->lpVtbl->GetBreakpoints(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetBreakpointsWithLocale(This,locale,valueCount,valueElements) \
    ( (This)->lpVtbl->GetBreakpointsWithLocale(This,locale,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetNumberSubstitutions(This,values) \
    ( (This)->lpVtbl->GetNumberSubstitutions(This,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetScript(This,values) \
    ( (This)->lpVtbl->GetScript(This,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetScriptWithLocale(This,locale,values) \
    ( (This)->lpVtbl->GetScriptWithLocale(This,locale,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphOrientations(This,values) \
    ( (This)->lpVtbl->GetGlyphOrientations(This,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphOrientationsWithLocale(This,locale,values) \
    ( (This)->lpVtbl->GetGlyphOrientationsWithLocale(This,locale,values) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetScriptProperties(This,analyzedScript,scriptProperties) \
    ( (This)->lpVtbl->GetScriptProperties(This,analyzedScript,scriptProperties) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphs(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,valueCount,valueElements) \
    ( (This)->lpVtbl->GetGlyphs(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetGlyphsWithAllOptions(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,locale,numberSubstitution,typographyRanges,clusterMapIndicesCount,clusterMapIndicesElements,isShapedAloneGlyphsCount,isShapedAloneGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) \
    ( (This)->lpVtbl->GetGlyphsWithAllOptions(This,characterRange,fontFace,fontSize,isSideways,isRightToLeft,script,locale,numberSubstitution,typographyRanges,clusterMapIndicesCount,clusterMapIndicesElements,isShapedAloneGlyphsCount,isShapedAloneGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_GetJustificationOpportunities(This,characterRange,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) \
    ( (This)->lpVtbl->GetJustificationOpportunities(This,characterRange,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_ApplyJustificationOpportunities(This,lineWidth,justificationOpportunitiesCount,justificationOpportunitiesElements,sourceGlyphsCount,sourceGlyphsElements,valueCount,valueElements) \
    ( (This)->lpVtbl->ApplyJustificationOpportunities(This,lineWidth,justificationOpportunitiesCount,justificationOpportunitiesElements,sourceGlyphsCount,sourceGlyphsElements,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_AddGlyphsAfterJustification(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) \
    ( (This)->lpVtbl->AddGlyphsAfterJustification(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_AddGlyphsAfterJustificationWithClusterMap(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,outputClusterMapIndicesCount,outputClusterMapIndicesElements,valueCount,valueElements) \
    ( (This)->lpVtbl->AddGlyphsAfterJustificationWithClusterMap(This,fontFace,fontSize,script,clusterMapIndicesCount,clusterMapIndicesElements,originalGlyphsCount,originalGlyphsElements,justifiedGlyphsCount,justifiedGlyphsElements,glyphShapingResultsCount,glyphShapingResultsElements,outputClusterMapIndicesCount,outputClusterMapIndicesElements,valueCount,valueElements) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory[] = L"Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory";
/* [object, exclusiveto, uuid("521E433F-F698-44C0-8D7F-FE374FE539E1"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * * canvasTextAnalyzer
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution * numberSubstitution,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation verticalGlyphOrientation,
        /* [in] */UINT32 bidiLevel,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * * canvasTextAnalyzer
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection textDirection,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions * options,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer * * canvasTextAnalyzer
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_Create(This,text,textDirection,canvasTextAnalyzer) \
    ( (This)->lpVtbl->Create(This,text,textDirection,canvasTextAnalyzer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(This,text,textDirection,numberSubstitution,verticalGlyphOrientation,bidiLevel,canvasTextAnalyzer) \
    ( (This)->lpVtbl->CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(This,text,textDirection,numberSubstitution,verticalGlyphOrientation,bidiLevel,canvasTextAnalyzer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_CreateWithOptions(This,text,textDirection,options,canvasTextAnalyzer) \
    ( (This)->lpVtbl->CreateWithOptions(This,text,textDirection,options,canvasTextAnalyzer) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Text_CanvasTextAnalyzer[] = L"Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSpriteSortMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode
{
    CanvasSpriteSortMode_None,
    CanvasSpriteSortMode_Bitmap,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSpriteOptions
 *
 */
/* [flags, version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions
{
    CanvasSpriteOptions_None = 0,
    CanvasSpriteOptions_ClampToSourceRect = 0x1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSpriteFlip
 *
 */
/* [flags, version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip
{
    CanvasSpriteFlip_None = 0,
    CanvasSpriteFlip_Horizontal = 0x1,
    CanvasSpriteFlip_Vertical = 0x2,
    CanvasSpriteFlip_Both = 0x3,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip;



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSpriteBatch
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSpriteBatchStatics[] = L"Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics";
/* [object, exclusiveto, uuid("851EB08D-9D01-4B57-9E94-24113151B74B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics * This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * device,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_IsSupported(This,device,value) \
    ( (This)->lpVtbl->IsSupported(This,device,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSpriteBatch
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSpriteBatch
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSpriteBatch[] = L"Microsoft.Graphics.Canvas.ICanvasSpriteBatch";
/* [object, exclusiveto, uuid("A065DCE4-A7F2-4DF4-8405-EA9E3A215BF8"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawToRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destRect
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawAtOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawWithTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawToRectWithTint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawAtOffsetWithTint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawWithTransformAndTint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawToRectWithTintAndFlip )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawWithTransformAndTintAndFlip )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawAtOffsetWithTintAndTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 origin,
        /* [in] */float rotation,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 scale,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetToRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetAtOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetWithTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetToRectWithTint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetAtOffsetWithTint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetWithTransformAndTint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetToRectWithTintAndFlip )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetWithTransformAndTintAndFlip )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 transform,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawFromSpriteSheetAtOffsetWithTintAndTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRect,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 tint,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 origin,
        /* [in] */float rotation,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 scale,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip flip
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawToRect(This,bitmap,destRect) \
    ( (This)->lpVtbl->DrawToRect(This,bitmap,destRect) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawAtOffset(This,bitmap,offset) \
    ( (This)->lpVtbl->DrawAtOffset(This,bitmap,offset) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawWithTransform(This,bitmap,transform) \
    ( (This)->lpVtbl->DrawWithTransform(This,bitmap,transform) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawToRectWithTint(This,bitmap,destRect,tint) \
    ( (This)->lpVtbl->DrawToRectWithTint(This,bitmap,destRect,tint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawAtOffsetWithTint(This,bitmap,offset,tint) \
    ( (This)->lpVtbl->DrawAtOffsetWithTint(This,bitmap,offset,tint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawWithTransformAndTint(This,bitmap,transform,tint) \
    ( (This)->lpVtbl->DrawWithTransformAndTint(This,bitmap,transform,tint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawToRectWithTintAndFlip(This,bitmap,destRect,tint,flip) \
    ( (This)->lpVtbl->DrawToRectWithTintAndFlip(This,bitmap,destRect,tint,flip) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawWithTransformAndTintAndFlip(This,bitmap,transform,tint,flip) \
    ( (This)->lpVtbl->DrawWithTransformAndTintAndFlip(This,bitmap,transform,tint,flip) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawAtOffsetWithTintAndTransform(This,bitmap,offset,tint,origin,rotation,scale,flip) \
    ( (This)->lpVtbl->DrawAtOffsetWithTintAndTransform(This,bitmap,offset,tint,origin,rotation,scale,flip) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetToRect(This,bitmap,destRect,sourceRect) \
    ( (This)->lpVtbl->DrawFromSpriteSheetToRect(This,bitmap,destRect,sourceRect) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetAtOffset(This,bitmap,offset,sourceRect) \
    ( (This)->lpVtbl->DrawFromSpriteSheetAtOffset(This,bitmap,offset,sourceRect) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetWithTransform(This,bitmap,transform,sourceRect) \
    ( (This)->lpVtbl->DrawFromSpriteSheetWithTransform(This,bitmap,transform,sourceRect) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetToRectWithTint(This,bitmap,destRect,sourceRect,tint) \
    ( (This)->lpVtbl->DrawFromSpriteSheetToRectWithTint(This,bitmap,destRect,sourceRect,tint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetAtOffsetWithTint(This,bitmap,offset,sourceRect,tint) \
    ( (This)->lpVtbl->DrawFromSpriteSheetAtOffsetWithTint(This,bitmap,offset,sourceRect,tint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetWithTransformAndTint(This,bitmap,transform,sourceRect,tint) \
    ( (This)->lpVtbl->DrawFromSpriteSheetWithTransformAndTint(This,bitmap,transform,sourceRect,tint) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetToRectWithTintAndFlip(This,bitmap,destRect,sourceRect,tint,flip) \
    ( (This)->lpVtbl->DrawFromSpriteSheetToRectWithTintAndFlip(This,bitmap,destRect,sourceRect,tint,flip) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetWithTransformAndTintAndFlip(This,bitmap,transform,sourceRect,tint,flip) \
    ( (This)->lpVtbl->DrawFromSpriteSheetWithTransformAndTintAndFlip(This,bitmap,transform,sourceRect,tint,flip) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_DrawFromSpriteSheetAtOffsetWithTintAndTransform(This,bitmap,offset,sourceRect,tint,origin,rotation,scale,flip) \
    ( (This)->lpVtbl->DrawFromSpriteSheetAtOffsetWithTintAndTransform(This,bitmap,offset,sourceRect,tint,origin,rotation,scale,flip) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasSpriteBatch
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasSpriteBatch ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSpriteBatch_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSpriteBatch_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasSpriteBatch[] = L"Microsoft.Graphics.Canvas.CanvasSpriteBatch";
#endif






/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay
{
    CanvasSvgDisplay_Inline,
    CanvasSvgDisplay_None,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility
{
    CanvasSvgVisibility_Visible,
    CanvasSvgVisibility_Hidden,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow
{
    CanvasSvgOverflow_DoNotClipToViewport,
    CanvasSvgOverflow_ClipToViewport,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits
{
    CanvasSvgUnits_UserSpaceOnUse,
    CanvasSvgUnits_ObjectBoundingBox,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling
{
    CanvasSvgAspectScaling_Meet,
    CanvasSvgAspectScaling_Slice,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment
{
    CanvasSvgAspectAlignment_None,
    CanvasSvgAspectAlignment_XMinYMin,
    CanvasSvgAspectAlignment_XMidYMin,
    CanvasSvgAspectAlignment_XMaxYMin,
    CanvasSvgAspectAlignment_XMinYMid,
    CanvasSvgAspectAlignment_XMidYMid,
    CanvasSvgAspectAlignment_XMaxYMid,
    CanvasSvgAspectAlignment_XMinYMax,
    CanvasSvgAspectAlignment_XMidYMax,
    CanvasSvgAspectAlignment_XMaxYMax,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits
{
    CanvasSvgLengthUnits_Number,
    CanvasSvgLengthUnits_Percentage,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement";
/* [object, uuid("0775CB81-C555-45BF-9795-0FF59151C3BE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElementVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ContainingDocument )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Parent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElementVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElementVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_get_ContainingDocument(This,value) \
    ( (This)->lpVtbl->get_ContainingDocument(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_get_Parent(This,value) \
    ( (This)->lpVtbl->get_Parent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute";
/* [object, uuid("652786A8-F3AB-4083-991D-9748AA86BD6E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttributeVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Clone )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * * result
        );
    HRESULT ( STDMETHODCALLTYPE *GetElement )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttributeVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttributeVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_Clone(This,result) \
    ( (This)->lpVtbl->Clone(This,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_GetElement(This,value) \
    ( (This)->lpVtbl->GetElement(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement";
/* [object, exclusiveto, uuid("D8B7CB94-8167-495D-9C71-5E97E5D08D2B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElementVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *AppendChild )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * child
        );
    HRESULT ( STDMETHODCALLTYPE *CreateAndAppendNamedChildElement )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING childName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * * childElement
        );
    HRESULT ( STDMETHODCALLTYPE *CreateAndAppendTextChildElement )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING textContent,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * * childElement
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_FirstChild )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LastChild )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetPreviousSibling )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * child,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetNextSibling )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * child,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SpecifiedAttributes )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */HSTRING * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Tag )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [retval, out] */HSTRING * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HasChildren )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [retval, out] */boolean * value
        );
    HRESULT ( STDMETHODCALLTYPE *InsertChildBefore )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * child,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * referenceChild
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *IsAttributeSpecified )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */boolean * value
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *IsAttributeSpecifiedWithInherhited )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */boolean inherited,
        /* [retval, out] */boolean * value
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveChild )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * child
        );
    HRESULT ( STDMETHODCALLTYPE *ReplaceChild )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * newChild,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement * oldChild
        );
    HRESULT ( STDMETHODCALLTYPE *SetStringAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */HSTRING attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetStringAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */HSTRING * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute * * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetIdAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */HSTRING attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetIdAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */HSTRING * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetFloatAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */float attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetFloatAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */float * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetColorAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CWindows_CUI_CColor attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetColorAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetFilledRegionDeterminationAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetFilledRegionDeterminationAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetDisplayAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetDisplayAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetOverflowAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetOverflowAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetCapStyleAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetCapStyleAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetLineJoinAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetLineJoinAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetVisibilityAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetVisibilityAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetTransformAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetTransformAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetUnitsAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetUnitsAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetEdgeBehaviorAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetEdgeBehaviorAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetRectangleAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *GetRectangleAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * attributeValue
        );
    HRESULT ( STDMETHODCALLTYPE *SetLengthAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */float value,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits units
        );
    HRESULT ( STDMETHODCALLTYPE *GetLengthAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits * units,
        /* [retval, out] */float * value
        );
    HRESULT ( STDMETHODCALLTYPE *SetAspectRatioAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment alignment,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling meetOrSlice
        );
    HRESULT ( STDMETHODCALLTYPE *GetAspectRatioAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * This,
        /* [in] */HSTRING attributeName,
        /* [out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling * meetOrSlice,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment * alignment
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElementVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElementVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_AppendChild(This,child) \
    ( (This)->lpVtbl->AppendChild(This,child) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_CreateAndAppendNamedChildElement(This,childName,childElement) \
    ( (This)->lpVtbl->CreateAndAppendNamedChildElement(This,childName,childElement) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_CreateAndAppendTextChildElement(This,textContent,childElement) \
    ( (This)->lpVtbl->CreateAndAppendTextChildElement(This,textContent,childElement) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_FirstChild(This,value) \
    ( (This)->lpVtbl->get_FirstChild(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_LastChild(This,value) \
    ( (This)->lpVtbl->get_LastChild(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetPreviousSibling(This,child,value) \
    ( (This)->lpVtbl->GetPreviousSibling(This,child,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetNextSibling(This,child,value) \
    ( (This)->lpVtbl->GetNextSibling(This,child,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_SpecifiedAttributes(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_SpecifiedAttributes(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_Tag(This,value) \
    ( (This)->lpVtbl->get_Tag(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_get_HasChildren(This,value) \
    ( (This)->lpVtbl->get_HasChildren(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_InsertChildBefore(This,child,referenceChild) \
    ( (This)->lpVtbl->InsertChildBefore(This,child,referenceChild) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_IsAttributeSpecified(This,attributeName,value) \
    ( (This)->lpVtbl->IsAttributeSpecified(This,attributeName,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_IsAttributeSpecifiedWithInherhited(This,attributeName,inherited,value) \
    ( (This)->lpVtbl->IsAttributeSpecifiedWithInherhited(This,attributeName,inherited,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_RemoveAttribute(This,attributeName) \
    ( (This)->lpVtbl->RemoveAttribute(This,attributeName) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_RemoveChild(This,child) \
    ( (This)->lpVtbl->RemoveChild(This,child) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_ReplaceChild(This,newChild,oldChild) \
    ( (This)->lpVtbl->ReplaceChild(This,newChild,oldChild) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetStringAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetStringAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetStringAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetStringAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetIdAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetIdAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetIdAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetIdAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetFloatAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetFloatAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetFloatAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetFloatAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetColorAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetColorAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetColorAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetColorAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetFilledRegionDeterminationAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetFilledRegionDeterminationAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetFilledRegionDeterminationAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetFilledRegionDeterminationAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetDisplayAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetDisplayAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetDisplayAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetDisplayAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetOverflowAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetOverflowAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetOverflowAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetOverflowAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetCapStyleAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetCapStyleAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetCapStyleAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetCapStyleAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetLineJoinAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetLineJoinAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetLineJoinAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetLineJoinAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetVisibilityAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetVisibilityAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetVisibilityAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetVisibilityAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetTransformAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetTransformAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetTransformAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetTransformAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetUnitsAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetUnitsAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetUnitsAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetUnitsAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetEdgeBehaviorAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetEdgeBehaviorAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetEdgeBehaviorAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetEdgeBehaviorAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetRectangleAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->SetRectangleAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetRectangleAttribute(This,attributeName,attributeValue) \
    ( (This)->lpVtbl->GetRectangleAttribute(This,attributeName,attributeValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetLengthAttribute(This,attributeName,value,units) \
    ( (This)->lpVtbl->SetLengthAttribute(This,attributeName,value,units) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetLengthAttribute(This,attributeName,units,value) \
    ( (This)->lpVtbl->GetLengthAttribute(This,attributeName,units,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_SetAspectRatioAttribute(This,attributeName,alignment,meetOrSlice) \
    ( (This)->lpVtbl->SetAspectRatioAttribute(This,attributeName,alignment,meetOrSlice) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_GetAspectRatioAttribute(This,attributeName,meetOrSlice,alignment) \
    ( (This)->lpVtbl->GetAspectRatioAttribute(This,attributeName,meetOrSlice,alignment) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgTextElement[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement";
/* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AA86BD6D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElementVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Text )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
        /* [in] */HSTRING value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Text )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement * This,
        /* [retval, out] */HSTRING * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElementVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElementVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_put_Text(This,value) \
    ( (This)->lpVtbl->put_Text(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_get_Text(This,value) \
    ( (This)->lpVtbl->get_Text(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgTextElement[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType
{
    CanvasSvgPaintType_None,
    CanvasSvgPaintType_Color,
    CanvasSvgPaintType_CurrentColor,
    CanvasSvgPaintType_Uri,
    CanvasSvgPaintType_UriThenNone,
    CanvasSvgPaintType_UriThenColor,
    CanvasSvgPaintType_UriThenCurrentColor,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute";
/* [object, exclusiveto, uuid("653786A8-F3AB-4083-991D-9748AA86BD6E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttributeVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propput] */HRESULT ( STDMETHODCALLTYPE *put_PaintType )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PaintType )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Id )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
        /* [in] */HSTRING value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Id )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * This,
        /* [retval, out] */HSTRING * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttributeVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttributeVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_put_PaintType(This,value) \
    ( (This)->lpVtbl->put_PaintType(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_get_PaintType(This,value) \
    ( (This)->lpVtbl->get_PaintType(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_put_Color(This,value) \
    ( (This)->lpVtbl->put_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_get_Color(This,value) \
    ( (This)->lpVtbl->get_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_put_Id(This,value) \
    ( (This)->lpVtbl->put_Id(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_get_Id(This,value) \
    ( (This)->lpVtbl->get_Id(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPaintAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute";
#endif


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand
{
    CanvasSvgPathCommand_ClosePath,
    CanvasSvgPathCommand_MoveAbsolute,
    CanvasSvgPathCommand_MoveRelative,
    CanvasSvgPathCommand_LineAbsolute,
    CanvasSvgPathCommand_LineRelative,
    CanvasSvgPathCommand_CubicAbsolute,
    CanvasSvgPathCommand_CubicRelative,
    CanvasSvgPathCommand_QuadraticAbsolute,
    CanvasSvgPathCommand_QuadraticRelative,
    CanvasSvgPathCommand_ArcAbsolute,
    CanvasSvgPathCommand_ArcRelative,
    CanvasSvgPathCommand_HorizontalAbsolute,
    CanvasSvgPathCommand_HorizontalRelative,
    CanvasSvgPathCommand_VerticalAbsolute,
    CanvasSvgPathCommand_VerticalRelative,
    CanvasSvgPathCommand_CubicSmoothAbsolute,
    CanvasSvgPathCommand_CubicSmoothRelative,
    CanvasSvgPathCommand_QuadraticSmoothAbsolute,
    CanvasSvgPathCommand_QuadraticSmoothRelative,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute";
/* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AB86BD6E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttributeVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreatePathGeometry )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * outputGeometry
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreatePathGeometryWithFill )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination fill,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * * outputGeometry
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Commands )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetCommands )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */INT32 elementCount,
        /* [out] */UINT32 * outputValueCount,
        /* [retval, size_is(, *(outputValueCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand * * outputValueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SegmentData )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetSegmentData )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */INT32 elementCount,
        /* [out] */UINT32 * outputValueCount,
        /* [retval, size_is(, *(outputValueCount)), out] */float * * outputValueElements
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveCommandsAtEnd )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [in] */INT32 commandsCount
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveSegmentDataAtEnd )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [in] */INT32 commandsCount
        );
    HRESULT ( STDMETHODCALLTYPE *SetCommands )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */UINT32 commandCount,
        /* [size_is(commandCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand * commands
        );
    HRESULT ( STDMETHODCALLTYPE *SetSegmentData )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */UINT32 segmentDataCount,
        /* [size_is(segmentDataCount), in] */float * segmentData
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttributeVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttributeVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_CreatePathGeometry(This,outputGeometry) \
    ( (This)->lpVtbl->CreatePathGeometry(This,outputGeometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_CreatePathGeometryWithFill(This,fill,outputGeometry) \
    ( (This)->lpVtbl->CreatePathGeometryWithFill(This,fill,outputGeometry) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_get_Commands(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_Commands(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetCommands(This,startIndex,elementCount,outputValueCount,outputValueElements) \
    ( (This)->lpVtbl->GetCommands(This,startIndex,elementCount,outputValueCount,outputValueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_get_SegmentData(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_SegmentData(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_GetSegmentData(This,startIndex,elementCount,outputValueCount,outputValueElements) \
    ( (This)->lpVtbl->GetSegmentData(This,startIndex,elementCount,outputValueCount,outputValueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_RemoveCommandsAtEnd(This,commandsCount) \
    ( (This)->lpVtbl->RemoveCommandsAtEnd(This,commandsCount) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_RemoveSegmentDataAtEnd(This,commandsCount) \
    ( (This)->lpVtbl->RemoveSegmentDataAtEnd(This,commandsCount) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_SetCommands(This,startIndex,commandCount,commands) \
    ( (This)->lpVtbl->SetCommands(This,startIndex,commandCount,commands) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_SetSegmentData(This,startIndex,segmentDataCount,segmentData) \
    ( (This)->lpVtbl->SetSegmentData(This,startIndex,segmentDataCount,segmentData) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPathAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute";
/* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AA86BD6F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttributeVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Points )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * * valueElements
        );
    HRESULT ( STDMETHODCALLTYPE *GetPoints )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */INT32 elementCount,
        /* [out] */UINT32 * outputValueCount,
        /* [retval, size_is(, *(outputValueCount)), out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * * outputValueElements
        );
    HRESULT ( STDMETHODCALLTYPE *RemovePointsAtEnd )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
        /* [in] */INT32 pointCount
        );
    HRESULT ( STDMETHODCALLTYPE *SetPoints )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */UINT32 pointCount,
        /* [size_is(pointCount), in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * points
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttributeVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttributeVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_get_Points(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_Points(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_GetPoints(This,startIndex,elementCount,outputValueCount,outputValueElements) \
    ( (This)->lpVtbl->GetPoints(This,startIndex,elementCount,outputValueCount,outputValueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_RemovePointsAtEnd(This,pointCount) \
    ( (This)->lpVtbl->RemovePointsAtEnd(This,pointCount) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_SetPoints(This,startIndex,pointCount,points) \
    ( (This)->lpVtbl->SetPoints(This,startIndex,pointCount,points) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgPointsAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute";
/* [object, exclusiveto, uuid("652786A8-F3AB-4083-991D-9748AA86BD70"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttributeVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *GetDashes )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *GetDashesWithUnits )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */INT32 elementCount,
        /* [out] */UINT32 * outputUnitsCount,
        /* [size_is(, *(outputUnitsCount)), out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits * * outputUnitsElements,
        /* [out] */UINT32 * outputValueCount,
        /* [retval, size_is(, *(outputValueCount)), out] */float * * outputValueElements
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveDashesAtEnd )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
        /* [in] */INT32 dashCount
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SetDashes )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */UINT32 dashCount,
        /* [size_is(dashCount), in] */float * dashes
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *SetDashesWithUnit )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */UINT32 dashCount,
        /* [size_is(dashCount), in] */float * dashes,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits units
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *SetDashesWithUnits )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * This,
        /* [in] */INT32 startIndex,
        /* [in] */UINT32 dashValueCount,
        /* [size_is(dashValueCount), in] */float * dashValues,
        /* [in] */UINT32 unitValueCount,
        /* [size_is(unitValueCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits * unitValues
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttributeVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttributeVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetDashes(This,valueCount,valueElements) \
    ( (This)->lpVtbl->GetDashes(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_GetDashesWithUnits(This,startIndex,elementCount,outputUnitsCount,outputUnitsElements,outputValueCount,outputValueElements) \
    ( (This)->lpVtbl->GetDashesWithUnits(This,startIndex,elementCount,outputUnitsCount,outputUnitsElements,outputValueCount,outputValueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_RemoveDashesAtEnd(This,dashCount) \
    ( (This)->lpVtbl->RemoveDashesAtEnd(This,dashCount) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_SetDashes(This,startIndex,dashCount,dashes) \
    ( (This)->lpVtbl->SetDashes(This,startIndex,dashCount,dashes) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_SetDashesWithUnit(This,startIndex,dashCount,dashes,units) \
    ( (This)->lpVtbl->SetDashesWithUnit(This,startIndex,dashCount,dashes,units) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_SetDashesWithUnits(This,startIndex,dashValueCount,dashValues,unitValueCount,unitValues) \
    ( (This)->lpVtbl->SetDashesWithUnits(This,startIndex,dashValueCount,dashValues,unitValueCount,unitValues) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgStrokeDashArrayAttribute[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute";
#endif








/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument";
/* [object, exclusiveto, uuid("A0E34929-3551-44FE-A670-D9B3FD800516"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetXml )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [retval, out] */HSTRING * xmlString
        );
    HRESULT ( STDMETHODCALLTYPE *SaveAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * asyncAction
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Root )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Root )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * * value
        );
    HRESULT ( STDMETHODCALLTYPE *FindElementById )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */HSTRING id,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * * element
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreatePaintAttributeWithDefaults )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * * result
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreatePaintAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType paintType,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */HSTRING id,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute * * result
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreatePathAttributeWithDefaults )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * * result
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreatePathAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */UINT32 segmentDataCount,
        /* [size_is(segmentDataCount), in] */float * segmentData,
        /* [in] */UINT32 commandCount,
        /* [size_is(commandCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand * commands,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute * * result
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreatePointsAttributeWithDefaults )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * * result
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreatePointsAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */UINT32 pointCount,
        /* [size_is(pointCount), in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * points,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute * * result
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateStrokeDashArrayAttributeWithDefaults )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * * result
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateStrokeDashArrayAttribute )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */UINT32 dashValueCount,
        /* [size_is(dashValueCount), in] */float * dashValues,
        /* [in] */UINT32 unitValueCount,
        /* [size_is(unitValueCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits * unitValues,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute * * result
        );
    HRESULT ( STDMETHODCALLTYPE *LoadElementFromXml )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */HSTRING xmlString,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement * * svgElement
        );
    HRESULT ( STDMETHODCALLTYPE *LoadElementAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * This,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement * * svgElement
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_GetXml(This,xmlString) \
    ( (This)->lpVtbl->GetXml(This,xmlString) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_SaveAsync(This,stream,asyncAction) \
    ( (This)->lpVtbl->SaveAsync(This,stream,asyncAction) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_put_Root(This,value) \
    ( (This)->lpVtbl->put_Root(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_get_Root(This,value) \
    ( (This)->lpVtbl->get_Root(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_FindElementById(This,id,element) \
    ( (This)->lpVtbl->FindElementById(This,id,element) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePaintAttributeWithDefaults(This,result) \
    ( (This)->lpVtbl->CreatePaintAttributeWithDefaults(This,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePaintAttribute(This,paintType,color,id,result) \
    ( (This)->lpVtbl->CreatePaintAttribute(This,paintType,color,id,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePathAttributeWithDefaults(This,result) \
    ( (This)->lpVtbl->CreatePathAttributeWithDefaults(This,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePathAttribute(This,segmentDataCount,segmentData,commandCount,commands,result) \
    ( (This)->lpVtbl->CreatePathAttribute(This,segmentDataCount,segmentData,commandCount,commands,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePointsAttributeWithDefaults(This,result) \
    ( (This)->lpVtbl->CreatePointsAttributeWithDefaults(This,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreatePointsAttribute(This,pointCount,points,result) \
    ( (This)->lpVtbl->CreatePointsAttribute(This,pointCount,points,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreateStrokeDashArrayAttributeWithDefaults(This,result) \
    ( (This)->lpVtbl->CreateStrokeDashArrayAttributeWithDefaults(This,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_CreateStrokeDashArrayAttribute(This,dashValueCount,dashValues,unitValueCount,unitValues,result) \
    ( (This)->lpVtbl->CreateStrokeDashArrayAttribute(This,dashValueCount,dashValues,unitValueCount,unitValues,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_LoadElementFromXml(This,xmlString,svgElement) \
    ( (This)->lpVtbl->LoadElementFromXml(This,xmlString,svgElement) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_LoadElementAsync(This,stream,svgElement) \
    ( (This)->lpVtbl->LoadElementAsync(This,stream,svgElement) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics";
/* [object, exclusiveto, uuid("7740E748-CB9A-453F-A678-8B3B3A7254D3"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *LoadFromXml )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */HSTRING xmlString,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * * svgDocument
        );
    HRESULT ( STDMETHODCALLTYPE *LoadAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStream * stream,
        /* [retval, out] */__FIAsyncOperation_1_Microsoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument * * svgDocument
        );
    HRESULT ( STDMETHODCALLTYPE *IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics * This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * device,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_LoadFromXml(This,resourceCreator,xmlString,svgDocument) \
    ( (This)->lpVtbl->LoadFromXml(This,resourceCreator,xmlString,svgDocument) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_LoadAsync(This,resourceCreator,stream,svgDocument) \
    ( (This)->lpVtbl->LoadAsync(This,resourceCreator,stream,svgDocument) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_IsSupported(This,device,value) \
    ( (This)->lpVtbl->IsSupported(This,device,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentFactory[] = L"Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory";
/* [object, exclusiveto, uuid("BAB0F16D-4050-4EF6-8022-8A07E9E74A9D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateEmpty )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * * canvasSvgDocument
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_CreateEmpty(This,resourceCreator,canvasSvgDocument) \
    ( (This)->lpVtbl->CreateEmpty(This,resourceCreator,canvasSvgDocument) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument[] = L"Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasDrawingSession
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasDrawingSession
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.ICanvasDrawingSession";
/* [object, exclusiveto, uuid("F60AFD09-E623-4BE0-B750-578AA920B1DB"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *Clear )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *ClearHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 color
        );
    HRESULT ( STDMETHODCALLTYPE *Flush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtOrigin )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */float x,
        /* [in] */float y
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageToRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destinationRectangle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasImage * image,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap * bitmap,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect destinationRectangle,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect sourceRectangle,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x0,
        /* [in] */float y0,
        /* [in] */float x1,
        /* [in] */float y1,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x0,
        /* [in] */float y0,
        /* [in] */float x1,
        /* [in] */float y1,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x0,
        /* [in] */float y0,
        /* [in] */float x1,
        /* [in] */float y1,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x0,
        /* [in] */float y0,
        /* [in] */float x1,
        /* [in] */float y1,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x0,
        /* [in] */float y0,
        /* [in] */float x1,
        /* [in] */float y1,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point0,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point1,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x0,
        /* [in] */float y0,
        /* [in] */float x1,
        /* [in] */float y1,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillRectangleWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillRectangleWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillRectangleWithBrushAndOpacityBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillRectangleAtCoordsWithBrushAndOpacityBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rect,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillRoundedRectangleAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillEllipseWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillEllipseAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillEllipseWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillEllipseAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radiusX,
        /* [in] */float radiusY,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillCircleWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillCircleAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillCircleWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 centerPoint,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillCircleAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float radius,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithBrushAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectWithBrushAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rectangle,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithBrushAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectCoordsWithBrushAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointWithColorAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectWithColorAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect rectangle,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtPointCoordsWithColorAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextAtRectCoordsWithColorAndFormat )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */HSTRING text,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */float w,
        /* [in] */float h,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat * format
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrushAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColorAndStrokeWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CUI_CColor color,
        /* [in] */float strokeWidth,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle * strokeStyle
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryWithBrushAndOpacityBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithBrushAndOpacityBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithBrushAndOpacityBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *FillGeometryAtOriginWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 offset,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * geometry,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtOriginWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * geometry,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawCachedGeometryAtOriginWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry * geometry,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * textLayout,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutAtCoordsWithBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * textLayout,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * textLayout,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawTextLayoutAtCoordsWithColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout * textLayout,
        /* [in] */float x,
        /* [in] */float y,
        /* [in] */__x_ABI_CWindows_CUI_CColor color
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawInk )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *DrawInkWithHighContrast )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__FIIterable_1_Windows__CUI__CInput__CInking__CInkStroke * inkStrokes,
        /* [in] */boolean highContrast
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGradientMeshAtOrigin )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * gradientMesh
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGradientMesh )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * gradientMesh,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGradientMeshAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh * gradientMesh,
        /* [in] */float x,
        /* [in] */float y
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawSvgAtOrigin )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * svgDocument,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize viewportSize
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawSvgAtPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * svgDocument,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize viewportSize,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawSvgAtCoords )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument * svgDocument,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize viewportSize,
        /* [in] */float x,
        /* [in] */float y
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Antialiasing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Antialiasing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Blend )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Blend )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TextAntialiasing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TextAntialiasing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TextRenderingParameters )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TextRenderingParameters )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Transform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Transform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Units )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Units )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_EffectBufferPrecision )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_EffectBufferPrecision )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__FIReference_1_Microsoft__CGraphics__CCanvas__CCanvasBufferPrecision * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_EffectTileSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_EffectTileSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize value
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float opacity,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrush )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect clipRectangle,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect clipRectangle,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipGeometry )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * clipGeometry,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipGeometry )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * clipGeometry,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityAndClipGeometryAndTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * clipGeometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [default_overload, overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithOpacityBrushAndClipGeometryAndTransform )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * clipGeometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateLayerWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */float opacity,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * opacityBrush,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect clipRectangle,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry * clipGeometry,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions options,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer * * layer
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGlyphRun )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */UINT32 glyphCount,
        /* [size_is(glyphCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphs,
        /* [in] */boolean isSideways,
        /* [in] */UINT32 bidiLevel,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGlyphRunWithMeasuringMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */UINT32 glyphCount,
        /* [size_is(glyphCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphs,
        /* [in] */boolean isSideways,
        /* [in] */UINT32 bidiLevel,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *DrawGlyphRunWithMeasuringModeAndDescription )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 point,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace * fontFace,
        /* [in] */float fontSize,
        /* [in] */UINT32 glyphCount,
        /* [size_is(glyphCount), in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph * glyphs,
        /* [in] */boolean isSideways,
        /* [in] */UINT32 bidiLevel,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush * brush,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode,
        /* [in] */HSTRING localeName,
        /* [in] */HSTRING textString,
        /* [in] */UINT32 clusterMapIndicesCount,
        /* [size_is(clusterMapIndicesCount), in] */int * clusterMapIndices,
        /* [in] */UINT32 textPosition
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatch )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * * spriteBatch
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatchWithSortMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * * spriteBatch
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatchWithSortModeAndInterpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * * spriteBatch
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateSpriteBatchWithSortModeAndInterpolationAndOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions options,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch * * spriteBatch
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Clear(This,color) \
    ( (This)->lpVtbl->Clear(This,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_ClearHdr(This,color) \
    ( (This)->lpVtbl->ClearHdr(This,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_Flush(This) \
    ( (This)->lpVtbl->Flush(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOrigin(This,image) \
    ( (This)->lpVtbl->DrawImageAtOrigin(This,image) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffset(This,image,offset) \
    ( (This)->lpVtbl->DrawImageAtOffset(This,image,offset) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoords(This,image,x,y) \
    ( (This)->lpVtbl->DrawImageAtCoords(This,image,x,y) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRect(This,bitmap,destinationRectangle) \
    ( (This)->lpVtbl->DrawImageToRect(This,bitmap,destinationRectangle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRect(This,image,offset,sourceRectangle) \
    ( (This)->lpVtbl->DrawImageAtOffsetWithSourceRect(This,image,offset,sourceRectangle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRect(This,image,x,y,sourceRectangle) \
    ( (This)->lpVtbl->DrawImageAtCoordsWithSourceRect(This,image,x,y,sourceRectangle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRect(This,image,destinationRectangle,sourceRectangle) \
    ( (This)->lpVtbl->DrawImageToRectWithSourceRect(This,image,destinationRectangle,sourceRectangle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacity(This,image,offset,sourceRectangle,opacity) \
    ( (This)->lpVtbl->DrawImageAtOffsetWithSourceRectAndOpacity(This,image,offset,sourceRectangle,opacity) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacity(This,image,x,y,sourceRectangle,opacity) \
    ( (This)->lpVtbl->DrawImageAtCoordsWithSourceRectAndOpacity(This,image,x,y,sourceRectangle,opacity) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacity(This,image,destinationRectangle,sourceRectangle,opacity) \
    ( (This)->lpVtbl->DrawImageToRectWithSourceRectAndOpacity(This,image,destinationRectangle,sourceRectangle,opacity) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(This,image,offset,sourceRectangle,opacity,interpolation) \
    ( (This)->lpVtbl->DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(This,image,offset,sourceRectangle,opacity,interpolation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(This,image,x,y,sourceRectangle,opacity,interpolation) \
    ( (This)->lpVtbl->DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(This,image,x,y,sourceRectangle,opacity,interpolation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolation(This,image,destinationRectangle,sourceRectangle,opacity,interpolation) \
    ( (This)->lpVtbl->DrawImageToRectWithSourceRectAndOpacityAndInterpolation(This,image,destinationRectangle,sourceRectangle,opacity,interpolation) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,offset,sourceRectangle,opacity,interpolation,composite) \
    ( (This)->lpVtbl->DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,offset,sourceRectangle,opacity,interpolation,composite) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,x,y,sourceRectangle,opacity,interpolation,composite) \
    ( (This)->lpVtbl->DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,x,y,sourceRectangle,opacity,interpolation,composite) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,destinationRectangle,sourceRectangle,opacity,interpolation,composite) \
    ( (This)->lpVtbl->DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(This,image,destinationRectangle,sourceRectangle,opacity,interpolation,composite) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,offset,sourceRectangle,opacity,interpolation,perspective) \
    ( (This)->lpVtbl->DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,offset,sourceRectangle,opacity,interpolation,perspective) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,x,y,sourceRectangle,opacity,interpolation,perspective) \
    ( (This)->lpVtbl->DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,x,y,sourceRectangle,opacity,interpolation,perspective) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,destinationRectangle,sourceRectangle,opacity,interpolation,perspective) \
    ( (This)->lpVtbl->DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(This,bitmap,destinationRectangle,sourceRectangle,opacity,interpolation,perspective) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrush(This,point0,point1,brush) \
    ( (This)->lpVtbl->DrawLineWithBrush(This,point0,point1,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrush(This,x0,y0,x1,y1,brush) \
    ( (This)->lpVtbl->DrawLineAtCoordsWithBrush(This,x0,y0,x1,y1,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColor(This,point0,point1,color) \
    ( (This)->lpVtbl->DrawLineWithColor(This,point0,point1,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColor(This,x0,y0,x1,y1,color) \
    ( (This)->lpVtbl->DrawLineAtCoordsWithColor(This,x0,y0,x1,y1,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrushAndStrokeWidth(This,point0,point1,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawLineWithBrushAndStrokeWidth(This,point0,point1,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrushAndStrokeWidth(This,x0,y0,x1,y1,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawLineAtCoordsWithBrushAndStrokeWidth(This,x0,y0,x1,y1,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColorAndStrokeWidth(This,point0,point1,color,strokeWidth) \
    ( (This)->lpVtbl->DrawLineWithColorAndStrokeWidth(This,point0,point1,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColorAndStrokeWidth(This,x0,y0,x1,y1,color,strokeWidth) \
    ( (This)->lpVtbl->DrawLineAtCoordsWithColorAndStrokeWidth(This,x0,y0,x1,y1,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithBrushAndStrokeWidthAndStrokeStyle(This,point0,point1,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawLineWithBrushAndStrokeWidthAndStrokeStyle(This,point0,point1,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineWithColorAndStrokeWidthAndStrokeStyle(This,point0,point1,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawLineWithColorAndStrokeWidthAndStrokeStyle(This,point0,point1,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x0,y0,x1,y1,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrush(This,rect,brush) \
    ( (This)->lpVtbl->DrawRectangleWithBrush(This,rect,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrush(This,x,y,w,h,brush) \
    ( (This)->lpVtbl->DrawRectangleAtCoordsWithBrush(This,x,y,w,h,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColor(This,rect,color) \
    ( (This)->lpVtbl->DrawRectangleWithColor(This,rect,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColor(This,x,y,w,h,color) \
    ( (This)->lpVtbl->DrawRectangleAtCoordsWithColor(This,x,y,w,h,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrushAndStrokeWidth(This,rect,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawRectangleWithBrushAndStrokeWidth(This,rect,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColorAndStrokeWidth(This,rect,color,strokeWidth) \
    ( (This)->lpVtbl->DrawRectangleWithColorAndStrokeWidth(This,rect,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,color,strokeWidth) \
    ( (This)->lpVtbl->DrawRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithBrush(This,rect,brush) \
    ( (This)->lpVtbl->FillRectangleWithBrush(This,rect,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithBrush(This,x,y,w,h,brush) \
    ( (This)->lpVtbl->FillRectangleAtCoordsWithBrush(This,x,y,w,h,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithColor(This,rect,color) \
    ( (This)->lpVtbl->FillRectangleWithColor(This,rect,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithColor(This,x,y,w,h,color) \
    ( (This)->lpVtbl->FillRectangleAtCoordsWithColor(This,x,y,w,h,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleWithBrushAndOpacityBrush(This,rect,brush,opacityBrush) \
    ( (This)->lpVtbl->FillRectangleWithBrushAndOpacityBrush(This,rect,brush,opacityBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRectangleAtCoordsWithBrushAndOpacityBrush(This,x,y,w,h,brush,opacityBrush) \
    ( (This)->lpVtbl->FillRectangleAtCoordsWithBrushAndOpacityBrush(This,x,y,w,h,brush,opacityBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->DrawRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->DrawRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) \
    ( (This)->lpVtbl->DrawRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) \
    ( (This)->lpVtbl->DrawRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrushAndStrokeWidth(This,rect,radiusX,radiusY,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawRoundedRectangleWithBrushAndStrokeWidth(This,rect,radiusX,radiusY,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColorAndStrokeWidth(This,rect,radiusX,radiusY,color,strokeWidth) \
    ( (This)->lpVtbl->DrawRoundedRectangleWithColorAndStrokeWidth(This,rect,radiusX,radiusY,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,color,strokeWidth) \
    ( (This)->lpVtbl->DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(This,x,y,w,h,radiusX,radiusY,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(This,rect,radiusX,radiusY,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,w,h,radiusX,radiusY,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->FillRoundedRectangleWithBrush(This,rect,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->FillRoundedRectangleAtCoordsWithBrush(This,x,y,w,h,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) \
    ( (This)->lpVtbl->FillRoundedRectangleWithColor(This,rect,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) \
    ( (This)->lpVtbl->FillRoundedRectangleAtCoordsWithColor(This,x,y,w,h,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->DrawEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->DrawEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColor(This,centerPoint,radiusX,radiusY,color) \
    ( (This)->lpVtbl->DrawEllipseWithColor(This,centerPoint,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) \
    ( (This)->lpVtbl->DrawEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrushAndStrokeWidth(This,centerPoint,radiusX,radiusY,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawEllipseWithBrushAndStrokeWidth(This,centerPoint,radiusX,radiusY,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrushAndStrokeWidth(This,x,y,radiusX,radiusY,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawEllipseAtCoordsWithBrushAndStrokeWidth(This,x,y,radiusX,radiusY,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColorAndStrokeWidth(This,centerPoint,radiusX,radiusY,color,strokeWidth) \
    ( (This)->lpVtbl->DrawEllipseWithColorAndStrokeWidth(This,centerPoint,radiusX,radiusY,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColorAndStrokeWidth(This,x,y,radiusX,radiusY,color,strokeWidth) \
    ( (This)->lpVtbl->DrawEllipseAtCoordsWithColorAndStrokeWidth(This,x,y,radiusX,radiusY,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radiusX,radiusY,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radiusX,radiusY,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->FillEllipseWithBrush(This,centerPoint,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) \
    ( (This)->lpVtbl->FillEllipseAtCoordsWithBrush(This,x,y,radiusX,radiusY,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseWithColor(This,centerPoint,radiusX,radiusY,color) \
    ( (This)->lpVtbl->FillEllipseWithColor(This,centerPoint,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) \
    ( (This)->lpVtbl->FillEllipseAtCoordsWithColor(This,x,y,radiusX,radiusY,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrush(This,centerPoint,radius,brush) \
    ( (This)->lpVtbl->DrawCircleWithBrush(This,centerPoint,radius,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrush(This,x,y,radius,brush) \
    ( (This)->lpVtbl->DrawCircleAtCoordsWithBrush(This,x,y,radius,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColor(This,centerPoint,radius,color) \
    ( (This)->lpVtbl->DrawCircleWithColor(This,centerPoint,radius,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColor(This,x,y,radius,color) \
    ( (This)->lpVtbl->DrawCircleAtCoordsWithColor(This,x,y,radius,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrushAndStrokeWidth(This,centerPoint,radius,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawCircleWithBrushAndStrokeWidth(This,centerPoint,radius,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrushAndStrokeWidth(This,x,y,radius,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawCircleAtCoordsWithBrushAndStrokeWidth(This,x,y,radius,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColorAndStrokeWidth(This,centerPoint,radius,color,strokeWidth) \
    ( (This)->lpVtbl->DrawCircleWithColorAndStrokeWidth(This,centerPoint,radius,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColorAndStrokeWidth(This,x,y,radius,color,strokeWidth) \
    ( (This)->lpVtbl->DrawCircleAtCoordsWithColorAndStrokeWidth(This,x,y,radius,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radius,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,x,y,radius,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawCircleWithColorAndStrokeWidthAndStrokeStyle(This,centerPoint,radius,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radius,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,x,y,radius,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleWithBrush(This,centerPoint,radius,brush) \
    ( (This)->lpVtbl->FillCircleWithBrush(This,centerPoint,radius,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleAtCoordsWithBrush(This,x,y,radius,brush) \
    ( (This)->lpVtbl->FillCircleAtCoordsWithBrush(This,x,y,radius,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleWithColor(This,centerPoint,radius,color) \
    ( (This)->lpVtbl->FillCircleWithColor(This,centerPoint,radius,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillCircleAtCoordsWithColor(This,x,y,radius,color) \
    ( (This)->lpVtbl->FillCircleAtCoordsWithColor(This,x,y,radius,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithColor(This,text,point,color) \
    ( (This)->lpVtbl->DrawTextAtPointWithColor(This,text,point,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithColor(This,text,x,y,color) \
    ( (This)->lpVtbl->DrawTextAtPointCoordsWithColor(This,text,x,y,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithBrushAndFormat(This,text,point,brush,format) \
    ( (This)->lpVtbl->DrawTextAtPointWithBrushAndFormat(This,text,point,brush,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectWithBrushAndFormat(This,text,rectangle,brush,format) \
    ( (This)->lpVtbl->DrawTextAtRectWithBrushAndFormat(This,text,rectangle,brush,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithBrushAndFormat(This,text,x,y,brush,format) \
    ( (This)->lpVtbl->DrawTextAtPointCoordsWithBrushAndFormat(This,text,x,y,brush,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectCoordsWithBrushAndFormat(This,text,x,y,w,h,brush,format) \
    ( (This)->lpVtbl->DrawTextAtRectCoordsWithBrushAndFormat(This,text,x,y,w,h,brush,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointWithColorAndFormat(This,text,point,color,format) \
    ( (This)->lpVtbl->DrawTextAtPointWithColorAndFormat(This,text,point,color,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectWithColorAndFormat(This,text,rectangle,color,format) \
    ( (This)->lpVtbl->DrawTextAtRectWithColorAndFormat(This,text,rectangle,color,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtPointCoordsWithColorAndFormat(This,text,x,y,color,format) \
    ( (This)->lpVtbl->DrawTextAtPointCoordsWithColorAndFormat(This,text,x,y,color,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextAtRectCoordsWithColorAndFormat(This,text,x,y,w,h,color,format) \
    ( (This)->lpVtbl->DrawTextAtRectCoordsWithColorAndFormat(This,text,x,y,w,h,color,format) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrush(This,geometry,offset,brush) \
    ( (This)->lpVtbl->DrawGeometryWithBrush(This,geometry,offset,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColor(This,geometry,offset,color) \
    ( (This)->lpVtbl->DrawGeometryWithColor(This,geometry,offset,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrush(This,geometry,x,y,brush) \
    ( (This)->lpVtbl->DrawGeometryAtCoordsWithBrush(This,geometry,x,y,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColor(This,geometry,x,y,color) \
    ( (This)->lpVtbl->DrawGeometryAtCoordsWithColor(This,geometry,x,y,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrush(This,geometry,brush) \
    ( (This)->lpVtbl->DrawGeometryAtOriginWithBrush(This,geometry,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColor(This,geometry,color) \
    ( (This)->lpVtbl->DrawGeometryAtOriginWithColor(This,geometry,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrushAndStrokeWidth(This,geometry,offset,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawGeometryWithBrushAndStrokeWidth(This,geometry,offset,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColorAndStrokeWidth(This,geometry,offset,color,strokeWidth) \
    ( (This)->lpVtbl->DrawGeometryWithColorAndStrokeWidth(This,geometry,offset,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrushAndStrokeWidth(This,geometry,x,y,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawGeometryAtCoordsWithBrushAndStrokeWidth(This,geometry,x,y,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColorAndStrokeWidth(This,geometry,x,y,color,strokeWidth) \
    ( (This)->lpVtbl->DrawGeometryAtCoordsWithColorAndStrokeWidth(This,geometry,x,y,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrushAndStrokeWidth(This,geometry,brush,strokeWidth) \
    ( (This)->lpVtbl->DrawGeometryAtOriginWithBrushAndStrokeWidth(This,geometry,brush,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColorAndStrokeWidth(This,geometry,color,strokeWidth) \
    ( (This)->lpVtbl->DrawGeometryAtOriginWithColorAndStrokeWidth(This,geometry,color,strokeWidth) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,offset,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,offset,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(This,geometry,offset,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(This,geometry,offset,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,x,y,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,x,y,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,geometry,x,y,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(This,geometry,x,y,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,brush,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(This,geometry,brush,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(This,geometry,color,strokeWidth,strokeStyle) \
    ( (This)->lpVtbl->DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(This,geometry,color,strokeWidth,strokeStyle) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithBrush(This,geometry,offset,brush) \
    ( (This)->lpVtbl->FillGeometryWithBrush(This,geometry,offset,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithBrushAndOpacityBrush(This,geometry,offset,brush,opacityBrush) \
    ( (This)->lpVtbl->FillGeometryWithBrushAndOpacityBrush(This,geometry,offset,brush,opacityBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryWithColor(This,geometry,offset,color) \
    ( (This)->lpVtbl->FillGeometryWithColor(This,geometry,offset,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithBrush(This,geometry,x,y,brush) \
    ( (This)->lpVtbl->FillGeometryAtCoordsWithBrush(This,geometry,x,y,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithBrushAndOpacityBrush(This,geometry,x,y,brush,opacityBrush) \
    ( (This)->lpVtbl->FillGeometryAtCoordsWithBrushAndOpacityBrush(This,geometry,x,y,brush,opacityBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtCoordsWithColor(This,geometry,x,y,color) \
    ( (This)->lpVtbl->FillGeometryAtCoordsWithColor(This,geometry,x,y,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithBrush(This,geometry,brush) \
    ( (This)->lpVtbl->FillGeometryAtOriginWithBrush(This,geometry,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithBrushAndOpacityBrush(This,geometry,brush,opacityBrush) \
    ( (This)->lpVtbl->FillGeometryAtOriginWithBrushAndOpacityBrush(This,geometry,brush,opacityBrush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_FillGeometryAtOriginWithColor(This,geometry,color) \
    ( (This)->lpVtbl->FillGeometryAtOriginWithColor(This,geometry,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryWithBrush(This,geometry,offset,brush) \
    ( (This)->lpVtbl->DrawCachedGeometryWithBrush(This,geometry,offset,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryWithColor(This,geometry,offset,color) \
    ( (This)->lpVtbl->DrawCachedGeometryWithColor(This,geometry,offset,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtCoordsWithBrush(This,geometry,x,y,brush) \
    ( (This)->lpVtbl->DrawCachedGeometryAtCoordsWithBrush(This,geometry,x,y,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtCoordsWithColor(This,geometry,x,y,color) \
    ( (This)->lpVtbl->DrawCachedGeometryAtCoordsWithColor(This,geometry,x,y,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtOriginWithBrush(This,geometry,brush) \
    ( (This)->lpVtbl->DrawCachedGeometryAtOriginWithBrush(This,geometry,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawCachedGeometryAtOriginWithColor(This,geometry,color) \
    ( (This)->lpVtbl->DrawCachedGeometryAtOriginWithColor(This,geometry,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutWithBrush(This,textLayout,point,brush) \
    ( (This)->lpVtbl->DrawTextLayoutWithBrush(This,textLayout,point,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutAtCoordsWithBrush(This,textLayout,x,y,brush) \
    ( (This)->lpVtbl->DrawTextLayoutAtCoordsWithBrush(This,textLayout,x,y,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutWithColor(This,textLayout,point,color) \
    ( (This)->lpVtbl->DrawTextLayoutWithColor(This,textLayout,point,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawTextLayoutAtCoordsWithColor(This,textLayout,x,y,color) \
    ( (This)->lpVtbl->DrawTextLayoutAtCoordsWithColor(This,textLayout,x,y,color) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawInk(This,inkStrokes) \
    ( (This)->lpVtbl->DrawInk(This,inkStrokes) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawInkWithHighContrast(This,inkStrokes,highContrast) \
    ( (This)->lpVtbl->DrawInkWithHighContrast(This,inkStrokes,highContrast) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGradientMeshAtOrigin(This,gradientMesh) \
    ( (This)->lpVtbl->DrawGradientMeshAtOrigin(This,gradientMesh) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGradientMesh(This,gradientMesh,point) \
    ( (This)->lpVtbl->DrawGradientMesh(This,gradientMesh,point) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGradientMeshAtCoords(This,gradientMesh,x,y) \
    ( (This)->lpVtbl->DrawGradientMeshAtCoords(This,gradientMesh,x,y) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawSvgAtOrigin(This,svgDocument,viewportSize) \
    ( (This)->lpVtbl->DrawSvgAtOrigin(This,svgDocument,viewportSize) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawSvgAtPoint(This,svgDocument,viewportSize,point) \
    ( (This)->lpVtbl->DrawSvgAtPoint(This,svgDocument,viewportSize,point) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawSvgAtCoords(This,svgDocument,viewportSize,x,y) \
    ( (This)->lpVtbl->DrawSvgAtCoords(This,svgDocument,viewportSize,x,y) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Antialiasing(This,value) \
    ( (This)->lpVtbl->get_Antialiasing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Antialiasing(This,value) \
    ( (This)->lpVtbl->put_Antialiasing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Blend(This,value) \
    ( (This)->lpVtbl->get_Blend(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Blend(This,value) \
    ( (This)->lpVtbl->put_Blend(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_TextAntialiasing(This,value) \
    ( (This)->lpVtbl->get_TextAntialiasing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_TextAntialiasing(This,value) \
    ( (This)->lpVtbl->put_TextAntialiasing(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_TextRenderingParameters(This,value) \
    ( (This)->lpVtbl->get_TextRenderingParameters(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_TextRenderingParameters(This,value) \
    ( (This)->lpVtbl->put_TextRenderingParameters(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Transform(This,value) \
    ( (This)->lpVtbl->get_Transform(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Transform(This,value) \
    ( (This)->lpVtbl->put_Transform(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_Units(This,value) \
    ( (This)->lpVtbl->get_Units(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_Units(This,value) \
    ( (This)->lpVtbl->put_Units(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_EffectBufferPrecision(This,value) \
    ( (This)->lpVtbl->get_EffectBufferPrecision(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_EffectBufferPrecision(This,value) \
    ( (This)->lpVtbl->put_EffectBufferPrecision(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_get_EffectTileSize(This,value) \
    ( (This)->lpVtbl->get_EffectTileSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_put_EffectTileSize(This,value) \
    ( (This)->lpVtbl->put_EffectTileSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacity(This,opacity,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacity(This,opacity,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrush(This,opacityBrush,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacityBrush(This,opacityBrush,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipRectangle(This,opacity,clipRectangle,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacityAndClipRectangle(This,opacity,clipRectangle,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipRectangle(This,opacityBrush,clipRectangle,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacityBrushAndClipRectangle(This,opacityBrush,clipRectangle,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipGeometry(This,opacity,clipGeometry,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacityAndClipGeometry(This,opacity,clipGeometry,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipGeometry(This,opacityBrush,clipGeometry,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacityBrushAndClipGeometry(This,opacityBrush,clipGeometry,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityAndClipGeometryAndTransform(This,opacity,clipGeometry,geometryTransform,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacityAndClipGeometryAndTransform(This,opacity,clipGeometry,geometryTransform,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithOpacityBrushAndClipGeometryAndTransform(This,opacityBrush,clipGeometry,geometryTransform,layer) \
    ( (This)->lpVtbl->CreateLayerWithOpacityBrushAndClipGeometryAndTransform(This,opacityBrush,clipGeometry,geometryTransform,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateLayerWithAllOptions(This,opacity,opacityBrush,clipRectangle,clipGeometry,geometryTransform,options,layer) \
    ( (This)->lpVtbl->CreateLayerWithAllOptions(This,opacity,opacityBrush,clipRectangle,clipGeometry,geometryTransform,options,layer) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush) \
    ( (This)->lpVtbl->DrawGlyphRun(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGlyphRunWithMeasuringMode(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode) \
    ( (This)->lpVtbl->DrawGlyphRunWithMeasuringMode(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_DrawGlyphRunWithMeasuringModeAndDescription(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,textPosition) \
    ( (This)->lpVtbl->DrawGlyphRunWithMeasuringModeAndDescription(This,point,fontFace,fontSize,glyphCount,glyphs,isSideways,bidiLevel,brush,measuringMode,localeName,textString,clusterMapIndicesCount,clusterMapIndices,textPosition) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatch(This,spriteBatch) \
    ( (This)->lpVtbl->CreateSpriteBatch(This,spriteBatch) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatchWithSortMode(This,sortMode,spriteBatch) \
    ( (This)->lpVtbl->CreateSpriteBatchWithSortMode(This,sortMode,spriteBatch) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatchWithSortModeAndInterpolation(This,sortMode,interpolation,spriteBatch) \
    ( (This)->lpVtbl->CreateSpriteBatchWithSortModeAndInterpolation(This,sortMode,interpolation,spriteBatch) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_CreateSpriteBatchWithSortModeAndInterpolationAndOptions(This,sortMode,interpolation,options,spriteBatch) \
    ( (This)->lpVtbl->CreateSpriteBatchWithSortModeAndInterpolationAndOptions(This,sortMode,interpolation,options,spriteBatch) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasDrawingSession
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasDrawingSession ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasDrawingSession_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasDrawingSession[] = L"Microsoft.Graphics.Canvas.CanvasDrawingSession";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory";
/* [object, exclusiveto, uuid("8596BEDD-D7F7-4C6B-B1AD-41949035E084"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateWithSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize size,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * * imageSource
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * * imageSource
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * * imageSource
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndAlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * * imageSource
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithSize(This,resourceCreator,size,imageSource) \
    ( (This)->lpVtbl->CreateWithSize(This,resourceCreator,size,imageSource) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) \
    ( (This)->lpVtbl->CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) \
    ( (This)->lpVtbl->CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) \
    ( (This)->lpVtbl->CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource";
/* [object, exclusiveto, uuid("3C35E87A-E881-4F44-B0D1-551413AEC66D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor clearColor,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateDrawingSessionWithUpdateRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor clearColor,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect updateRectangle,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    HRESULT ( STDMETHODCALLTYPE *Recreate )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_CreateDrawingSession(This,clearColor,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSession(This,clearColor,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_CreateDrawingSessionWithUpdateRectangle(This,clearColor,updateRectangle,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSessionWithUpdateRectangle(This,clearColor,updateRectangle,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_Recreate(This,value) \
    ( (This)->lpVtbl->Recreate(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_Size(This,size) \
    ( (This)->lpVtbl->get_Size(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_SizeInPixels(This,size) \
    ( (This)->lpVtbl->get_SizeInPixels(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.CanvasSwapChainRotation
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation
{
    CanvasSwapChainRotation_None,
    CanvasSwapChainRotation_Rotate90,
    CanvasSwapChainRotation_Rotate180,
    CanvasSwapChainRotation_Rotate270,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation;



/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSwapChainFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainFactory[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainFactory";
/* [object, exclusiveto, uuid("133C25CB-ED3C-492B-BFFE-7509B521842B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateWithSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize size,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * * swapChain
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * * swapChain
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * * swapChain
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [in] */INT32 bufferCount,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * * swapChain
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithSize(This,resourceCreator,size,swapChain) \
    ( (This)->lpVtbl->CreateWithSize(This,resourceCreator,size,swapChain) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,swapChain) \
    ( (This)->lpVtbl->CreateWithWidthAndHeight(This,resourceCreator,width,height,swapChain) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,swapChain) \
    ( (This)->lpVtbl->CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,swapChain) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_CreateWithAllOptions(This,resourceCreator,width,height,dpi,format,bufferCount,alphaMode,swapChain) \
    ( (This)->lpVtbl->CreateWithAllOptions(This,resourceCreator,width,height,dpi,format,bufferCount,alphaMode,swapChain) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSwapChainStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChainStatics[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChainStatics";
/* [object, exclusiveto, uuid("05376D8F-3E8D-4A82-9838-691680D32A52"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateForCoreWindowWithDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CUI_CCore_CICoreWindow * coreWindow,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * * swapChain
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateForCoreWindowWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */__x_ABI_CWindows_CUI_CCore_CICoreWindow * coreWindow,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [in] */INT32 bufferCount,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * * swapChain
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_CreateForCoreWindowWithDpi(This,resourceCreator,coreWindow,dpi,swapChain) \
    ( (This)->lpVtbl->CreateForCoreWindowWithDpi(This,resourceCreator,coreWindow,dpi,swapChain) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_CreateForCoreWindowWithAllOptions(This,resourceCreator,coreWindow,width,height,dpi,format,bufferCount,swapChain) \
    ( (This)->lpVtbl->CreateForCoreWindowWithAllOptions(This,resourceCreator,coreWindow,width,height,dpi,format,bufferCount,swapChain) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainStatics_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasSwapChain
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasSwapChain[] = L"Microsoft.Graphics.Canvas.ICanvasSwapChain";
/* [object, exclusiveto, uuid("882E3C3A-5725-409C-9E76-F80B3BACF1B4"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [overload] */HRESULT ( STDMETHODCALLTYPE *Present )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *PresentWithSyncInterval )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */INT32 syncInterval
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize newSize
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithWidthAndHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */float newWidth,
        /* [in] */float newHeight
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithWidthAndHeightAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */float newWidth,
        /* [in] */float newHeight,
        /* [in] */float newDpi
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ResizeBuffersWithAllOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */float newWidth,
        /* [in] */float newHeight,
        /* [in] */float newDpi,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat newFormat,
        /* [in] */INT32 bufferCount
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Format )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BufferCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */INT32 * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Rotation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Rotation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value
        );
    HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor clearColor,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    HRESULT ( STDMETHODCALLTYPE *WaitForVerticalBlank )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * This
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChainVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_Present(This) \
    ( (This)->lpVtbl->Present(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_PresentWithSyncInterval(This,syncInterval) \
    ( (This)->lpVtbl->PresentWithSyncInterval(This,syncInterval) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithSize(This,newSize) \
    ( (This)->lpVtbl->ResizeBuffersWithSize(This,newSize) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithWidthAndHeight(This,newWidth,newHeight) \
    ( (This)->lpVtbl->ResizeBuffersWithWidthAndHeight(This,newWidth,newHeight) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithWidthAndHeightAndDpi(This,newWidth,newHeight,newDpi) \
    ( (This)->lpVtbl->ResizeBuffersWithWidthAndHeightAndDpi(This,newWidth,newHeight,newDpi) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_ResizeBuffersWithAllOptions(This,newWidth,newHeight,newDpi,newFormat,bufferCount) \
    ( (This)->lpVtbl->ResizeBuffersWithAllOptions(This,newWidth,newHeight,newDpi,newFormat,bufferCount) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Size(This,size) \
    ( (This)->lpVtbl->get_Size(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_SizeInPixels(This,size) \
    ( (This)->lpVtbl->get_SizeInPixels(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Format(This,value) \
    ( (This)->lpVtbl->get_Format(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_BufferCount(This,value) \
    ( (This)->lpVtbl->get_BufferCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_Rotation(This,value) \
    ( (This)->lpVtbl->get_Rotation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_Rotation(This,value) \
    ( (This)->lpVtbl->put_Rotation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_SourceSize(This,value) \
    ( (This)->lpVtbl->get_SourceSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_SourceSize(This,value) \
    ( (This)->lpVtbl->put_SourceSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_get_TransformMatrix(This,value) \
    ( (This)->lpVtbl->get_TransformMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_put_TransformMatrix(This,value) \
    ( (This)->lpVtbl->put_TransformMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_CreateDrawingSession(This,clearColor,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSession(This,clearColor,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_WaitForVerticalBlank(This) \
    ( (This)->lpVtbl->WaitForVerticalBlank(This) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasSwapChain
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasSwapChain ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasSwapChain_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasSwapChain[] = L"Microsoft.Graphics.Canvas.CanvasSwapChain";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasCommandListFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasCommandList
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandListFactory[] = L"Microsoft.Graphics.Canvas.ICanvasCommandListFactory";
/* [object, exclusiveto, uuid("B3D44E68-D931-4B5B-B957-0888980A7D50"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * * commandList
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_Create(This,resourceCreator,commandList) \
    ( (This)->lpVtbl->Create(This,resourceCreator,commandList) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.ICanvasCommandList
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.CanvasCommandList
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasImage
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_ICanvasCommandList[] = L"Microsoft.Graphics.Canvas.ICanvasCommandList";
/* [object, exclusiveto, uuid("B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandListVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_CreateDrawingSession(This,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSession(This,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.CanvasCommandList
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.ICanvasCommandList ** Default Interface **
 *    Windows.Foundation.IClosable
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_CanvasCommandList_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_CanvasCommandList[] = L"Microsoft.Graphics.Canvas.CanvasCommandList";
#endif








/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory";
/* [object, exclusiveto, uuid("A201AF1E-CE4A-401D-A719-2BF004D5C26A"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateWithDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * device,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_CreateWithDevice(This,device,value) \
    ( (This)->lpVtbl->CreateWithDevice(This,device,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreator
 *     Windows.Graphics.Printing.IPrintDocumentSource
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument";
/* [object, exclusiveto, uuid("0A99CDEE-BF11-49D0-AA34-3BA5C32C51A5"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_PrintTaskOptionsChanged )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintTaskOptionsChangedEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_PrintTaskOptionsChanged )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */EventRegistrationToken token
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_Preview )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPreviewEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_Preview )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */EventRegistrationToken token
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_Print )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintDocument_Microsoft__CGraphics__CCanvas__CPrinting__CCanvasPrintEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_Print )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */EventRegistrationToken token
        );
    HRESULT ( STDMETHODCALLTYPE *InvalidatePreview )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This
        );
    HRESULT ( STDMETHODCALLTYPE *SetPageCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */UINT32 count
        );
    HRESULT ( STDMETHODCALLTYPE *SetIntermediatePageCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument * This,
        /* [in] */UINT32 count
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocumentVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_add_PrintTaskOptionsChanged(This,value,token) \
    ( (This)->lpVtbl->add_PrintTaskOptionsChanged(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_remove_PrintTaskOptionsChanged(This,token) \
    ( (This)->lpVtbl->remove_PrintTaskOptionsChanged(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_add_Preview(This,value,token) \
    ( (This)->lpVtbl->add_Preview(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_remove_Preview(This,token) \
    ( (This)->lpVtbl->remove_Preview(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_add_Print(This,value,token) \
    ( (This)->lpVtbl->add_Print(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_remove_Print(This,token) \
    ( (This)->lpVtbl->remove_Print(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_InvalidatePreview(This) \
    ( (This)->lpVtbl->InvalidatePreview(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_SetPageCount(This,count) \
    ( (This)->lpVtbl->SetPageCount(This,count) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_SetIntermediatePageCount(This,count) \
    ( (This)->lpVtbl->SetIntermediatePageCount(This,count) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDocument_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs";
/* [object, exclusiveto, uuid("F92089BA-6C99-4CAC-B28A-B5DCEC7A310D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CurrentPreviewPageNumber )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
        /* [retval, out] */UINT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_NewPreviewPageNumber )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
        /* [in] */UINT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_NewPreviewPageNumber )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
        /* [retval, out] */UINT32 * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetDeferral )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PrintTaskOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_get_CurrentPreviewPageNumber(This,value) \
    ( (This)->lpVtbl->get_CurrentPreviewPageNumber(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_put_NewPreviewPageNumber(This,value) \
    ( (This)->lpVtbl->put_NewPreviewPageNumber(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_get_NewPreviewPageNumber(This,value) \
    ( (This)->lpVtbl->get_NewPreviewPageNumber(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_GetDeferral(This,value) \
    ( (This)->lpVtbl->GetDeferral(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_get_PrintTaskOptions(This,value) \
    ( (This)->lpVtbl->get_PrintTaskOptions(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintTaskOptionsChangedEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs";
/* [object, exclusiveto, uuid("0A6A80A0-B07D-4DB2-BDEB-0368BB18C0F8"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PageNumber )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
        /* [retval, out] */UINT32 * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PrintTaskOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore * * value
        );
    HRESULT ( STDMETHODCALLTYPE *GetDeferral )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_get_PageNumber(This,value) \
    ( (This)->lpVtbl->get_PageNumber(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_get_PrintTaskOptions(This,value) \
    ( (This)->lpVtbl->get_PrintTaskOptions(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_GetDeferral(This,value) \
    ( (This)->lpVtbl->GetDeferral(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_get_DrawingSession(This,value) \
    ( (This)->lpVtbl->get_DrawingSession(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPreviewEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs";
/* [object, exclusiveto, uuid("0C6148C4-0216-4561-A817-34C8942AAC8B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PrintTaskOptions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Dpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Dpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
        /* [in] */float value
        );
    HRESULT ( STDMETHODCALLTYPE *GetDeferral )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * * value
        );
    HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_get_PrintTaskOptions(This,value) \
    ( (This)->lpVtbl->get_PrintTaskOptions(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_get_Dpi(This,value) \
    ( (This)->lpVtbl->get_Dpi(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_put_Dpi(This,value) \
    ( (This)->lpVtbl->put_Dpi(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_GetDeferral(This,value) \
    ( (This)->lpVtbl->GetDeferral(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_CreateDrawingSession(This,value) \
    ( (This)->lpVtbl->CreateDrawingSession(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Printing_ICanvasPrintDeferral[] = L"Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral";
/* [object, exclusiveto, uuid("08CA99A2-5801-4EA4-8687-896CBDA69A47"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferralVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Complete )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral * This
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferralVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferralVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_Complete(This) \
    ( (This)->lpVtbl->Complete(This) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CPrinting_CICanvasPrintDeferral_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Printing_CanvasPrintDeferral[] = L"Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.UI.CanvasTimingInformation
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation
{
    INT64 UpdateCount;
    __x_ABI_CWindows_CFoundation_CTimeSpan TotalTime;
    __x_ABI_CWindows_CFoundation_CTimeSpan ElapsedTime;
    boolean IsRunningSlowly;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation;





/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory";
/* [object, exclusiveto, uuid("766F4867-B22A-464B-89B1-0DA6AB62BE68"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation timingInformation,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * * updateEventArgs
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_Create(This,timingInformation,updateEventArgs) \
    ( (This)->lpVtbl->Create(This,timingInformation,updateEventArgs) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs";
/* [object, exclusiveto, uuid("A96B2B2A-0C6E-4AA8-925B-7137263B4E44"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Timing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_get_Timing(This,value) \
    ( (This)->lpVtbl->get_Timing(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory";
/* [object, exclusiveto, uuid("C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * canvasDrawingSession,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation timingInformation,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * * animatedControlDrawEventArgs
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_Create(This,canvasDrawingSession,timingInformation,animatedControlDrawEventArgs) \
    ( (This)->lpVtbl->Create(This,canvasDrawingSession,timingInformation,animatedControlDrawEventArgs) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs";
/* [object, exclusiveto, uuid("BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Timing )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_get_DrawingSession(This,value) \
    ( (This)->lpVtbl->get_DrawingSession(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_get_Timing(This,value) \
    ( (This)->lpVtbl->get_Timing(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs";
#endif



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl";
/* [object, uuid("9BD47D0D-D57D-43B7-82CB-489CC566E887"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_CreateResources )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_Update )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_Update )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_Draw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_Draw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_GameLoopStarting )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_GameLoopStarting )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_GameLoopStopped )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_GameLoopStopped )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_IsFixedTimeStep )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsFixedTimeStep )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TargetElapsedTime )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CTimeSpan value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TargetElapsedTime )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CTimeSpan * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Paused )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Paused )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClearColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClearColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * value
        );
    HRESULT ( STDMETHODCALLTYPE *Invalidate )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This
        );
    HRESULT ( STDMETHODCALLTYPE *ResetElapsedTime )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This
        );
    HRESULT ( STDMETHODCALLTYPE *CreateCoreIndependentInputSource )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__x_ABI_CWindows_CUI_CCore_CCoreInputDeviceTypes deviceTypes,
        /* [retval, out] */__x_ABI_CWindows_CUI_CCore_CICoreInputSourceBase * * returnValue
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HasGameLoopThreadAccess )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */boolean * value
        );
    HRESULT ( STDMETHODCALLTYPE *RunOnGameLoopThreadAsync )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__x_ABI_CWindows_CUI_CCore_CIDispatchedHandler  * agileCallback,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * asyncAction
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DpiScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DpiScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl * This,
        /* [in] */float ratio
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_CreateResources(This,value,token) \
    ( (This)->lpVtbl->add_CreateResources(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_CreateResources(This,token) \
    ( (This)->lpVtbl->remove_CreateResources(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_Update(This,value,token) \
    ( (This)->lpVtbl->add_Update(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_Update(This,token) \
    ( (This)->lpVtbl->remove_Update(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_Draw(This,value,token) \
    ( (This)->lpVtbl->add_Draw(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_Draw(This,token) \
    ( (This)->lpVtbl->remove_Draw(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_GameLoopStarting(This,value,token) \
    ( (This)->lpVtbl->add_GameLoopStarting(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_GameLoopStarting(This,token) \
    ( (This)->lpVtbl->remove_GameLoopStarting(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_add_GameLoopStopped(This,value,token) \
    ( (This)->lpVtbl->add_GameLoopStopped(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_remove_GameLoopStopped(This,token) \
    ( (This)->lpVtbl->remove_GameLoopStopped(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ReadyToDraw(This,value) \
    ( (This)->lpVtbl->get_ReadyToDraw(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_IsFixedTimeStep(This,value) \
    ( (This)->lpVtbl->put_IsFixedTimeStep(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_IsFixedTimeStep(This,value) \
    ( (This)->lpVtbl->get_IsFixedTimeStep(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_TargetElapsedTime(This,value) \
    ( (This)->lpVtbl->put_TargetElapsedTime(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_TargetElapsedTime(This,value) \
    ( (This)->lpVtbl->get_TargetElapsedTime(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_Paused(This,value) \
    ( (This)->lpVtbl->put_Paused(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_Paused(This,value) \
    ( (This)->lpVtbl->get_Paused(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_ClearColor(This,value) \
    ( (This)->lpVtbl->put_ClearColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ClearColor(This,value) \
    ( (This)->lpVtbl->get_ClearColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_Size(This,value) \
    ( (This)->lpVtbl->get_Size(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_Invalidate(This) \
    ( (This)->lpVtbl->Invalidate(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_ResetElapsedTime(This) \
    ( (This)->lpVtbl->ResetElapsedTime(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_CreateCoreIndependentInputSource(This,deviceTypes,returnValue) \
    ( (This)->lpVtbl->CreateCoreIndependentInputSource(This,deviceTypes,returnValue) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_RemoveFromVisualTree(This) \
    ( (This)->lpVtbl->RemoveFromVisualTree(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_HasGameLoopThreadAccess(This,value) \
    ( (This)->lpVtbl->get_HasGameLoopThreadAccess(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_RunOnGameLoopThreadAsync(This,agileCallback,asyncAction) \
    ( (This)->lpVtbl->RunOnGameLoopThreadAsync(This,agileCallback,asyncAction) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_UseSharedDevice(This,value) \
    ( (This)->lpVtbl->get_UseSharedDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_UseSharedDevice(This,value) \
    ( (This)->lpVtbl->put_UseSharedDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_ForceSoftwareRenderer(This,value) \
    ( (This)->lpVtbl->get_ForceSoftwareRenderer(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_ForceSoftwareRenderer(This,value) \
    ( (This)->lpVtbl->put_ForceSoftwareRenderer(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_CustomDevice(This,value) \
    ( (This)->lpVtbl->get_CustomDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_CustomDevice(This,value) \
    ( (This)->lpVtbl->put_CustomDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_get_DpiScale(This,value) \
    ( (This)->lpVtbl->get_DpiScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_put_DpiScale(This,ratio) \
    ( (This)->lpVtbl->put_DpiScale(This,ratio) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason
{
    CanvasCreateResourcesReason_FirstTime,
    CanvasCreateResourcesReason_NewDevice,
    CanvasCreateResourcesReason_DpiChanged,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason;



/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory";
/* [object, exclusiveto, uuid("3A21C766-0781-4389-BBC3-86B1F5022AF1"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason createResourcesReason,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * * CreateResourcesEventArgs
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_Create(This,createResourcesReason,CreateResourcesEventArgs) \
    ( (This)->lpVtbl->Create(This,createResourcesReason,CreateResourcesEventArgs) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs";
/* [object, exclusiveto, uuid("EDC52108-F6BA-4A09-9FA3-10C97A24E49A"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Reason )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason * value
        );
    HRESULT ( STDMETHODCALLTYPE *TrackAsyncAction )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CIAsyncAction * action
        );
    HRESULT ( STDMETHODCALLTYPE *GetTrackedAction )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CIAsyncAction * * action
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_get_Reason(This,value) \
    ( (This)->lpVtbl->get_Reason(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_TrackAsyncAction(This,action) \
    ( (This)->lpVtbl->TrackAsyncAction(This,action) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_GetTrackedAction(This,action) \
    ( (This)->lpVtbl->GetTrackedAction(This,action) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs[] = L"Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs";
#endif





/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory";
/* [object, exclusiveto, uuid("7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * canvasDrawingSession,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * * drawEventArgs
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_Create(This,canvasDrawingSession,drawEventArgs) \
    ( (This)->lpVtbl->Create(This,canvasDrawingSession,drawEventArgs) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs";
/* [object, exclusiveto, uuid("FB86169F-25D4-4551-BD8F-214BEAF0AC24"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_get_DrawingSession(This,value) \
    ( (This)->lpVtbl->get_DrawingSession(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl";
/* [object, exclusiveto, uuid("F006E06D-79DB-484F-B898-479CF069C0F5"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_CreateResources )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [retval, out] */boolean * value
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_Draw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_Draw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClearColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClearColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    HRESULT ( STDMETHODCALLTYPE *Invalidate )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * size
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DpiScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DpiScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl * This,
        /* [in] */float ratio
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_add_CreateResources(This,value,token) \
    ( (This)->lpVtbl->add_CreateResources(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_remove_CreateResources(This,token) \
    ( (This)->lpVtbl->remove_CreateResources(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ReadyToDraw(This,value) \
    ( (This)->lpVtbl->get_ReadyToDraw(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_add_Draw(This,value,token) \
    ( (This)->lpVtbl->add_Draw(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_remove_Draw(This,token) \
    ( (This)->lpVtbl->remove_Draw(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_ClearColor(This,value) \
    ( (This)->lpVtbl->put_ClearColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ClearColor(This,value) \
    ( (This)->lpVtbl->get_ClearColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_Invalidate(This) \
    ( (This)->lpVtbl->Invalidate(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_Size(This,size) \
    ( (This)->lpVtbl->get_Size(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_RemoveFromVisualTree(This) \
    ( (This)->lpVtbl->RemoveFromVisualTree(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_UseSharedDevice(This,value) \
    ( (This)->lpVtbl->get_UseSharedDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_UseSharedDevice(This,value) \
    ( (This)->lpVtbl->put_UseSharedDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_ForceSoftwareRenderer(This,value) \
    ( (This)->lpVtbl->get_ForceSoftwareRenderer(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_ForceSoftwareRenderer(This,value) \
    ( (This)->lpVtbl->put_ForceSoftwareRenderer(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_CustomDevice(This,value) \
    ( (This)->lpVtbl->get_CustomDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_CustomDevice(This,value) \
    ( (This)->lpVtbl->put_CustomDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_get_DpiScale(This,value) \
    ( (This)->lpVtbl->get_DpiScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_put_DpiScale(This,ratio) \
    ( (This)->lpVtbl->put_DpiScale(This,ratio) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel";
/* [object, exclusiveto, uuid("DBDCCB96-147E-4A82-AF3A-C91C7800DAA7"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SwapChain )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SwapChain )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * * value
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel * This
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanelVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_put_SwapChain(This,value) \
    ( (This)->lpVtbl->put_SwapChain(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_get_SwapChain(This,value) \
    ( (This)->lpVtbl->get_SwapChain(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_RemoveFromVisualTree(This) \
    ( (This)->lpVtbl->RemoveFromVisualTree(This) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel";
#endif





/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory";
/* [object, exclusiveto, uuid("2FE755A1-307A-4623-9250-29590485BDB6"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateWithSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize size,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * * imageSource
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * * imageSource
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * * imageSource
        );
    HRESULT ( STDMETHODCALLTYPE *CreateWithWidthAndHeightAndDpiAndAlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alphaMode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * * imageSource
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithSize(This,resourceCreator,size,imageSource) \
    ( (This)->lpVtbl->CreateWithSize(This,resourceCreator,size,imageSource) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) \
    ( (This)->lpVtbl->CreateWithWidthAndHeight(This,resourceCreator,width,height,imageSource) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) \
    ( (This)->lpVtbl->CreateWithWidthAndHeightAndDpi(This,resourceCreator,width,height,dpi,imageSource) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) \
    ( (This)->lpVtbl->CreateWithWidthAndHeightAndDpiAndAlphaMode(This,resourceCreator,width,height,dpi,alphaMode,imageSource) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource";
/* [object, exclusiveto, uuid("DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource * * value
        );
    HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor clearColor,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect updateRectangle,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    HRESULT ( STDMETHODCALLTYPE *SuspendDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * drawingSession
        );
    HRESULT ( STDMETHODCALLTYPE *ResumeDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * drawingSession
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *Invalidate )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *InvalidateRegion )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect region
        );
    HRESULT ( STDMETHODCALLTYPE *RaiseRegionsInvalidatedIfAny )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_RegionsInvalidated )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_RegionsInvalidated )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */EventRegistrationToken token
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ResizeWithSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize size
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ResizeWithWidthAndHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */float width,
        /* [in] */float height
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *ResizeWithWidthAndHeightAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */float width,
        /* [in] */float height,
        /* [in] */float dpi
        );
    HRESULT ( STDMETHODCALLTYPE *Recreate )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SizeInPixels )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CBitmapSize * size
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Source(This,value) \
    ( (This)->lpVtbl->get_Source(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_CreateDrawingSession(This,clearColor,updateRectangle,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSession(This,clearColor,updateRectangle,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_SuspendDrawingSession(This,drawingSession) \
    ( (This)->lpVtbl->SuspendDrawingSession(This,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResumeDrawingSession(This,drawingSession) \
    ( (This)->lpVtbl->ResumeDrawingSession(This,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Invalidate(This) \
    ( (This)->lpVtbl->Invalidate(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_InvalidateRegion(This,region) \
    ( (This)->lpVtbl->InvalidateRegion(This,region) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_RaiseRegionsInvalidatedIfAny(This) \
    ( (This)->lpVtbl->RaiseRegionsInvalidatedIfAny(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_add_RegionsInvalidated(This,value,token) \
    ( (This)->lpVtbl->add_RegionsInvalidated(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_remove_RegionsInvalidated(This,token) \
    ( (This)->lpVtbl->remove_RegionsInvalidated(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithSize(This,size) \
    ( (This)->lpVtbl->ResizeWithSize(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithWidthAndHeight(This,width,height) \
    ( (This)->lpVtbl->ResizeWithWidthAndHeight(This,width,height) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_ResizeWithWidthAndHeightAndDpi(This,width,height,dpi) \
    ( (This)->lpVtbl->ResizeWithWidthAndHeightAndDpi(This,width,height,dpi) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_Recreate(This,resourceCreator) \
    ( (This)->lpVtbl->Recreate(This,resourceCreator) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_Size(This,size) \
    ( (This)->lpVtbl->get_Size(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_SizeInPixels(This,size) \
    ( (This)->lpVtbl->get_SizeInPixels(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource";
#endif


/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs";
/* [object, uuid("3A21A204-F52F-4E7A-9B3F-94669819D981"), exclusiveto, version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InvalidatedRegions )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
        /* [out] */UINT32 * count,
        /* [retval, size_is(, *(count)), out] */__x_ABI_CWindows_CFoundation_CRect * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_VisibleRegion )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_get_InvalidatedRegions(This,count,value) \
    ( (This)->lpVtbl->get_InvalidatedRegions(This,count,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_get_VisibleRegion(This,value) \
    ( (This)->lpVtbl->get_VisibleRegion(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl";
/* [object, exclusiveto, uuid("3C2B5177-7C61-41D2-95AE-FCFC92FD617A"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_CreateResources )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_CreateResources )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ReadyToDraw )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [retval, out] */boolean * value
        );
    /* [eventadd] */HRESULT ( STDMETHODCALLTYPE *add_RegionsInvalidated )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__FITypedEventHandler_2_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl_Microsoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs * value,
        /* [retval, out] */EventRegistrationToken * token
        );
    /* [eventremove] */HRESULT ( STDMETHODCALLTYPE *remove_RegionsInvalidated )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */EventRegistrationToken token
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClearColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClearColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect updateRectangle,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    HRESULT ( STDMETHODCALLTYPE *SuspendDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * drawingSession
        );
    HRESULT ( STDMETHODCALLTYPE *ResumeDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * drawingSession
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *Invalidate )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *InvalidateRegion )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect region
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CSize * size
        );
    HRESULT ( STDMETHODCALLTYPE *RemoveFromVisualTree )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_UseSharedDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_UseSharedDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ForceSoftwareRenderer )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CustomDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CustomDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DpiScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DpiScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl * This,
        /* [in] */float ratio
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControlVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_add_CreateResources(This,value,token) \
    ( (This)->lpVtbl->add_CreateResources(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_remove_CreateResources(This,token) \
    ( (This)->lpVtbl->remove_CreateResources(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ReadyToDraw(This,value) \
    ( (This)->lpVtbl->get_ReadyToDraw(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_add_RegionsInvalidated(This,value,token) \
    ( (This)->lpVtbl->add_RegionsInvalidated(This,value,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_remove_RegionsInvalidated(This,token) \
    ( (This)->lpVtbl->remove_RegionsInvalidated(This,token) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_ClearColor(This,value) \
    ( (This)->lpVtbl->put_ClearColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ClearColor(This,value) \
    ( (This)->lpVtbl->get_ClearColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_CreateDrawingSession(This,updateRectangle,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSession(This,updateRectangle,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_SuspendDrawingSession(This,drawingSession) \
    ( (This)->lpVtbl->SuspendDrawingSession(This,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_ResumeDrawingSession(This,drawingSession) \
    ( (This)->lpVtbl->ResumeDrawingSession(This,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_Invalidate(This) \
    ( (This)->lpVtbl->Invalidate(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_InvalidateRegion(This,region) \
    ( (This)->lpVtbl->InvalidateRegion(This,region) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_Size(This,size) \
    ( (This)->lpVtbl->get_Size(This,size) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_RemoveFromVisualTree(This) \
    ( (This)->lpVtbl->RemoveFromVisualTree(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_UseSharedDevice(This,value) \
    ( (This)->lpVtbl->get_UseSharedDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_UseSharedDevice(This,value) \
    ( (This)->lpVtbl->put_UseSharedDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_ForceSoftwareRenderer(This,value) \
    ( (This)->lpVtbl->get_ForceSoftwareRenderer(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_ForceSoftwareRenderer(This,value) \
    ( (This)->lpVtbl->put_ForceSoftwareRenderer(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_CustomDevice(This,value) \
    ( (This)->lpVtbl->get_CustomDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_CustomDevice(This,value) \
    ( (This)->lpVtbl->put_CustomDevice(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_get_DpiScale(This,value) \
    ( (This)->lpVtbl->get_DpiScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_put_DpiScale(This,ratio) \
    ( (This)->lpVtbl->put_DpiScale(This,ratio) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl[] = L"Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics[] = L"Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics";
/* [object, exclusiveto, uuid("162DEB43-1CF5-46F8-A0AF-356B23158F92"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateCompositionGraphicsDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositor * compositor,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * canvasDevice,
        /* [retval, out] */__x_ABI_CWindows_CUI_CComposition_CICompositionGraphicsDevice * * graphicsDevice
        );
    HRESULT ( STDMETHODCALLTYPE *CreateCompositionSurfaceForSwapChain )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositor * compositor,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain * swapChain,
        /* [retval, out] */__x_ABI_CWindows_CUI_CComposition_CICompositionSurface * * compositionSurface
        );
    HRESULT ( STDMETHODCALLTYPE *GetCanvasDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositionGraphicsDevice * graphicsDevice,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * canvasDevice
        );
    HRESULT ( STDMETHODCALLTYPE *SetCanvasDevice )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositionGraphicsDevice * graphicsDevice,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * canvasDevice
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateDrawingSession )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface * drawingSurface,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateDrawingSessionWithUpdateRect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface * drawingSurface,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect updateRect,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    /* [overload] */HRESULT ( STDMETHODCALLTYPE *CreateDrawingSessionWithUpdateRectAndDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface * drawingSurface,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect updateRectInPixels,
        /* [in] */float dpi,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession * * drawingSession
        );
    HRESULT ( STDMETHODCALLTYPE *Resize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics * This,
        /* [in] */__x_ABI_CWindows_CUI_CComposition_CICompositionDrawingSurface * drawingSurface,
        /* [in] */__x_ABI_CWindows_CFoundation_CSize sizeInPixels
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateCompositionGraphicsDevice(This,compositor,canvasDevice,graphicsDevice) \
    ( (This)->lpVtbl->CreateCompositionGraphicsDevice(This,compositor,canvasDevice,graphicsDevice) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateCompositionSurfaceForSwapChain(This,compositor,swapChain,compositionSurface) \
    ( (This)->lpVtbl->CreateCompositionSurfaceForSwapChain(This,compositor,swapChain,compositionSurface) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_GetCanvasDevice(This,graphicsDevice,canvasDevice) \
    ( (This)->lpVtbl->GetCanvasDevice(This,graphicsDevice,canvasDevice) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_SetCanvasDevice(This,graphicsDevice,canvasDevice) \
    ( (This)->lpVtbl->SetCanvasDevice(This,graphicsDevice,canvasDevice) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateDrawingSession(This,drawingSurface,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSession(This,drawingSurface,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateDrawingSessionWithUpdateRect(This,drawingSurface,updateRect,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSessionWithUpdateRect(This,drawingSurface,updateRect,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_CreateDrawingSessionWithUpdateRectAndDpi(This,drawingSurface,updateRectInPixels,dpi,drawingSession) \
    ( (This)->lpVtbl->CreateDrawingSessionWithUpdateRectAndDpi(This,drawingSurface,updateRectInPixels,dpi,drawingSession) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_Resize(This,drawingSurface,sizeInPixels) \
    ( (This)->lpVtbl->Resize(This,drawingSurface,sizeInPixels) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CComposition_CICanvasCompositionStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition
 *
 * RuntimeClass contains static methods.
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */
#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_UI_Composition_CanvasComposition[] = L"Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition";
#endif




/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping
{
    SamplerCoordinateMapping_Unknown,
    SamplerCoordinateMapping_OneToOne,
    SamplerCoordinateMapping_Offset,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PixelShaderEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect";
/* [object, exclusiveto, uuid("FC8C3C31-FA96-45E2-8B72-1741C65CEE8E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Properties )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__FIMap_2_HSTRING_IInspectable * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source1 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source2 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source3 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source4 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source5 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source6 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source7 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source8 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source1 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source2 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source3 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source4 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source5 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source6 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source7 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source8 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source1Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source2Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source3Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source4Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source5Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source6Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source7Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source8Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source1Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source2Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source3Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source4Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source5Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source6Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source7Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source8Mapping )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source1BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source2BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source3BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source4BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source5BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source6BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source7BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source8BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source1BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source2BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source3BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source4BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source5BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source6BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source7BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source8BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MaxSamplerOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_MaxSamplerOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source1Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source2Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source3Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source4Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source5Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source6Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source7Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source8Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source1Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source2Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source3Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source4Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source5Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source6Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source7Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source8Interpolation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    HRESULT ( STDMETHODCALLTYPE *IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * device,
        /* [retval, out] */boolean * result
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Properties(This,value) \
    ( (This)->lpVtbl->get_Properties(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1(This,source) \
    ( (This)->lpVtbl->get_Source1(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2(This,source) \
    ( (This)->lpVtbl->get_Source2(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3(This,source) \
    ( (This)->lpVtbl->get_Source3(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4(This,source) \
    ( (This)->lpVtbl->get_Source4(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5(This,source) \
    ( (This)->lpVtbl->get_Source5(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6(This,source) \
    ( (This)->lpVtbl->get_Source6(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7(This,source) \
    ( (This)->lpVtbl->get_Source7(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8(This,source) \
    ( (This)->lpVtbl->get_Source8(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1(This,source) \
    ( (This)->lpVtbl->put_Source1(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2(This,source) \
    ( (This)->lpVtbl->put_Source2(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3(This,source) \
    ( (This)->lpVtbl->put_Source3(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4(This,source) \
    ( (This)->lpVtbl->put_Source4(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5(This,source) \
    ( (This)->lpVtbl->put_Source5(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6(This,source) \
    ( (This)->lpVtbl->put_Source6(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7(This,source) \
    ( (This)->lpVtbl->put_Source7(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8(This,source) \
    ( (This)->lpVtbl->put_Source8(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1Mapping(This,value) \
    ( (This)->lpVtbl->get_Source1Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2Mapping(This,value) \
    ( (This)->lpVtbl->get_Source2Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3Mapping(This,value) \
    ( (This)->lpVtbl->get_Source3Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4Mapping(This,value) \
    ( (This)->lpVtbl->get_Source4Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5Mapping(This,value) \
    ( (This)->lpVtbl->get_Source5Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6Mapping(This,value) \
    ( (This)->lpVtbl->get_Source6Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7Mapping(This,value) \
    ( (This)->lpVtbl->get_Source7Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8Mapping(This,value) \
    ( (This)->lpVtbl->get_Source8Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1Mapping(This,value) \
    ( (This)->lpVtbl->put_Source1Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2Mapping(This,value) \
    ( (This)->lpVtbl->put_Source2Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3Mapping(This,value) \
    ( (This)->lpVtbl->put_Source3Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4Mapping(This,value) \
    ( (This)->lpVtbl->put_Source4Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5Mapping(This,value) \
    ( (This)->lpVtbl->put_Source5Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6Mapping(This,value) \
    ( (This)->lpVtbl->put_Source6Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7Mapping(This,value) \
    ( (This)->lpVtbl->put_Source7Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8Mapping(This,value) \
    ( (This)->lpVtbl->put_Source8Mapping(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source1BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source2BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source3BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source4BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source5BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source6BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source7BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8BorderMode(This,value) \
    ( (This)->lpVtbl->get_Source8BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source1BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source2BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source3BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source4BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source5BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source6BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source7BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8BorderMode(This,value) \
    ( (This)->lpVtbl->put_Source8BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_MaxSamplerOffset(This,value) \
    ( (This)->lpVtbl->get_MaxSamplerOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_MaxSamplerOffset(This,value) \
    ( (This)->lpVtbl->put_MaxSamplerOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source1Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source1Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source2Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source2Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source3Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source3Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source4Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source4Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source5Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source5Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source6Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source6Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source7Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source7Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_get_Source8Interpolation(This,value) \
    ( (This)->lpVtbl->get_Source8Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source1Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source1Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source2Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source2Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source3Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source3Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source4Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source4Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source5Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source5Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source6Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source6Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source7Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source7Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_put_Source8Interpolation(This,value) \
    ( (This)->lpVtbl->put_Source8Interpolation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_IsSupported(This,device,result) \
    ( (This)->lpVtbl->IsSupported(This,device,result) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PixelShaderEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory[] = L"Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory";
/* [object, exclusiveto, uuid("9D1727E5-489D-4ABC-B129-5361E3534AF4"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory * This,
        /* [in] */UINT32 shaderCodeCount,
        /* [size_is(shaderCodeCount), in] */BYTE * shaderCode,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect * * effect
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_Create(This,shaderCodeCount,shaderCode,effect) \
    ( (This)->lpVtbl->Create(This,shaderCodeCount,shaderCode,effect) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PixelShaderEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect ** Default Interface **
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PixelShaderEffect[] = L"Microsoft.Graphics.Canvas.Effects.PixelShaderEffect";
#endif





/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType
{
    ColorManagementProfileType_Icc = 0,
    ColorManagementProfileType_Simple = 1,
    ColorManagementProfileType_Extended = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementGamma
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma
{
    ColorManagementGamma_G22 = 0,
    ColorManagementGamma_G10 = 1,
    ColorManagementGamma_G2084 = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile
 *
 */
/* [version] */
typedef 
struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile
{
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 RedPrimary;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 GreenPrimary;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 BluePrimary;
    __x_ABI_CWindows_CFoundation_CNumerics_CVector2 WhitePointXZ;
    __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma Gamma;
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile;


/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace
{
    ExtendedColorSpace_FullG22P709 = 0,
    ExtendedColorSpace_FullG10P709 = 1,
    ExtendedColorSpace_StudioG22P709 = 2,
    ExtendedColorSpace_StudioG22P2020 = 3,
    ExtendedColorSpace_FullG2084P2020 = 12,
    ExtendedColorSpace_StudioG2084P2020 = 14,
    ExtendedColorSpace_FullG22P2020 = 17,
    ExtendedColorSpace_Custom = -1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace;


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfile
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfile[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfile";
/* [object, exclusiveto, uuid("5123A56B-B199-47AB-AEBE-D308044423FE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ColorSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IccProfile )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */BYTE * * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Type )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SimpleProfile )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
        /* [retval, out] */__FIReference_1_Microsoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile * * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ExtendedColorSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_ColorSpace(This,value) \
    ( (This)->lpVtbl->get_ColorSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_IccProfile(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_IccProfile(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_Type(This,value) \
    ( (This)->lpVtbl->get_Type(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_SimpleProfile(This,value) \
    ( (This)->lpVtbl->get_SimpleProfile(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_get_ExtendedColorSpace(This,value) \
    ( (This)->lpVtbl->get_ExtendedColorSpace(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory";
/* [object, exclusiveto, uuid("7A0F1C98-94C6-4621-9877-C51A17823EDF"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactoryVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *Create )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace colorSpace,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * * result
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactoryVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactoryVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_Create(This,colorSpace,result) \
    ( (This)->lpVtbl->Create(This,colorSpace,result) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics";
/* [object, exclusiveto, uuid("94EEF610-03BD-4E82-9479-62A616BE75F1"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateCustom )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
        /* [in] */UINT32 iccProfileCount,
        /* [size_is(iccProfileCount), in] */BYTE * iccProfile,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * * result
        );
    HRESULT ( STDMETHODCALLTYPE *CreateSimple )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile simpleProfile,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * * result
        );
    HRESULT ( STDMETHODCALLTYPE *CreateExtended )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace colorSpace,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * * result
        );
    HRESULT ( STDMETHODCALLTYPE *IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType type,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * device,
        /* [retval, out] */boolean * result
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_CreateCustom(This,iccProfileCount,iccProfile,result) \
    ( (This)->lpVtbl->CreateCustom(This,iccProfileCount,iccProfile,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_CreateSimple(This,simpleProfile,result) \
    ( (This)->lpVtbl->CreateSimple(This,simpleProfile,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_CreateExtended(This,colorSpace,result) \
    ( (This)->lpVtbl->CreateExtended(This,colorSpace,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_IsSupported(This,type,device,result) \
    ( (This)->lpVtbl->IsSupported(This,type,device,result) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorManagementProfile ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorManagementProfile[] = L"Microsoft.Graphics.Canvas.Effects.ColorManagementProfile";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Windows.Foundation.IClosable
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3D[] = L"Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D";
/* [object, exclusiveto, uuid("7AF06B86-2C45-49C8-8F44-E15A6D4FA44E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Device )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_get_Device(This,value) \
    ( (This)->lpVtbl->get_Device(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics[] = L"Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics";
/* [object, exclusiveto, uuid("3CB83559-216A-4BCA-9BB6-E233C5AD2C48"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *CreateFromColors )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 colorCount,
        /* [size_is(colorCount), in] */__x_ABI_CWindows_CUI_CColor * colors,
        /* [in] */INT32 sizeB,
        /* [in] */INT32 sizeG,
        /* [in] */INT32 sizeR,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * * result
        );
    HRESULT ( STDMETHODCALLTYPE *CreateFromBytes )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator * resourceCreator,
        /* [in] */UINT32 byteCount,
        /* [size_is(byteCount), in] */BYTE * bytes,
        /* [in] */INT32 sizeB,
        /* [in] */INT32 sizeG,
        /* [in] */INT32 sizeR,
        /* [in] */__x_ABI_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * * result
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_CreateFromColors(This,resourceCreator,colorCount,colors,sizeB,sizeG,sizeR,result) \
    ( (This)->lpVtbl->CreateFromColors(This,resourceCreator,colorCount,colors,sizeB,sizeG,sizeR,result) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_CreateFromBytes(This,resourceCreator,byteCount,bytes,sizeB,sizeG,sizeR,format,result) \
    ( (This)->lpVtbl->CreateFromBytes(This,resourceCreator,byteCount,bytes,sizeB,sizeG,sizeR,format,result) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EffectTransferTable3D[] = L"Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect[] = L"Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect";
/* [object, exclusiveto, uuid("9BA6607E-75C9-5388-892F-DD3440564D98"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMask )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaMask )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_get_AlphaMask(This,source) \
    ( (This)->lpVtbl->get_AlphaMask(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_put_AlphaMask(This,source) \
    ( (This)->lpVtbl->put_AlphaMask(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics";
/* [object, exclusiveto, uuid("CC31105C-0377-5708-8484-1AD8EE3E554B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics * This,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_get_IsSupported(This,value) \
    ( (This)->lpVtbl->get_IsSupported(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect[] = L"Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect";
/* [object, exclusiveto, uuid("BEEB682B-D64C-5C8B-A1FB-332162ED099C"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MultiplyAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_MultiplyAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source1Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source1Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source2Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source2Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Offset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Offset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source1 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source1 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source2 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source2 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_MultiplyAmount(This,value) \
    ( (This)->lpVtbl->get_MultiplyAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_MultiplyAmount(This,value) \
    ( (This)->lpVtbl->put_MultiplyAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source1Amount(This,value) \
    ( (This)->lpVtbl->get_Source1Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source1Amount(This,value) \
    ( (This)->lpVtbl->put_Source1Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source2Amount(This,value) \
    ( (This)->lpVtbl->get_Source2Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source2Amount(This,value) \
    ( (This)->lpVtbl->put_Source2Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Offset(This,value) \
    ( (This)->lpVtbl->get_Offset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Offset(This,value) \
    ( (This)->lpVtbl->put_Offset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source1(This,source) \
    ( (This)->lpVtbl->get_Source1(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source1(This,source) \
    ( (This)->lpVtbl->put_Source1(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_get_Source2(This,source) \
    ( (This)->lpVtbl->get_Source2(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_put_Source2(This,source) \
    ( (This)->lpVtbl->put_Source2(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IAtlasEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.AtlasEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IAtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.IAtlasEffect";
/* [object, exclusiveto, uuid("F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PaddingRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_PaddingRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_SourceRectangle(This,value) \
    ( (This)->lpVtbl->get_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_SourceRectangle(This,value) \
    ( (This)->lpVtbl->put_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_PaddingRectangle(This,value) \
    ( (This)->lpVtbl->get_PaddingRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_PaddingRectangle(This,value) \
    ( (This)->lpVtbl->put_PaddingRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.AtlasEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IAtlasEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_AtlasEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_AtlasEffect[] = L"Microsoft.Graphics.Canvas.Effects.AtlasEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.BlendEffectMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode
{
    BlendEffectMode_Multiply = 0,
    BlendEffectMode_Screen = 1,
    BlendEffectMode_Darken = 2,
    BlendEffectMode_Lighten = 3,
    BlendEffectMode_Dissolve = 4,
    BlendEffectMode_ColorBurn = 5,
    BlendEffectMode_LinearBurn = 6,
    BlendEffectMode_DarkerColor = 7,
    BlendEffectMode_LighterColor = 8,
    BlendEffectMode_ColorDodge = 9,
    BlendEffectMode_LinearDodge = 10,
    BlendEffectMode_Overlay = 11,
    BlendEffectMode_SoftLight = 12,
    BlendEffectMode_HardLight = 13,
    BlendEffectMode_VividLight = 14,
    BlendEffectMode_LinearLight = 15,
    BlendEffectMode_PinLight = 16,
    BlendEffectMode_HardMix = 17,
    BlendEffectMode_Difference = 18,
    BlendEffectMode_Exclusion = 19,
    BlendEffectMode_Hue = 20,
    BlendEffectMode_Saturation = 21,
    BlendEffectMode_Color = 22,
    BlendEffectMode_Luminosity = 23,
    BlendEffectMode_Subtract = 24,
    BlendEffectMode_Division = 25,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IBlendEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.BlendEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBlendEffect";
/* [object, exclusiveto, uuid("5673248E-7266-5E49-B2AB-2589D5D875C3"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Background )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Background )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Foreground )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Foreground )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Mode(This,value) \
    ( (This)->lpVtbl->get_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Mode(This,value) \
    ( (This)->lpVtbl->put_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Background(This,source) \
    ( (This)->lpVtbl->get_Background(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Background(This,source) \
    ( (This)->lpVtbl->put_Background(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_get_Foreground(This,source) \
    ( (This)->lpVtbl->get_Foreground(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_put_Foreground(This,source) \
    ( (This)->lpVtbl->put_Foreground(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.BlendEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IBlendEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BlendEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BlendEffect[] = L"Microsoft.Graphics.Canvas.Effects.BlendEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IBorderEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.BorderEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBorderEffect";
/* [object, exclusiveto, uuid("31602441-15DB-5B4A-98DD-BA4247548B41"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ExtendX )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ExtendX )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ExtendY )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ExtendY )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_ExtendX(This,value) \
    ( (This)->lpVtbl->get_ExtendX(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_ExtendX(This,value) \
    ( (This)->lpVtbl->put_ExtendX(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_ExtendY(This,value) \
    ( (This)->lpVtbl->get_ExtendY(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_ExtendY(This,value) \
    ( (This)->lpVtbl->put_ExtendY(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.BorderEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IBorderEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BorderEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BorderEffect[] = L"Microsoft.Graphics.Canvas.Effects.BorderEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IBrightnessEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.BrightnessEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IBrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.IBrightnessEffect";
/* [object, exclusiveto, uuid("BECED347-025F-5727-8F7D-498D67DF557E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_WhitePoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_WhitePoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlackPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlackPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_WhitePoint(This,value) \
    ( (This)->lpVtbl->get_WhitePoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_WhitePoint(This,value) \
    ( (This)->lpVtbl->put_WhitePoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_BlackPoint(This,value) \
    ( (This)->lpVtbl->get_BlackPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_BlackPoint(This,value) \
    ( (This)->lpVtbl->put_BlackPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.BrightnessEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IBrightnessEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_BrightnessEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_BrightnessEffect[] = L"Microsoft.Graphics.Canvas.Effects.BrightnessEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect";
/* [object, exclusiveto, uuid("F14B9464-1871-5EAA-9DB6-C0901140E9D3"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Tolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Tolerance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InvertAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InvertAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Feather )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Feather )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Color(This,value) \
    ( (This)->lpVtbl->get_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Color(This,value) \
    ( (This)->lpVtbl->put_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Tolerance(This,value) \
    ( (This)->lpVtbl->get_Tolerance(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Tolerance(This,value) \
    ( (This)->lpVtbl->put_Tolerance(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_InvertAlpha(This,value) \
    ( (This)->lpVtbl->get_InvertAlpha(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_InvertAlpha(This,value) \
    ( (This)->lpVtbl->put_InvertAlpha(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Feather(This,value) \
    ( (This)->lpVtbl->get_Feather(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Feather(This,value) \
    ( (This)->lpVtbl->put_Feather(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_ColorHdr(This,value) \
    ( (This)->lpVtbl->get_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_ColorHdr(This,value) \
    ( (This)->lpVtbl->put_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect[] = L"Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality
{
    ColorManagementEffectQuality_Proof = 0,
    ColorManagementEffectQuality_Normal = 1,
    ColorManagementEffectQuality_Best = 2,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementEffect";
/* [object, exclusiveto, uuid("6E8BBE37-E1E4-5AD0-B98D-940E3213A54E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceColorProfile )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceColorProfile )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceRenderingIntent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceRenderingIntent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OutputColorProfile )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OutputColorProfile )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OutputRenderingIntent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OutputRenderingIntent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Quality )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Quality )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_SourceColorProfile(This,value) \
    ( (This)->lpVtbl->get_SourceColorProfile(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_SourceColorProfile(This,value) \
    ( (This)->lpVtbl->put_SourceColorProfile(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_SourceRenderingIntent(This,value) \
    ( (This)->lpVtbl->get_SourceRenderingIntent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_SourceRenderingIntent(This,value) \
    ( (This)->lpVtbl->put_SourceRenderingIntent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_OutputColorProfile(This,value) \
    ( (This)->lpVtbl->get_OutputColorProfile(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_OutputColorProfile(This,value) \
    ( (This)->lpVtbl->put_OutputColorProfile(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_OutputRenderingIntent(This,value) \
    ( (This)->lpVtbl->get_OutputRenderingIntent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_OutputRenderingIntent(This,value) \
    ( (This)->lpVtbl->put_OutputRenderingIntent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_AlphaMode(This,value) \
    ( (This)->lpVtbl->put_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_Quality(This,value) \
    ( (This)->lpVtbl->get_Quality(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_Quality(This,value) \
    ( (This)->lpVtbl->put_Quality(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorManagementEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics";
/* [object, exclusiveto, uuid("31C7AF98-F2D4-55FC-B129-A70736E6DA05"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
HRESULT ( STDMETHODCALLTYPE *IsBestQualitySupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics * This,
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice * device,
        /* [retval, out] */boolean * result
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_IsBestQualitySupported(This,device,result) \
    ( (This)->lpVtbl->IsBestQualitySupported(This,device,result) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorManagementEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorManagementEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorManagementEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorManagementEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect";
/* [object, exclusiveto, uuid("E6AE54C4-883D-588E-B451-E9EBE3830437"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ColorMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ColorMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_ColorMatrix(This,value) \
    ( (This)->lpVtbl->get_ColorMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_ColorMatrix(This,value) \
    ( (This)->lpVtbl->put_ColorMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_AlphaMode(This,value) \
    ( (This)->lpVtbl->put_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IColorSourceEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ColorSourceEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.IColorSourceEffect";
/* [object, exclusiveto, uuid("25F942C7-7FEE-518A-BA7B-22A0060AF7F6"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_get_Color(This,value) \
    ( (This)->lpVtbl->get_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_put_Color(This,value) \
    ( (This)->lpVtbl->put_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_get_ColorHdr(This,value) \
    ( (This)->lpVtbl->get_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_put_ColorHdr(This,value) \
    ( (This)->lpVtbl->put_ColorHdr(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ColorSourceEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IColorSourceEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ColorSourceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ColorSourceEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICompositeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CompositeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICompositeEffect";
/* [object, exclusiveto, uuid("F8808C48-CDC7-5DB4-807C-B9344FF71984"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Sources )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect * This,
        /* [retval, out] */__FIVector_1_Windows__CGraphics__CEffects__CIGraphicsEffectSource * * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_get_Mode(This,value) \
    ( (This)->lpVtbl->get_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_put_Mode(This,value) \
    ( (This)->lpVtbl->put_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_get_Sources(This,value) \
    ( (This)->lpVtbl->get_Sources(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.CompositeEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ICompositeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CompositeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CompositeEffect[] = L"Microsoft.Graphics.Canvas.Effects.CompositeEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IContrastEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ContrastEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IContrastEffect[] = L"Microsoft.Graphics.Canvas.Effects.IContrastEffect";
/* [object, exclusiveto, uuid("DA8A2B9F-594E-560A-9EAA-1F912408FE79"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Contrast )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Contrast )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampSource )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampSource )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_get_Contrast(This,value) \
    ( (This)->lpVtbl->get_Contrast(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_put_Contrast(This,value) \
    ( (This)->lpVtbl->put_Contrast(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_get_ClampSource(This,value) \
    ( (This)->lpVtbl->get_ClampSource(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_put_ClampSource(This,value) \
    ( (This)->lpVtbl->put_ClampSource(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ContrastEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IContrastEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ContrastEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ContrastEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ContrastEffect[] = L"Microsoft.Graphics.Canvas.Effects.ContrastEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect";
/* [object, exclusiveto, uuid("82961257-A78D-5440-8026-AF57D4A76A9E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_KernelScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_KernelScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_KernelWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_KernelWidth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_KernelHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_KernelHeight )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_KernelMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_KernelMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Divisor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Divisor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Offset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Offset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_KernelOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_KernelOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_PreserveAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_PreserveAlpha )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelScale(This,value) \
    ( (This)->lpVtbl->get_KernelScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelScale(This,value) \
    ( (This)->lpVtbl->put_KernelScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_InterpolationMode(This,value) \
    ( (This)->lpVtbl->get_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_InterpolationMode(This,value) \
    ( (This)->lpVtbl->put_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelWidth(This,value) \
    ( (This)->lpVtbl->get_KernelWidth(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelWidth(This,value) \
    ( (This)->lpVtbl->put_KernelWidth(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelHeight(This,value) \
    ( (This)->lpVtbl->get_KernelHeight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelHeight(This,value) \
    ( (This)->lpVtbl->put_KernelHeight(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelMatrix(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_KernelMatrix(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelMatrix(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_KernelMatrix(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Divisor(This,value) \
    ( (This)->lpVtbl->get_Divisor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Divisor(This,value) \
    ( (This)->lpVtbl->put_Divisor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Offset(This,value) \
    ( (This)->lpVtbl->get_Offset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Offset(This,value) \
    ( (This)->lpVtbl->put_Offset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_KernelOffset(This,value) \
    ( (This)->lpVtbl->get_KernelOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_KernelOffset(This,value) \
    ( (This)->lpVtbl->put_KernelOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_PreserveAlpha(This,value) \
    ( (This)->lpVtbl->get_PreserveAlpha(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_PreserveAlpha(This,value) \
    ( (This)->lpVtbl->put_PreserveAlpha(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect[] = L"Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICropEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CropEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICropEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICropEffect";
/* [object, exclusiveto, uuid("D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_SourceRectangle(This,value) \
    ( (This)->lpVtbl->get_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_SourceRectangle(This,value) \
    ( (This)->lpVtbl->put_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.CropEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ICropEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CropEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CropEffect[] = L"Microsoft.Graphics.Canvas.Effects.CropEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CrossFadeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect[] = L"Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect";
/* [object, exclusiveto, uuid("BE161A9F-43D2-5613-8600-D51E3D7CE288"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CrossFade )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CrossFade )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source2 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source2 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source1 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source1 )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_get_CrossFade(This,value) \
    ( (This)->lpVtbl->get_CrossFade(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_put_CrossFade(This,value) \
    ( (This)->lpVtbl->put_CrossFade(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_get_Source2(This,source) \
    ( (This)->lpVtbl->get_Source2(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_put_Source2(This,source) \
    ( (This)->lpVtbl->put_Source2(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_get_Source1(This,source) \
    ( (This)->lpVtbl->get_Source1(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_put_Source1(This,source) \
    ( (This)->lpVtbl->put_Source1(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.CrossFadeEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics";
/* [object, exclusiveto, uuid("A3B67330-6284-5EF6-99E8-B4B05D2B8BFC"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics * This,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_get_IsSupported(This,value) \
    ( (This)->lpVtbl->get_IsSupported(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.CrossFadeEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_CrossFadeEffect[] = L"Microsoft.Graphics.Canvas.Effects.CrossFadeEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect";
/* [object, exclusiveto, uuid("5D155C4B-0882-506A-A8E1-12E1EAD17F0A"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Optimization )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Optimization )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_BlurAmount(This,value) \
    ( (This)->lpVtbl->get_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_BlurAmount(This,value) \
    ( (This)->lpVtbl->put_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Angle(This,value) \
    ( (This)->lpVtbl->get_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Angle(This,value) \
    ( (This)->lpVtbl->put_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Optimization(This,value) \
    ( (This)->lpVtbl->get_Optimization(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Optimization(This,value) \
    ( (This)->lpVtbl->put_Optimization(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect";
/* [object, exclusiveto, uuid("7F1F54F9-21B5-5B91-9506-832C536FDDFA"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_RedTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_RedTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_RedTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_RedTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_RedDisable(This,value) \
    ( (This)->lpVtbl->get_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_RedDisable(This,value) \
    ( (This)->lpVtbl->put_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_GreenTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_GreenTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_GreenTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_GreenTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_GreenDisable(This,value) \
    ( (This)->lpVtbl->get_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_GreenDisable(This,value) \
    ( (This)->lpVtbl->put_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_BlueTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_BlueTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_BlueTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_BlueTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_BlueDisable(This,value) \
    ( (This)->lpVtbl->get_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_BlueDisable(This,value) \
    ( (This)->lpVtbl->put_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_AlphaTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_AlphaTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_AlphaTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_AlphaTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_AlphaDisable(This,value) \
    ( (This)->lpVtbl->get_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_AlphaDisable(This,value) \
    ( (This)->lpVtbl->put_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect";
/* [object, exclusiveto, uuid("45F57C50-D4D9-5AF1-8A6B-50378F3498A2"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_XChannelSelect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_XChannelSelect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_YChannelSelect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_YChannelSelect )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Displacement )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Displacement )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Amount(This,value) \
    ( (This)->lpVtbl->get_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Amount(This,value) \
    ( (This)->lpVtbl->put_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_XChannelSelect(This,value) \
    ( (This)->lpVtbl->get_XChannelSelect(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_XChannelSelect(This,value) \
    ( (This)->lpVtbl->put_XChannelSelect(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_YChannelSelect(This,value) \
    ( (This)->lpVtbl->get_YChannelSelect(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_YChannelSelect(This,value) \
    ( (This)->lpVtbl->put_YChannelSelect(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_get_Displacement(This,source) \
    ( (This)->lpVtbl->get_Displacement(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_put_Displacement(This,source) \
    ( (This)->lpVtbl->put_Displacement(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect";
/* [object, exclusiveto, uuid("D501B10B-B445-50F4-8B8F-CDECFCDD1321"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Azimuth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Azimuth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Elevation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Elevation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Azimuth(This,value) \
    ( (This)->lpVtbl->get_Azimuth(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Azimuth(This,value) \
    ( (This)->lpVtbl->put_Azimuth(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Elevation(This,value) \
    ( (This)->lpVtbl->get_Elevation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Elevation(This,value) \
    ( (This)->lpVtbl->put_Elevation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_DiffuseAmount(This,value) \
    ( (This)->lpVtbl->get_DiffuseAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_DiffuseAmount(This,value) \
    ( (This)->lpVtbl->put_DiffuseAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapScale(This,value) \
    ( (This)->lpVtbl->get_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapScale(This,value) \
    ( (This)->lpVtbl->put_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_LightColor(This,value) \
    ( (This)->lpVtbl->get_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_LightColor(This,value) \
    ( (This)->lpVtbl->put_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->get_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->put_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->get_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->put_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_LightColorHdr(This,value) \
    ( (This)->lpVtbl->get_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_LightColorHdr(This,value) \
    ( (This)->lpVtbl->put_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect";
/* [object, exclusiveto, uuid("A7A828DF-3072-545F-8D75-86C100F03231"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Azimuth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Azimuth )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Elevation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Elevation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Azimuth(This,value) \
    ( (This)->lpVtbl->get_Azimuth(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Azimuth(This,value) \
    ( (This)->lpVtbl->put_Azimuth(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Elevation(This,value) \
    ( (This)->lpVtbl->get_Elevation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Elevation(This,value) \
    ( (This)->lpVtbl->put_Elevation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_SpecularExponent(This,value) \
    ( (This)->lpVtbl->get_SpecularExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_SpecularExponent(This,value) \
    ( (This)->lpVtbl->put_SpecularExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_SpecularAmount(This,value) \
    ( (This)->lpVtbl->get_SpecularAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_SpecularAmount(This,value) \
    ( (This)->lpVtbl->put_SpecularAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapScale(This,value) \
    ( (This)->lpVtbl->get_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapScale(This,value) \
    ( (This)->lpVtbl->put_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_LightColor(This,value) \
    ( (This)->lpVtbl->get_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_LightColor(This,value) \
    ( (This)->lpVtbl->put_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->get_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->put_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->get_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->put_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_LightColorHdr(This,value) \
    ( (This)->lpVtbl->get_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_LightColorHdr(This,value) \
    ( (This)->lpVtbl->put_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect";
/* [object, exclusiveto, uuid("636597CD-F94A-55B6-9CF0-694A53D638EA"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceDpi )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_InterpolationMode(This,value) \
    ( (This)->lpVtbl->get_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_InterpolationMode(This,value) \
    ( (This)->lpVtbl->put_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_SourceDpi(This,value) \
    ( (This)->lpVtbl->get_SourceDpi(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_SourceDpi(This,value) \
    ( (This)->lpVtbl->put_SourceDpi(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect[] = L"Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode
{
    EdgeDetectionEffectMode_Sobel = 0,
    EdgeDetectionEffectMode_Prewitt = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect[] = L"Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect";
/* [object, exclusiveto, uuid("69F6CF3A-F38F-5A88-974A-29390B957E5C"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OverlayEdges )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OverlayEdges )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_Amount(This,value) \
    ( (This)->lpVtbl->get_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_Amount(This,value) \
    ( (This)->lpVtbl->put_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_BlurAmount(This,value) \
    ( (This)->lpVtbl->get_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_BlurAmount(This,value) \
    ( (This)->lpVtbl->put_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_Mode(This,value) \
    ( (This)->lpVtbl->get_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_Mode(This,value) \
    ( (This)->lpVtbl->put_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_OverlayEdges(This,value) \
    ( (This)->lpVtbl->get_OverlayEdges(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_OverlayEdges(This,value) \
    ( (This)->lpVtbl->put_OverlayEdges(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_AlphaMode(This,value) \
    ( (This)->lpVtbl->put_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect[] = L"Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IEmbossEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.EmbossEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IEmbossEffect[] = L"Microsoft.Graphics.Canvas.Effects.IEmbossEffect";
/* [object, exclusiveto, uuid("617BFF35-481C-5596-ABA5-00A162349D7B"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_get_Amount(This,value) \
    ( (This)->lpVtbl->get_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_put_Amount(This,value) \
    ( (This)->lpVtbl->put_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_get_Angle(This,value) \
    ( (This)->lpVtbl->get_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_put_Angle(This,value) \
    ( (This)->lpVtbl->put_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.EmbossEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IEmbossEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EmbossEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_EmbossEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_EmbossEffect[] = L"Microsoft.Graphics.Canvas.Effects.EmbossEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IExposureEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ExposureEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IExposureEffect[] = L"Microsoft.Graphics.Canvas.Effects.IExposureEffect";
/* [object, exclusiveto, uuid("B9E20A03-2232-5FD3-B408-15784B79DBB0"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Exposure )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Exposure )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_get_Exposure(This,value) \
    ( (This)->lpVtbl->get_Exposure(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_put_Exposure(This,value) \
    ( (This)->lpVtbl->put_Exposure(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ExposureEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IExposureEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ExposureEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ExposureEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ExposureEffect[] = L"Microsoft.Graphics.Canvas.Effects.ExposureEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.GammaTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect";
/* [object, exclusiveto, uuid("B4576B6B-6C3E-534A-8576-D46DF4FCE93D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaAmplitude )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedAmplitude(This,value) \
    ( (This)->lpVtbl->get_RedAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedAmplitude(This,value) \
    ( (This)->lpVtbl->put_RedAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedExponent(This,value) \
    ( (This)->lpVtbl->get_RedExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedExponent(This,value) \
    ( (This)->lpVtbl->put_RedExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedOffset(This,value) \
    ( (This)->lpVtbl->get_RedOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedOffset(This,value) \
    ( (This)->lpVtbl->put_RedOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_RedDisable(This,value) \
    ( (This)->lpVtbl->get_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_RedDisable(This,value) \
    ( (This)->lpVtbl->put_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenAmplitude(This,value) \
    ( (This)->lpVtbl->get_GreenAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenAmplitude(This,value) \
    ( (This)->lpVtbl->put_GreenAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenExponent(This,value) \
    ( (This)->lpVtbl->get_GreenExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenExponent(This,value) \
    ( (This)->lpVtbl->put_GreenExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenOffset(This,value) \
    ( (This)->lpVtbl->get_GreenOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenOffset(This,value) \
    ( (This)->lpVtbl->put_GreenOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_GreenDisable(This,value) \
    ( (This)->lpVtbl->get_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_GreenDisable(This,value) \
    ( (This)->lpVtbl->put_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueAmplitude(This,value) \
    ( (This)->lpVtbl->get_BlueAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueAmplitude(This,value) \
    ( (This)->lpVtbl->put_BlueAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueExponent(This,value) \
    ( (This)->lpVtbl->get_BlueExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueExponent(This,value) \
    ( (This)->lpVtbl->put_BlueExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueOffset(This,value) \
    ( (This)->lpVtbl->get_BlueOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueOffset(This,value) \
    ( (This)->lpVtbl->put_BlueOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_BlueDisable(This,value) \
    ( (This)->lpVtbl->get_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_BlueDisable(This,value) \
    ( (This)->lpVtbl->put_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaAmplitude(This,value) \
    ( (This)->lpVtbl->get_AlphaAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaAmplitude(This,value) \
    ( (This)->lpVtbl->put_AlphaAmplitude(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaExponent(This,value) \
    ( (This)->lpVtbl->get_AlphaExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaExponent(This,value) \
    ( (This)->lpVtbl->put_AlphaExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaOffset(This,value) \
    ( (This)->lpVtbl->get_AlphaOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaOffset(This,value) \
    ( (This)->lpVtbl->put_AlphaOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_AlphaDisable(This,value) \
    ( (This)->lpVtbl->get_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_AlphaDisable(This,value) \
    ( (This)->lpVtbl->put_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.GammaTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GammaTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.GammaTransferEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect";
/* [object, exclusiveto, uuid("A82EC394-6734-5830-9123-2C82B27DD3C0"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Optimization )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Optimization )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_BlurAmount(This,value) \
    ( (This)->lpVtbl->get_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_BlurAmount(This,value) \
    ( (This)->lpVtbl->put_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_Optimization(This,value) \
    ( (This)->lpVtbl->get_Optimization(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_Optimization(This,value) \
    ( (This)->lpVtbl->put_Optimization(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect[] = L"Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.GrayscaleEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect";
/* [object, exclusiveto, uuid("78E13B83-0638-53F8-B0B3-5B0B320A9AD2"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.GrayscaleEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_GrayscaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.GrayscaleEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.HdrToneMapEffectDisplayMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CHdrToneMapEffectDisplayMode
{
    HdrToneMapEffectDisplayMode_Sdr = 0,
    HdrToneMapEffectDisplayMode_Hdr = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CHdrToneMapEffectDisplayMode;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect";
/* [object, exclusiveto, uuid("2004FAAC-663E-5DF4-B4CD-A5AFBFD9341F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InputMaxLuminance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InputMaxLuminance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OutputMaxLuminance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OutputMaxLuminance )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DisplayMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CHdrToneMapEffectDisplayMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DisplayMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CHdrToneMapEffectDisplayMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_get_InputMaxLuminance(This,value) \
    ( (This)->lpVtbl->get_InputMaxLuminance(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_put_InputMaxLuminance(This,value) \
    ( (This)->lpVtbl->put_InputMaxLuminance(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_get_OutputMaxLuminance(This,value) \
    ( (This)->lpVtbl->get_OutputMaxLuminance(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_put_OutputMaxLuminance(This,value) \
    ( (This)->lpVtbl->put_OutputMaxLuminance(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_get_DisplayMode(This,value) \
    ( (This)->lpVtbl->get_DisplayMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_put_DisplayMode(This,value) \
    ( (This)->lpVtbl->put_DisplayMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStatics";
/* [object, exclusiveto, uuid("0181F02F-0A7E-55E1-8D2D-42AB99739B27"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics * This,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_get_IsSupported(This,value) \
    ( (This)->lpVtbl->get_IsSupported(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHdrToneMapEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect[] = L"Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect";
/* [object, exclusiveto, uuid("7F90BE14-267E-5088-BC36-2E0AAD869B52"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Highlights )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Highlights )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Shadows )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Shadows )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Clarity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Clarity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MaskBlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_MaskBlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceIsLinearGamma )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceIsLinearGamma )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Highlights(This,value) \
    ( (This)->lpVtbl->get_Highlights(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Highlights(This,value) \
    ( (This)->lpVtbl->put_Highlights(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Shadows(This,value) \
    ( (This)->lpVtbl->get_Shadows(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Shadows(This,value) \
    ( (This)->lpVtbl->put_Shadows(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Clarity(This,value) \
    ( (This)->lpVtbl->get_Clarity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Clarity(This,value) \
    ( (This)->lpVtbl->put_Clarity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_MaskBlurAmount(This,value) \
    ( (This)->lpVtbl->get_MaskBlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_MaskBlurAmount(This,value) \
    ( (This)->lpVtbl->put_MaskBlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_SourceIsLinearGamma(This,value) \
    ( (This)->lpVtbl->get_SourceIsLinearGamma(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_SourceIsLinearGamma(This,value) \
    ( (This)->lpVtbl->put_SourceIsLinearGamma(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect[] = L"Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHueRotationEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HueRotationEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHueRotationEffect";
/* [object, exclusiveto, uuid("C172EBF2-E35F-58AE-AD2C-561ECEAF2694"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_get_Angle(This,value) \
    ( (This)->lpVtbl->get_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_put_Angle(This,value) \
    ( (This)->lpVtbl->put_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HueRotationEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHueRotationEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueRotationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HueRotationEffect[] = L"Microsoft.Graphics.Canvas.Effects.HueRotationEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.HueToRgbEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect[] = L"Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect";
/* [object, exclusiveto, uuid("1E97C12C-B743-53D0-88C4-8435272B0A3D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceColorSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceColorSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_get_SourceColorSpace(This,value) \
    ( (This)->lpVtbl->get_SourceColorSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_put_SourceColorSpace(This,value) \
    ( (This)->lpVtbl->put_SourceColorSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.HueToRgbEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_HueToRgbEffect[] = L"Microsoft.Graphics.Canvas.Effects.HueToRgbEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IInvertEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.InvertEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IInvertEffect[] = L"Microsoft.Graphics.Canvas.Effects.IInvertEffect";
/* [object, exclusiveto, uuid("D4ADCDFC-0F60-524D-936A-7F2736AD33D8"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.InvertEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IInvertEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_InvertEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_InvertEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_InvertEffect[] = L"Microsoft.Graphics.Canvas.Effects.InvertEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.LinearTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect";
/* [object, exclusiveto, uuid("43D27AD0-8937-5FDB-876A-4E91CB47540C"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaOffset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaSlope )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedOffset(This,value) \
    ( (This)->lpVtbl->get_RedOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedOffset(This,value) \
    ( (This)->lpVtbl->put_RedOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedSlope(This,value) \
    ( (This)->lpVtbl->get_RedSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedSlope(This,value) \
    ( (This)->lpVtbl->put_RedSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_RedDisable(This,value) \
    ( (This)->lpVtbl->get_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_RedDisable(This,value) \
    ( (This)->lpVtbl->put_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenOffset(This,value) \
    ( (This)->lpVtbl->get_GreenOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenOffset(This,value) \
    ( (This)->lpVtbl->put_GreenOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenSlope(This,value) \
    ( (This)->lpVtbl->get_GreenSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenSlope(This,value) \
    ( (This)->lpVtbl->put_GreenSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_GreenDisable(This,value) \
    ( (This)->lpVtbl->get_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_GreenDisable(This,value) \
    ( (This)->lpVtbl->put_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueOffset(This,value) \
    ( (This)->lpVtbl->get_BlueOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueOffset(This,value) \
    ( (This)->lpVtbl->put_BlueOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueSlope(This,value) \
    ( (This)->lpVtbl->get_BlueSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueSlope(This,value) \
    ( (This)->lpVtbl->put_BlueSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_BlueDisable(This,value) \
    ( (This)->lpVtbl->get_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_BlueDisable(This,value) \
    ( (This)->lpVtbl->put_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaOffset(This,value) \
    ( (This)->lpVtbl->get_AlphaOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaOffset(This,value) \
    ( (This)->lpVtbl->put_AlphaOffset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaSlope(This,value) \
    ( (This)->lpVtbl->get_AlphaSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaSlope(This,value) \
    ( (This)->lpVtbl->put_AlphaSlope(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_AlphaDisable(This,value) \
    ( (This)->lpVtbl->get_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_AlphaDisable(This,value) \
    ( (This)->lpVtbl->put_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.LinearTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LinearTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.LinearTransferEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect";
/* [object, exclusiveto, uuid("22364900-AC51-5BD3-8BD2-D626FC9A65F9"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect[] = L"Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode
{
    MorphologyEffectMode_Erode = 0,
    MorphologyEffectMode_Dilate = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IMorphologyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.MorphologyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IMorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IMorphologyEffect";
/* [object, exclusiveto, uuid("FF065FDB-62C8-5808-921E-49EFA43A3D34"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Mode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Width )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Width )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Height )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Height )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Mode(This,value) \
    ( (This)->lpVtbl->get_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Mode(This,value) \
    ( (This)->lpVtbl->put_Mode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Width(This,value) \
    ( (This)->lpVtbl->get_Width(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Width(This,value) \
    ( (This)->lpVtbl->put_Width(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Height(This,value) \
    ( (This)->lpVtbl->get_Height(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Height(This,value) \
    ( (This)->lpVtbl->put_Height(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.MorphologyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IMorphologyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_MorphologyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_MorphologyEffect[] = L"Microsoft.Graphics.Canvas.Effects.MorphologyEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IOpacityEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.OpacityEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityEffect[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityEffect";
/* [object, exclusiveto, uuid("94B6AD75-C540-51B8-A9D1-544174ADC68D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Opacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Opacity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_get_Opacity(This,value) \
    ( (This)->lpVtbl->get_Opacity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_put_Opacity(This,value) \
    ( (This)->lpVtbl->put_Opacity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.OpacityEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics";
/* [object, exclusiveto, uuid("91A7CDE3-B9B7-5437-8878-FB2E14100E6D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics * This,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_get_IsSupported(This,value) \
    ( (This)->lpVtbl->get_IsSupported(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.OpacityEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IOpacityEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_OpacityEffect[] = L"Microsoft.Graphics.Canvas.Effects.OpacityEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect";
/* [object, exclusiveto, uuid("099F3299-9B0A-5ED3-B044-4A6FC96F8362"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OpaqueRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OpaqueRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_get_OpaqueRectangle(This,value) \
    ( (This)->lpVtbl->get_OpaqueRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_put_OpaqueRectangle(This,value) \
    ( (This)->lpVtbl->put_OpaqueRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect[] = L"Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect";
/* [object, exclusiveto, uuid("6CCE09EC-F847-5661-AF4B-531DD3DD7D6E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightPosition(This,value) \
    ( (This)->lpVtbl->get_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightPosition(This,value) \
    ( (This)->lpVtbl->put_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_DiffuseAmount(This,value) \
    ( (This)->lpVtbl->get_DiffuseAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_DiffuseAmount(This,value) \
    ( (This)->lpVtbl->put_DiffuseAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapScale(This,value) \
    ( (This)->lpVtbl->get_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapScale(This,value) \
    ( (This)->lpVtbl->put_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightColor(This,value) \
    ( (This)->lpVtbl->get_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightColor(This,value) \
    ( (This)->lpVtbl->put_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->get_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->put_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->get_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->put_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_LightColorHdr(This,value) \
    ( (This)->lpVtbl->get_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_LightColorHdr(This,value) \
    ( (This)->lpVtbl->put_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PointSpecularEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect";
/* [object, exclusiveto, uuid("EC8AFE9B-8501-5286-A43C-1AFFF7420AD6"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightPosition(This,value) \
    ( (This)->lpVtbl->get_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightPosition(This,value) \
    ( (This)->lpVtbl->put_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_SpecularExponent(This,value) \
    ( (This)->lpVtbl->get_SpecularExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_SpecularExponent(This,value) \
    ( (This)->lpVtbl->put_SpecularExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_SpecularAmount(This,value) \
    ( (This)->lpVtbl->get_SpecularAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_SpecularAmount(This,value) \
    ( (This)->lpVtbl->put_SpecularAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapScale(This,value) \
    ( (This)->lpVtbl->get_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapScale(This,value) \
    ( (This)->lpVtbl->put_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightColor(This,value) \
    ( (This)->lpVtbl->get_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightColor(This,value) \
    ( (This)->lpVtbl->put_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->get_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->put_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->get_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->put_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_LightColorHdr(This,value) \
    ( (This)->lpVtbl->get_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_LightColorHdr(This,value) \
    ( (This)->lpVtbl->put_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PointSpecularEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PointSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.PointSpecularEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPosterizeEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PosterizeEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPosterizeEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPosterizeEffect";
/* [object, exclusiveto, uuid("2F631A3B-C89A-507C-9756-299B61434FA4"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedValueCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedValueCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenValueCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenValueCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueValueCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueValueCount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_RedValueCount(This,value) \
    ( (This)->lpVtbl->get_RedValueCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_RedValueCount(This,value) \
    ( (This)->lpVtbl->put_RedValueCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_GreenValueCount(This,value) \
    ( (This)->lpVtbl->get_GreenValueCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_GreenValueCount(This,value) \
    ( (This)->lpVtbl->put_GreenValueCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_BlueValueCount(This,value) \
    ( (This)->lpVtbl->get_BlueValueCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_BlueValueCount(This,value) \
    ( (This)->lpVtbl->put_BlueValueCount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PosterizeEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPosterizeEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PosterizeEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PosterizeEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PosterizeEffect[] = L"Microsoft.Graphics.Canvas.Effects.PosterizeEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.PremultiplyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect";
/* [object, exclusiveto, uuid("D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.PremultiplyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_PremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.PremultiplyEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.RgbToHueEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect[] = L"Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect";
/* [object, exclusiveto, uuid("7CAEADC6-9EB3-5895-B876-F485C9574847"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OutputColorSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OutputColorSpace )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_get_OutputColorSpace(This,value) \
    ( (This)->lpVtbl->get_OutputColorSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_put_OutputColorSpace(This,value) \
    ( (This)->lpVtbl->put_OutputColorSpace(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.RgbToHueEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_RgbToHueEffect[] = L"Microsoft.Graphics.Canvas.Effects.RgbToHueEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISaturationEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SaturationEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISaturationEffect";
/* [object, exclusiveto, uuid("F85A5ED7-7212-57A6-B357-61038961C58D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Saturation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Saturation )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_get_Saturation(This,value) \
    ( (This)->lpVtbl->get_Saturation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_put_Saturation(This,value) \
    ( (This)->lpVtbl->put_Saturation(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SaturationEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISaturationEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SaturationEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SaturationEffect[] = L"Microsoft.Graphics.Canvas.Effects.SaturationEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IScaleEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ScaleEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.IScaleEffect";
/* [object, exclusiveto, uuid("7522AE90-BEC2-512C-BCC0-4D6A97E3ED34"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Scale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Scale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_CenterPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_CenterPoint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Sharpness )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Sharpness )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Scale(This,value) \
    ( (This)->lpVtbl->get_Scale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Scale(This,value) \
    ( (This)->lpVtbl->put_Scale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_CenterPoint(This,value) \
    ( (This)->lpVtbl->get_CenterPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_CenterPoint(This,value) \
    ( (This)->lpVtbl->put_CenterPoint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_InterpolationMode(This,value) \
    ( (This)->lpVtbl->get_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_InterpolationMode(This,value) \
    ( (This)->lpVtbl->put_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Sharpness(This,value) \
    ( (This)->lpVtbl->get_Sharpness(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Sharpness(This,value) \
    ( (This)->lpVtbl->put_Sharpness(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ScaleEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IScaleEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ScaleEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ScaleEffect[] = L"Microsoft.Graphics.Canvas.Effects.ScaleEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISepiaEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SepiaEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISepiaEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISepiaEffect";
/* [object, exclusiveto, uuid("F933471F-A7AF-5521-BE79-B0DA22976CFF"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Intensity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Intensity )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_get_Intensity(This,value) \
    ( (This)->lpVtbl->get_Intensity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_put_Intensity(This,value) \
    ( (This)->lpVtbl->put_Intensity(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_put_AlphaMode(This,value) \
    ( (This)->lpVtbl->put_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SepiaEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISepiaEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SepiaEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SepiaEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SepiaEffect[] = L"Microsoft.Graphics.Canvas.Effects.SepiaEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IShadowEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.ShadowEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.IShadowEffect";
/* [object, exclusiveto, uuid("3947C621-78DA-5489-9927-BE655F4576E2"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlurAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ShadowColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ShadowColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Optimization )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Optimization )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ShadowColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ShadowColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_BlurAmount(This,value) \
    ( (This)->lpVtbl->get_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_BlurAmount(This,value) \
    ( (This)->lpVtbl->put_BlurAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_ShadowColor(This,value) \
    ( (This)->lpVtbl->get_ShadowColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_ShadowColor(This,value) \
    ( (This)->lpVtbl->put_ShadowColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_Optimization(This,value) \
    ( (This)->lpVtbl->get_Optimization(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_Optimization(This,value) \
    ( (This)->lpVtbl->put_Optimization(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_ShadowColorHdr(This,value) \
    ( (This)->lpVtbl->get_ShadowColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_ShadowColorHdr(This,value) \
    ( (This)->lpVtbl->put_ShadowColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.ShadowEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IShadowEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_ShadowEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_ShadowEffect[] = L"Microsoft.Graphics.Canvas.Effects.ShadowEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISharpenEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SharpenEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISharpenEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISharpenEffect";
/* [object, exclusiveto, uuid("7EFEF0A1-7578-5F62-8364-46145674EF7E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Threshold )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Threshold )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_get_Amount(This,value) \
    ( (This)->lpVtbl->get_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_put_Amount(This,value) \
    ( (This)->lpVtbl->put_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_get_Threshold(This,value) \
    ( (This)->lpVtbl->get_Threshold(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_put_Threshold(This,value) \
    ( (This)->lpVtbl->put_Threshold(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SharpenEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISharpenEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SharpenEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SharpenEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SharpenEffect[] = L"Microsoft.Graphics.Canvas.Effects.SharpenEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect";
/* [object, exclusiveto, uuid("B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightTarget )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightTarget )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Focus )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Focus )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LimitingConeAngle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LimitingConeAngle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_DiffuseAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_DiffuseAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightPosition(This,value) \
    ( (This)->lpVtbl->get_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightPosition(This,value) \
    ( (This)->lpVtbl->put_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightTarget(This,value) \
    ( (This)->lpVtbl->get_LightTarget(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightTarget(This,value) \
    ( (This)->lpVtbl->put_LightTarget(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_Focus(This,value) \
    ( (This)->lpVtbl->get_Focus(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_Focus(This,value) \
    ( (This)->lpVtbl->put_Focus(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LimitingConeAngle(This,value) \
    ( (This)->lpVtbl->get_LimitingConeAngle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LimitingConeAngle(This,value) \
    ( (This)->lpVtbl->put_LimitingConeAngle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_DiffuseAmount(This,value) \
    ( (This)->lpVtbl->get_DiffuseAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_DiffuseAmount(This,value) \
    ( (This)->lpVtbl->put_DiffuseAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapScale(This,value) \
    ( (This)->lpVtbl->get_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapScale(This,value) \
    ( (This)->lpVtbl->put_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightColor(This,value) \
    ( (This)->lpVtbl->get_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightColor(This,value) \
    ( (This)->lpVtbl->put_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->get_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->put_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->get_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->put_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_LightColorHdr(This,value) \
    ( (This)->lpVtbl->get_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_LightColorHdr(This,value) \
    ( (This)->lpVtbl->put_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect";
/* [object, exclusiveto, uuid("83AE4CD0-80AA-5783-8572-F15E5F85329E"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightPosition )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightTarget )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightTarget )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector3 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Focus )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Focus )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LimitingConeAngle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LimitingConeAngle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SpecularExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SpecularExponent )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SpecularAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SpecularAmount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapScale )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColor )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapKernelSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_HeightMapInterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_LightColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightPosition(This,value) \
    ( (This)->lpVtbl->get_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightPosition(This,value) \
    ( (This)->lpVtbl->put_LightPosition(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightTarget(This,value) \
    ( (This)->lpVtbl->get_LightTarget(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightTarget(This,value) \
    ( (This)->lpVtbl->put_LightTarget(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_Focus(This,value) \
    ( (This)->lpVtbl->get_Focus(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_Focus(This,value) \
    ( (This)->lpVtbl->put_Focus(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LimitingConeAngle(This,value) \
    ( (This)->lpVtbl->get_LimitingConeAngle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LimitingConeAngle(This,value) \
    ( (This)->lpVtbl->put_LimitingConeAngle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_SpecularExponent(This,value) \
    ( (This)->lpVtbl->get_SpecularExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_SpecularExponent(This,value) \
    ( (This)->lpVtbl->put_SpecularExponent(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_SpecularAmount(This,value) \
    ( (This)->lpVtbl->get_SpecularAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_SpecularAmount(This,value) \
    ( (This)->lpVtbl->put_SpecularAmount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapScale(This,value) \
    ( (This)->lpVtbl->get_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapScale(This,value) \
    ( (This)->lpVtbl->put_HeightMapScale(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightColor(This,value) \
    ( (This)->lpVtbl->get_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightColor(This,value) \
    ( (This)->lpVtbl->put_LightColor(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->get_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapKernelSize(This,value) \
    ( (This)->lpVtbl->put_HeightMapKernelSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->get_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_HeightMapInterpolationMode(This,value) \
    ( (This)->lpVtbl->put_HeightMapInterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_LightColorHdr(This,value) \
    ( (This)->lpVtbl->get_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_LightColorHdr(This,value) \
    ( (This)->lpVtbl->put_LightColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect[] = L"Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IStraightenEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.StraightenEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IStraightenEffect[] = L"Microsoft.Graphics.Canvas.Effects.IStraightenEffect";
/* [object, exclusiveto, uuid("965FC262-2EBA-59E6-935F-2389CB5A305A"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Angle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_MaintainSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_MaintainSize )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_Angle(This,value) \
    ( (This)->lpVtbl->get_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_Angle(This,value) \
    ( (This)->lpVtbl->put_Angle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_MaintainSize(This,value) \
    ( (This)->lpVtbl->get_MaintainSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_MaintainSize(This,value) \
    ( (This)->lpVtbl->put_MaintainSize(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_InterpolationMode(This,value) \
    ( (This)->lpVtbl->get_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_InterpolationMode(This,value) \
    ( (This)->lpVtbl->put_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.StraightenEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IStraightenEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_StraightenEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_StraightenEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_StraightenEffect[] = L"Microsoft.Graphics.Canvas.Effects.StraightenEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITableTransferEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TableTransferEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITableTransferEffect";
/* [object, exclusiveto, uuid("BF0B63B6-FE77-5198-A2A1-3FB80C268B8F"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_RedDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_GreenDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BlueDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [out] */UINT32 * valueCount,
        /* [retval, size_is(, *(valueCount)), out] */float * * valueElements
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaTable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */UINT32 valueCount,
        /* [size_is(valueCount), in] */float * valueElements
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaDisable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_RedTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_RedTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_RedTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_RedTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_RedDisable(This,value) \
    ( (This)->lpVtbl->get_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_RedDisable(This,value) \
    ( (This)->lpVtbl->put_RedDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_GreenTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_GreenTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_GreenTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_GreenTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_GreenDisable(This,value) \
    ( (This)->lpVtbl->get_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_GreenDisable(This,value) \
    ( (This)->lpVtbl->put_GreenDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_BlueTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_BlueTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_BlueTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_BlueTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_BlueDisable(This,value) \
    ( (This)->lpVtbl->get_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_BlueDisable(This,value) \
    ( (This)->lpVtbl->put_BlueDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_AlphaTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->get_AlphaTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_AlphaTable(This,valueCount,valueElements) \
    ( (This)->lpVtbl->put_AlphaTable(This,valueCount,valueElements) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_AlphaDisable(This,value) \
    ( (This)->lpVtbl->get_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_AlphaDisable(This,value) \
    ( (This)->lpVtbl->put_AlphaDisable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TableTransferEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITableTransferEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransferEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TableTransferEffect[] = L"Microsoft.Graphics.Canvas.Effects.TableTransferEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect";
/* [object, exclusiveto, uuid("EF09C6E0-9437-53F7-B7B4-B53C79A0BC37"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Table )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Table )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D * value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_AlphaMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_get_Table(This,value) \
    ( (This)->lpVtbl->get_Table(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_put_Table(This,value) \
    ( (This)->lpVtbl->put_Table(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_get_AlphaMode(This,value) \
    ( (This)->lpVtbl->get_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_put_AlphaMode(This,value) \
    ( (This)->lpVtbl->put_AlphaMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect";
/* [object, exclusiveto, uuid("8AE43E02-2619-5D78-8980-4ED569549BD8"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Temperature )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Temperature )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Tint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Tint )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_get_Temperature(This,value) \
    ( (This)->lpVtbl->get_Temperature(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_put_Temperature(This,value) \
    ( (This)->lpVtbl->put_Temperature(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_get_Tint(This,value) \
    ( (This)->lpVtbl->get_Tint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_put_Tint(This,value) \
    ( (This)->lpVtbl->put_Tint(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect[] = L"Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITileEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TileEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITileEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITileEffect";
/* [object, exclusiveto, uuid("78A809CB-1154-5AD6-A880-E3A175772815"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CRect * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_SourceRectangle )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CRect value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_get_SourceRectangle(This,value) \
    ( (This)->lpVtbl->get_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_put_SourceRectangle(This,value) \
    ( (This)->lpVtbl->put_SourceRectangle(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TileEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITileEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TileEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TileEffect[] = L"Microsoft.Graphics.Canvas.Effects.TileEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITintEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TintEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITintEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITintEffect";
/* [object, exclusiveto, uuid("729A21EA-C61E-5308-9EAE-D638AA1F5B8C"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ClampOutput )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [in] */boolean value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_Color(This,value) \
    ( (This)->lpVtbl->get_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_Color(This,value) \
    ( (This)->lpVtbl->put_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_ClampOutput(This,value) \
    ( (This)->lpVtbl->get_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_ClampOutput(This,value) \
    ( (This)->lpVtbl->put_ClampOutput(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_ColorHdr(This,value) \
    ( (This)->lpVtbl->get_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_ColorHdr(This,value) \
    ( (This)->lpVtbl->put_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITintEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TintEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITintEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.ITintEffectStatics";
/* [object, exclusiveto, uuid("65E31771-4BAF-5C8C-93F4-3B874E29F68D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics * This,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_get_IsSupported(This,value) \
    ( (This)->lpVtbl->get_IsSupported(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TintEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITintEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TintEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TintEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TintEffect[] = L"Microsoft.Graphics.Canvas.Effects.TintEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITransform2DEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.Transform2DEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform2DEffect";
/* [object, exclusiveto, uuid("4467D118-33E7-5B1A-87C2-0F1F0497353D"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Sharpness )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Sharpness )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_InterpolationMode(This,value) \
    ( (This)->lpVtbl->get_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_InterpolationMode(This,value) \
    ( (This)->lpVtbl->put_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_TransformMatrix(This,value) \
    ( (This)->lpVtbl->get_TransformMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_TransformMatrix(This,value) \
    ( (This)->lpVtbl->put_TransformMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_Sharpness(This,value) \
    ( (This)->lpVtbl->get_Sharpness(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_Sharpness(This,value) \
    ( (This)->lpVtbl->put_Sharpness(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.Transform2DEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITransform2DEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform2DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform2DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform2DEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITransform3DEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.Transform3DEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITransform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITransform3DEffect";
/* [object, exclusiveto, uuid("3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InterpolationMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_BorderMode )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_TransformMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_TransformMatrix )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_InterpolationMode(This,value) \
    ( (This)->lpVtbl->get_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_InterpolationMode(This,value) \
    ( (This)->lpVtbl->put_InterpolationMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_BorderMode(This,value) \
    ( (This)->lpVtbl->get_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_BorderMode(This,value) \
    ( (This)->lpVtbl->put_BorderMode(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_TransformMatrix(This,value) \
    ( (This)->lpVtbl->get_TransformMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_TransformMatrix(This,value) \
    ( (This)->lpVtbl->put_TransformMatrix(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.Transform3DEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITransform3DEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_Transform3DEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_Transform3DEffect[] = L"Microsoft.Graphics.Canvas.Effects.Transform3DEffect";
#endif



/*
 *
 * Typedef of Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise
 *
 */
/* [version] */
typedef /* [v1_enum] */
enum __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise
{
    TurbulenceEffectNoise_FractalSum = 0,
    TurbulenceEffectNoise_Turbulence = 1,
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise;



/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.TurbulenceEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect";
/* [object, exclusiveto, uuid("1CB1B33D-20E9-564B-856E-37E9FA1D0016"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Offset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Offset )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Size )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Frequency )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Frequency )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector2 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Octaves )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Octaves )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Seed )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [retval, out] */INT32 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Seed )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [in] */INT32 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Noise )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [retval, out] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Noise )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [in] */__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Tileable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [retval, out] */boolean * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Tileable )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect * This,
        /* [in] */boolean value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Offset(This,value) \
    ( (This)->lpVtbl->get_Offset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Offset(This,value) \
    ( (This)->lpVtbl->put_Offset(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Size(This,value) \
    ( (This)->lpVtbl->get_Size(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Size(This,value) \
    ( (This)->lpVtbl->put_Size(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Frequency(This,value) \
    ( (This)->lpVtbl->get_Frequency(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Frequency(This,value) \
    ( (This)->lpVtbl->put_Frequency(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Octaves(This,value) \
    ( (This)->lpVtbl->get_Octaves(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Octaves(This,value) \
    ( (This)->lpVtbl->put_Octaves(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Seed(This,value) \
    ( (This)->lpVtbl->get_Seed(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Seed(This,value) \
    ( (This)->lpVtbl->put_Seed(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Noise(This,value) \
    ( (This)->lpVtbl->get_Noise(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Noise(This,value) \
    ( (This)->lpVtbl->put_Noise(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_get_Tileable(This,value) \
    ( (This)->lpVtbl->get_Tileable(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_put_Tileable(This,value) \
    ( (This)->lpVtbl->put_Tileable(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.TurbulenceEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_TurbulenceEffect[] = L"Microsoft.Graphics.Canvas.Effects.TurbulenceEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect";
/* [object, exclusiveto, uuid("73098BB4-DCF1-5403-AF44-3344D2982D40"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect[] = L"Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IVignetteEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.VignetteEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IVignetteEffect[] = L"Microsoft.Graphics.Canvas.Effects.IVignetteEffect";
/* [object, exclusiveto, uuid("574D0F9F-EEC7-5989-AC53-135868CF5E0C"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CUI_CColor * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Color )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [in] */__x_ABI_CWindows_CUI_CColor value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Amount )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Curve )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Curve )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_ColorHdr )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [in] */__x_ABI_CWindows_CFoundation_CNumerics_CVector4 value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Color(This,value) \
    ( (This)->lpVtbl->get_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Color(This,value) \
    ( (This)->lpVtbl->put_Color(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Amount(This,value) \
    ( (This)->lpVtbl->get_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Amount(This,value) \
    ( (This)->lpVtbl->put_Amount(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Curve(This,value) \
    ( (This)->lpVtbl->get_Curve(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Curve(This,value) \
    ( (This)->lpVtbl->put_Curve(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_ColorHdr(This,value) \
    ( (This)->lpVtbl->get_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_ColorHdr(This,value) \
    ( (This)->lpVtbl->put_ColorHdr(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.VignetteEffect
 *
 * RuntimeClass can be activated.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IVignetteEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_VignetteEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_VignetteEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_VignetteEffect[] = L"Microsoft.Graphics.Canvas.Effects.VignetteEffect";
#endif




/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect
 *
 *
 * Any object which implements this interface must also implement the following interfaces:
 *     Microsoft.Graphics.Canvas.Effects.ICanvasEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffect[] = L"Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect";
/* [object, exclusiveto, uuid("0B0B945C-96F7-56B4-8317-01DE629FC904"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_InputWhiteLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_InputWhiteLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_OutputWhiteLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
        /* [retval, out] */float * value
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_OutputWhiteLevel )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
        /* [in] */float value
        );
    /* [propget] */HRESULT ( STDMETHODCALLTYPE *get_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
        /* [retval, out] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * * source
        );
    /* [propput] */HRESULT ( STDMETHODCALLTYPE *put_Source )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect * This,
        /* [in] */__x_ABI_CWindows_CGraphics_CEffects_CIGraphicsEffectSource * source
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_get_InputWhiteLevel(This,value) \
    ( (This)->lpVtbl->get_InputWhiteLevel(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_put_InputWhiteLevel(This,value) \
    ( (This)->lpVtbl->put_InputWhiteLevel(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_get_OutputWhiteLevel(This,value) \
    ( (This)->lpVtbl->get_OutputWhiteLevel(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_put_OutputWhiteLevel(This,value) \
    ( (This)->lpVtbl->put_OutputWhiteLevel(This,value) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_get_Source(This,source) \
    ( (This)->lpVtbl->get_Source(This,source) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_put_Source(This,source) \
    ( (This)->lpVtbl->put_Source(This,source) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffect_INTERFACE_DEFINED__) */


/*
 *
 * Interface Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStatics
 *
 * Interface is a part of the implementation of type Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect
 *
 *
 */
#if !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_INTERFACE_DEFINED__)
#define ____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_INTERFACE_DEFINED__
extern const __declspec(selectany) _Null_terminated_ WCHAR InterfaceName_Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffectStatics[] = L"Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStatics";
/* [object, exclusiveto, uuid("58DACBF8-637A-5DA7-9457-1EEEDF5A191C"), version] */
typedef struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStaticsVtbl
{
    BEGIN_INTERFACE
    HRESULT ( STDMETHODCALLTYPE *QueryInterface)(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics * This,
    /* [in] */ __RPC__in REFIID riid,
    /* [annotation][iid_is][out] */
    _COM_Outptr_  void **ppvObject
    );

ULONG ( STDMETHODCALLTYPE *AddRef )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics * This
    );

ULONG ( STDMETHODCALLTYPE *Release )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics * This
    );

HRESULT ( STDMETHODCALLTYPE *GetIids )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics * This,
    /* [out] */ __RPC__out ULONG *iidCount,
    /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*iidCount) IID **iids
    );

HRESULT ( STDMETHODCALLTYPE *GetRuntimeClassName )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics * This,
    /* [out] */ __RPC__deref_out_opt HSTRING *className
    );

HRESULT ( STDMETHODCALLTYPE *GetTrustLevel )(
    __RPC__in __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics * This,
    /* [OUT ] */ __RPC__out TrustLevel *trustLevel
    );
/* [propget] */HRESULT ( STDMETHODCALLTYPE *get_IsSupported )(
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics * This,
        /* [retval, out] */boolean * value
        );
    END_INTERFACE
    
} __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStaticsVtbl;

interface __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics
{
    CONST_VTBL struct __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStaticsVtbl *lpVtbl;
};

#ifdef COBJMACROS
#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_QueryInterface(This,riid,ppvObject) \
( (This)->lpVtbl->QueryInterface(This,riid,ppvObject) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_AddRef(This) \
        ( (This)->lpVtbl->AddRef(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_Release(This) \
        ( (This)->lpVtbl->Release(This) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_GetIids(This,iidCount,iids) \
        ( (This)->lpVtbl->GetIids(This,iidCount,iids) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_GetRuntimeClassName(This,className) \
        ( (This)->lpVtbl->GetRuntimeClassName(This,className) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_GetTrustLevel(This,trustLevel) \
        ( (This)->lpVtbl->GetTrustLevel(This,trustLevel) )

#define __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_get_IsSupported(This,value) \
    ( (This)->lpVtbl->get_IsSupported(This,value) )


#endif /* COBJMACROS */


EXTERN_C const IID IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics;
#endif /* !defined(____x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIWhiteLevelAdjustmentEffectStatics_INTERFACE_DEFINED__) */


/*
 *
 * Class Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect
 *
 * RuntimeClass can be activated.
 *
 * RuntimeClass contains static methods.
 *
 * Class implements the following interfaces:
 *    Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect ** Default Interface **
 *
 * Class Threading Model:  Both Single and Multi Threaded Apartment
 *
 * Class Marshaling Behavior:  Agile - Class is agile
 *
 */

#ifndef RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect_DEFINED
#define RUNTIMECLASS_Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect_DEFINED
extern const __declspec(selectany) _Null_terminated_ WCHAR RuntimeClass_Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect[] = L"Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect";
#endif


#endif // defined(__cplusplus)
#pragma pop_macro("MIDL_CONST_ID")
#endif // __Microsoft2EGraphics2ECanvas_p_h__

#endif // __Microsoft2EGraphics2ECanvas_h__
